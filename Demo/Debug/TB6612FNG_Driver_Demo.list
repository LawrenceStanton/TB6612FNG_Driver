
TB6612FNG_Driver_Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c68  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08002d28  08002d28  00012d28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002db8  08002db8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002db8  08002db8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002db8  08002db8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002db8  08002db8  00012db8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002dbc  08002dbc  00012dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002dc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  2000000c  08002dcc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000007c  08002dcc  0002007c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000074c5  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000142c  00000000  00000000  000274f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008c0  00000000  00000000  00028928  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000808  00000000  00000000  000291e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000d990  00000000  00000000  000299f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006c89  00000000  00000000  00037380  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0004fbe8  00000000  00000000  0003e009  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0008dbf1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002068  00000000  00000000  0008dc6c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002d10 	.word	0x08002d10

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002d10 	.word	0x08002d10

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_cfrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	1c08      	adds	r0, r1, #0
 8000224:	4661      	mov	r1, ip
 8000226:	e7ff      	b.n	8000228 <__aeabi_cfcmpeq>

08000228 <__aeabi_cfcmpeq>:
 8000228:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800022a:	f000 f8c1 	bl	80003b0 <__lesf2>
 800022e:	2800      	cmp	r0, #0
 8000230:	d401      	bmi.n	8000236 <__aeabi_cfcmpeq+0xe>
 8000232:	2100      	movs	r1, #0
 8000234:	42c8      	cmn	r0, r1
 8000236:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000238 <__aeabi_fcmpeq>:
 8000238:	b510      	push	{r4, lr}
 800023a:	f000 f843 	bl	80002c4 <__eqsf2>
 800023e:	4240      	negs	r0, r0
 8000240:	3001      	adds	r0, #1
 8000242:	bd10      	pop	{r4, pc}

08000244 <__aeabi_fcmplt>:
 8000244:	b510      	push	{r4, lr}
 8000246:	f000 f8b3 	bl	80003b0 <__lesf2>
 800024a:	2800      	cmp	r0, #0
 800024c:	db01      	blt.n	8000252 <__aeabi_fcmplt+0xe>
 800024e:	2000      	movs	r0, #0
 8000250:	bd10      	pop	{r4, pc}
 8000252:	2001      	movs	r0, #1
 8000254:	bd10      	pop	{r4, pc}
 8000256:	46c0      	nop			; (mov r8, r8)

08000258 <__aeabi_fcmple>:
 8000258:	b510      	push	{r4, lr}
 800025a:	f000 f8a9 	bl	80003b0 <__lesf2>
 800025e:	2800      	cmp	r0, #0
 8000260:	dd01      	ble.n	8000266 <__aeabi_fcmple+0xe>
 8000262:	2000      	movs	r0, #0
 8000264:	bd10      	pop	{r4, pc}
 8000266:	2001      	movs	r0, #1
 8000268:	bd10      	pop	{r4, pc}
 800026a:	46c0      	nop			; (mov r8, r8)

0800026c <__aeabi_fcmpgt>:
 800026c:	b510      	push	{r4, lr}
 800026e:	f000 f851 	bl	8000314 <__gesf2>
 8000272:	2800      	cmp	r0, #0
 8000274:	dc01      	bgt.n	800027a <__aeabi_fcmpgt+0xe>
 8000276:	2000      	movs	r0, #0
 8000278:	bd10      	pop	{r4, pc}
 800027a:	2001      	movs	r0, #1
 800027c:	bd10      	pop	{r4, pc}
 800027e:	46c0      	nop			; (mov r8, r8)

08000280 <__aeabi_fcmpge>:
 8000280:	b510      	push	{r4, lr}
 8000282:	f000 f847 	bl	8000314 <__gesf2>
 8000286:	2800      	cmp	r0, #0
 8000288:	da01      	bge.n	800028e <__aeabi_fcmpge+0xe>
 800028a:	2000      	movs	r0, #0
 800028c:	bd10      	pop	{r4, pc}
 800028e:	2001      	movs	r0, #1
 8000290:	bd10      	pop	{r4, pc}
 8000292:	46c0      	nop			; (mov r8, r8)

08000294 <__aeabi_f2uiz>:
 8000294:	219e      	movs	r1, #158	; 0x9e
 8000296:	b510      	push	{r4, lr}
 8000298:	05c9      	lsls	r1, r1, #23
 800029a:	1c04      	adds	r4, r0, #0
 800029c:	f7ff fff0 	bl	8000280 <__aeabi_fcmpge>
 80002a0:	2800      	cmp	r0, #0
 80002a2:	d103      	bne.n	80002ac <__aeabi_f2uiz+0x18>
 80002a4:	1c20      	adds	r0, r4, #0
 80002a6:	f000 fbc9 	bl	8000a3c <__aeabi_f2iz>
 80002aa:	bd10      	pop	{r4, pc}
 80002ac:	219e      	movs	r1, #158	; 0x9e
 80002ae:	1c20      	adds	r0, r4, #0
 80002b0:	05c9      	lsls	r1, r1, #23
 80002b2:	f000 f9ff 	bl	80006b4 <__aeabi_fsub>
 80002b6:	f000 fbc1 	bl	8000a3c <__aeabi_f2iz>
 80002ba:	2380      	movs	r3, #128	; 0x80
 80002bc:	061b      	lsls	r3, r3, #24
 80002be:	469c      	mov	ip, r3
 80002c0:	4460      	add	r0, ip
 80002c2:	e7f2      	b.n	80002aa <__aeabi_f2uiz+0x16>

080002c4 <__eqsf2>:
 80002c4:	b570      	push	{r4, r5, r6, lr}
 80002c6:	0042      	lsls	r2, r0, #1
 80002c8:	024e      	lsls	r6, r1, #9
 80002ca:	004c      	lsls	r4, r1, #1
 80002cc:	0245      	lsls	r5, r0, #9
 80002ce:	0a6d      	lsrs	r5, r5, #9
 80002d0:	0e12      	lsrs	r2, r2, #24
 80002d2:	0fc3      	lsrs	r3, r0, #31
 80002d4:	0a76      	lsrs	r6, r6, #9
 80002d6:	0e24      	lsrs	r4, r4, #24
 80002d8:	0fc9      	lsrs	r1, r1, #31
 80002da:	2aff      	cmp	r2, #255	; 0xff
 80002dc:	d00f      	beq.n	80002fe <__eqsf2+0x3a>
 80002de:	2cff      	cmp	r4, #255	; 0xff
 80002e0:	d011      	beq.n	8000306 <__eqsf2+0x42>
 80002e2:	2001      	movs	r0, #1
 80002e4:	42a2      	cmp	r2, r4
 80002e6:	d000      	beq.n	80002ea <__eqsf2+0x26>
 80002e8:	bd70      	pop	{r4, r5, r6, pc}
 80002ea:	42b5      	cmp	r5, r6
 80002ec:	d1fc      	bne.n	80002e8 <__eqsf2+0x24>
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d00d      	beq.n	800030e <__eqsf2+0x4a>
 80002f2:	2a00      	cmp	r2, #0
 80002f4:	d1f8      	bne.n	80002e8 <__eqsf2+0x24>
 80002f6:	0028      	movs	r0, r5
 80002f8:	1e45      	subs	r5, r0, #1
 80002fa:	41a8      	sbcs	r0, r5
 80002fc:	e7f4      	b.n	80002e8 <__eqsf2+0x24>
 80002fe:	2001      	movs	r0, #1
 8000300:	2d00      	cmp	r5, #0
 8000302:	d1f1      	bne.n	80002e8 <__eqsf2+0x24>
 8000304:	e7eb      	b.n	80002de <__eqsf2+0x1a>
 8000306:	2001      	movs	r0, #1
 8000308:	2e00      	cmp	r6, #0
 800030a:	d1ed      	bne.n	80002e8 <__eqsf2+0x24>
 800030c:	e7e9      	b.n	80002e2 <__eqsf2+0x1e>
 800030e:	2000      	movs	r0, #0
 8000310:	e7ea      	b.n	80002e8 <__eqsf2+0x24>
 8000312:	46c0      	nop			; (mov r8, r8)

08000314 <__gesf2>:
 8000314:	b570      	push	{r4, r5, r6, lr}
 8000316:	004a      	lsls	r2, r1, #1
 8000318:	024e      	lsls	r6, r1, #9
 800031a:	0245      	lsls	r5, r0, #9
 800031c:	0044      	lsls	r4, r0, #1
 800031e:	0a6d      	lsrs	r5, r5, #9
 8000320:	0e24      	lsrs	r4, r4, #24
 8000322:	0fc3      	lsrs	r3, r0, #31
 8000324:	0a76      	lsrs	r6, r6, #9
 8000326:	0e12      	lsrs	r2, r2, #24
 8000328:	0fc9      	lsrs	r1, r1, #31
 800032a:	2cff      	cmp	r4, #255	; 0xff
 800032c:	d015      	beq.n	800035a <__gesf2+0x46>
 800032e:	2aff      	cmp	r2, #255	; 0xff
 8000330:	d00e      	beq.n	8000350 <__gesf2+0x3c>
 8000332:	2c00      	cmp	r4, #0
 8000334:	d115      	bne.n	8000362 <__gesf2+0x4e>
 8000336:	2a00      	cmp	r2, #0
 8000338:	d101      	bne.n	800033e <__gesf2+0x2a>
 800033a:	2e00      	cmp	r6, #0
 800033c:	d01c      	beq.n	8000378 <__gesf2+0x64>
 800033e:	2d00      	cmp	r5, #0
 8000340:	d014      	beq.n	800036c <__gesf2+0x58>
 8000342:	428b      	cmp	r3, r1
 8000344:	d027      	beq.n	8000396 <__gesf2+0x82>
 8000346:	2002      	movs	r0, #2
 8000348:	3b01      	subs	r3, #1
 800034a:	4018      	ands	r0, r3
 800034c:	3801      	subs	r0, #1
 800034e:	bd70      	pop	{r4, r5, r6, pc}
 8000350:	2e00      	cmp	r6, #0
 8000352:	d0ee      	beq.n	8000332 <__gesf2+0x1e>
 8000354:	2002      	movs	r0, #2
 8000356:	4240      	negs	r0, r0
 8000358:	e7f9      	b.n	800034e <__gesf2+0x3a>
 800035a:	2d00      	cmp	r5, #0
 800035c:	d1fa      	bne.n	8000354 <__gesf2+0x40>
 800035e:	2aff      	cmp	r2, #255	; 0xff
 8000360:	d00e      	beq.n	8000380 <__gesf2+0x6c>
 8000362:	2a00      	cmp	r2, #0
 8000364:	d10e      	bne.n	8000384 <__gesf2+0x70>
 8000366:	2e00      	cmp	r6, #0
 8000368:	d0ed      	beq.n	8000346 <__gesf2+0x32>
 800036a:	e00b      	b.n	8000384 <__gesf2+0x70>
 800036c:	2301      	movs	r3, #1
 800036e:	3901      	subs	r1, #1
 8000370:	4399      	bics	r1, r3
 8000372:	0008      	movs	r0, r1
 8000374:	3001      	adds	r0, #1
 8000376:	e7ea      	b.n	800034e <__gesf2+0x3a>
 8000378:	2000      	movs	r0, #0
 800037a:	2d00      	cmp	r5, #0
 800037c:	d0e7      	beq.n	800034e <__gesf2+0x3a>
 800037e:	e7e2      	b.n	8000346 <__gesf2+0x32>
 8000380:	2e00      	cmp	r6, #0
 8000382:	d1e7      	bne.n	8000354 <__gesf2+0x40>
 8000384:	428b      	cmp	r3, r1
 8000386:	d1de      	bne.n	8000346 <__gesf2+0x32>
 8000388:	4294      	cmp	r4, r2
 800038a:	dd05      	ble.n	8000398 <__gesf2+0x84>
 800038c:	2102      	movs	r1, #2
 800038e:	1e58      	subs	r0, r3, #1
 8000390:	4008      	ands	r0, r1
 8000392:	3801      	subs	r0, #1
 8000394:	e7db      	b.n	800034e <__gesf2+0x3a>
 8000396:	2400      	movs	r4, #0
 8000398:	42a2      	cmp	r2, r4
 800039a:	dc04      	bgt.n	80003a6 <__gesf2+0x92>
 800039c:	42b5      	cmp	r5, r6
 800039e:	d8d2      	bhi.n	8000346 <__gesf2+0x32>
 80003a0:	2000      	movs	r0, #0
 80003a2:	42b5      	cmp	r5, r6
 80003a4:	d2d3      	bcs.n	800034e <__gesf2+0x3a>
 80003a6:	1e58      	subs	r0, r3, #1
 80003a8:	2301      	movs	r3, #1
 80003aa:	4398      	bics	r0, r3
 80003ac:	3001      	adds	r0, #1
 80003ae:	e7ce      	b.n	800034e <__gesf2+0x3a>

080003b0 <__lesf2>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	0042      	lsls	r2, r0, #1
 80003b4:	0244      	lsls	r4, r0, #9
 80003b6:	024d      	lsls	r5, r1, #9
 80003b8:	0fc3      	lsrs	r3, r0, #31
 80003ba:	0048      	lsls	r0, r1, #1
 80003bc:	0a64      	lsrs	r4, r4, #9
 80003be:	0e12      	lsrs	r2, r2, #24
 80003c0:	0a6d      	lsrs	r5, r5, #9
 80003c2:	0e00      	lsrs	r0, r0, #24
 80003c4:	0fc9      	lsrs	r1, r1, #31
 80003c6:	2aff      	cmp	r2, #255	; 0xff
 80003c8:	d012      	beq.n	80003f0 <__lesf2+0x40>
 80003ca:	28ff      	cmp	r0, #255	; 0xff
 80003cc:	d00c      	beq.n	80003e8 <__lesf2+0x38>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d112      	bne.n	80003f8 <__lesf2+0x48>
 80003d2:	2800      	cmp	r0, #0
 80003d4:	d119      	bne.n	800040a <__lesf2+0x5a>
 80003d6:	2d00      	cmp	r5, #0
 80003d8:	d117      	bne.n	800040a <__lesf2+0x5a>
 80003da:	2c00      	cmp	r4, #0
 80003dc:	d02b      	beq.n	8000436 <__lesf2+0x86>
 80003de:	2002      	movs	r0, #2
 80003e0:	3b01      	subs	r3, #1
 80003e2:	4018      	ands	r0, r3
 80003e4:	3801      	subs	r0, #1
 80003e6:	e026      	b.n	8000436 <__lesf2+0x86>
 80003e8:	2d00      	cmp	r5, #0
 80003ea:	d0f0      	beq.n	80003ce <__lesf2+0x1e>
 80003ec:	2002      	movs	r0, #2
 80003ee:	e022      	b.n	8000436 <__lesf2+0x86>
 80003f0:	2c00      	cmp	r4, #0
 80003f2:	d1fb      	bne.n	80003ec <__lesf2+0x3c>
 80003f4:	28ff      	cmp	r0, #255	; 0xff
 80003f6:	d01f      	beq.n	8000438 <__lesf2+0x88>
 80003f8:	2800      	cmp	r0, #0
 80003fa:	d11f      	bne.n	800043c <__lesf2+0x8c>
 80003fc:	2d00      	cmp	r5, #0
 80003fe:	d11d      	bne.n	800043c <__lesf2+0x8c>
 8000400:	2002      	movs	r0, #2
 8000402:	3b01      	subs	r3, #1
 8000404:	4018      	ands	r0, r3
 8000406:	3801      	subs	r0, #1
 8000408:	e015      	b.n	8000436 <__lesf2+0x86>
 800040a:	2c00      	cmp	r4, #0
 800040c:	d00e      	beq.n	800042c <__lesf2+0x7c>
 800040e:	428b      	cmp	r3, r1
 8000410:	d1e5      	bne.n	80003de <__lesf2+0x2e>
 8000412:	2200      	movs	r2, #0
 8000414:	4290      	cmp	r0, r2
 8000416:	dc04      	bgt.n	8000422 <__lesf2+0x72>
 8000418:	42ac      	cmp	r4, r5
 800041a:	d8e0      	bhi.n	80003de <__lesf2+0x2e>
 800041c:	2000      	movs	r0, #0
 800041e:	42ac      	cmp	r4, r5
 8000420:	d209      	bcs.n	8000436 <__lesf2+0x86>
 8000422:	1e58      	subs	r0, r3, #1
 8000424:	2301      	movs	r3, #1
 8000426:	4398      	bics	r0, r3
 8000428:	3001      	adds	r0, #1
 800042a:	e004      	b.n	8000436 <__lesf2+0x86>
 800042c:	2301      	movs	r3, #1
 800042e:	3901      	subs	r1, #1
 8000430:	4399      	bics	r1, r3
 8000432:	0008      	movs	r0, r1
 8000434:	3001      	adds	r0, #1
 8000436:	bd30      	pop	{r4, r5, pc}
 8000438:	2d00      	cmp	r5, #0
 800043a:	d1d7      	bne.n	80003ec <__lesf2+0x3c>
 800043c:	428b      	cmp	r3, r1
 800043e:	d1ce      	bne.n	80003de <__lesf2+0x2e>
 8000440:	4282      	cmp	r2, r0
 8000442:	dde7      	ble.n	8000414 <__lesf2+0x64>
 8000444:	2102      	movs	r1, #2
 8000446:	1e58      	subs	r0, r3, #1
 8000448:	4008      	ands	r0, r1
 800044a:	3801      	subs	r0, #1
 800044c:	e7f3      	b.n	8000436 <__lesf2+0x86>
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__aeabi_fmul>:
 8000450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000452:	464e      	mov	r6, r9
 8000454:	4657      	mov	r7, sl
 8000456:	4645      	mov	r5, r8
 8000458:	46de      	mov	lr, fp
 800045a:	b5e0      	push	{r5, r6, r7, lr}
 800045c:	0243      	lsls	r3, r0, #9
 800045e:	0a5b      	lsrs	r3, r3, #9
 8000460:	0045      	lsls	r5, r0, #1
 8000462:	b083      	sub	sp, #12
 8000464:	1c0f      	adds	r7, r1, #0
 8000466:	4699      	mov	r9, r3
 8000468:	0e2d      	lsrs	r5, r5, #24
 800046a:	0fc6      	lsrs	r6, r0, #31
 800046c:	2d00      	cmp	r5, #0
 800046e:	d057      	beq.n	8000520 <__aeabi_fmul+0xd0>
 8000470:	2dff      	cmp	r5, #255	; 0xff
 8000472:	d024      	beq.n	80004be <__aeabi_fmul+0x6e>
 8000474:	2080      	movs	r0, #128	; 0x80
 8000476:	00db      	lsls	r3, r3, #3
 8000478:	04c0      	lsls	r0, r0, #19
 800047a:	4318      	orrs	r0, r3
 800047c:	2300      	movs	r3, #0
 800047e:	4681      	mov	r9, r0
 8000480:	469a      	mov	sl, r3
 8000482:	469b      	mov	fp, r3
 8000484:	3d7f      	subs	r5, #127	; 0x7f
 8000486:	027c      	lsls	r4, r7, #9
 8000488:	007a      	lsls	r2, r7, #1
 800048a:	0ffb      	lsrs	r3, r7, #31
 800048c:	0a64      	lsrs	r4, r4, #9
 800048e:	0e12      	lsrs	r2, r2, #24
 8000490:	4698      	mov	r8, r3
 8000492:	d023      	beq.n	80004dc <__aeabi_fmul+0x8c>
 8000494:	2aff      	cmp	r2, #255	; 0xff
 8000496:	d04b      	beq.n	8000530 <__aeabi_fmul+0xe0>
 8000498:	00e3      	lsls	r3, r4, #3
 800049a:	2480      	movs	r4, #128	; 0x80
 800049c:	2000      	movs	r0, #0
 800049e:	04e4      	lsls	r4, r4, #19
 80004a0:	3a7f      	subs	r2, #127	; 0x7f
 80004a2:	431c      	orrs	r4, r3
 80004a4:	18ad      	adds	r5, r5, r2
 80004a6:	1c6b      	adds	r3, r5, #1
 80004a8:	4647      	mov	r7, r8
 80004aa:	9301      	str	r3, [sp, #4]
 80004ac:	4653      	mov	r3, sl
 80004ae:	4077      	eors	r7, r6
 80004b0:	003a      	movs	r2, r7
 80004b2:	2b0f      	cmp	r3, #15
 80004b4:	d848      	bhi.n	8000548 <__aeabi_fmul+0xf8>
 80004b6:	497d      	ldr	r1, [pc, #500]	; (80006ac <__aeabi_fmul+0x25c>)
 80004b8:	009b      	lsls	r3, r3, #2
 80004ba:	58cb      	ldr	r3, [r1, r3]
 80004bc:	469f      	mov	pc, r3
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d000      	beq.n	80004c4 <__aeabi_fmul+0x74>
 80004c2:	e085      	b.n	80005d0 <__aeabi_fmul+0x180>
 80004c4:	3308      	adds	r3, #8
 80004c6:	469a      	mov	sl, r3
 80004c8:	3b06      	subs	r3, #6
 80004ca:	469b      	mov	fp, r3
 80004cc:	027c      	lsls	r4, r7, #9
 80004ce:	007a      	lsls	r2, r7, #1
 80004d0:	0ffb      	lsrs	r3, r7, #31
 80004d2:	25ff      	movs	r5, #255	; 0xff
 80004d4:	0a64      	lsrs	r4, r4, #9
 80004d6:	0e12      	lsrs	r2, r2, #24
 80004d8:	4698      	mov	r8, r3
 80004da:	d1db      	bne.n	8000494 <__aeabi_fmul+0x44>
 80004dc:	2c00      	cmp	r4, #0
 80004de:	d000      	beq.n	80004e2 <__aeabi_fmul+0x92>
 80004e0:	e090      	b.n	8000604 <__aeabi_fmul+0x1b4>
 80004e2:	4652      	mov	r2, sl
 80004e4:	2301      	movs	r3, #1
 80004e6:	431a      	orrs	r2, r3
 80004e8:	4692      	mov	sl, r2
 80004ea:	2001      	movs	r0, #1
 80004ec:	e7db      	b.n	80004a6 <__aeabi_fmul+0x56>
 80004ee:	464c      	mov	r4, r9
 80004f0:	4658      	mov	r0, fp
 80004f2:	0017      	movs	r7, r2
 80004f4:	2802      	cmp	r0, #2
 80004f6:	d024      	beq.n	8000542 <__aeabi_fmul+0xf2>
 80004f8:	2803      	cmp	r0, #3
 80004fa:	d100      	bne.n	80004fe <__aeabi_fmul+0xae>
 80004fc:	e0cf      	b.n	800069e <__aeabi_fmul+0x24e>
 80004fe:	2200      	movs	r2, #0
 8000500:	2300      	movs	r3, #0
 8000502:	2801      	cmp	r0, #1
 8000504:	d14d      	bne.n	80005a2 <__aeabi_fmul+0x152>
 8000506:	0258      	lsls	r0, r3, #9
 8000508:	05d2      	lsls	r2, r2, #23
 800050a:	0a40      	lsrs	r0, r0, #9
 800050c:	07ff      	lsls	r7, r7, #31
 800050e:	4310      	orrs	r0, r2
 8000510:	4338      	orrs	r0, r7
 8000512:	b003      	add	sp, #12
 8000514:	bc3c      	pop	{r2, r3, r4, r5}
 8000516:	4690      	mov	r8, r2
 8000518:	4699      	mov	r9, r3
 800051a:	46a2      	mov	sl, r4
 800051c:	46ab      	mov	fp, r5
 800051e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000520:	2b00      	cmp	r3, #0
 8000522:	d15b      	bne.n	80005dc <__aeabi_fmul+0x18c>
 8000524:	2304      	movs	r3, #4
 8000526:	469a      	mov	sl, r3
 8000528:	3b03      	subs	r3, #3
 800052a:	2500      	movs	r5, #0
 800052c:	469b      	mov	fp, r3
 800052e:	e7aa      	b.n	8000486 <__aeabi_fmul+0x36>
 8000530:	35ff      	adds	r5, #255	; 0xff
 8000532:	2c00      	cmp	r4, #0
 8000534:	d160      	bne.n	80005f8 <__aeabi_fmul+0x1a8>
 8000536:	4652      	mov	r2, sl
 8000538:	2302      	movs	r3, #2
 800053a:	431a      	orrs	r2, r3
 800053c:	4692      	mov	sl, r2
 800053e:	2002      	movs	r0, #2
 8000540:	e7b1      	b.n	80004a6 <__aeabi_fmul+0x56>
 8000542:	22ff      	movs	r2, #255	; 0xff
 8000544:	2300      	movs	r3, #0
 8000546:	e7de      	b.n	8000506 <__aeabi_fmul+0xb6>
 8000548:	464b      	mov	r3, r9
 800054a:	0c1b      	lsrs	r3, r3, #16
 800054c:	469c      	mov	ip, r3
 800054e:	464b      	mov	r3, r9
 8000550:	0426      	lsls	r6, r4, #16
 8000552:	0c36      	lsrs	r6, r6, #16
 8000554:	0418      	lsls	r0, r3, #16
 8000556:	4661      	mov	r1, ip
 8000558:	0033      	movs	r3, r6
 800055a:	0c22      	lsrs	r2, r4, #16
 800055c:	4664      	mov	r4, ip
 800055e:	0c00      	lsrs	r0, r0, #16
 8000560:	4343      	muls	r3, r0
 8000562:	434e      	muls	r6, r1
 8000564:	4350      	muls	r0, r2
 8000566:	4354      	muls	r4, r2
 8000568:	1980      	adds	r0, r0, r6
 800056a:	0c1a      	lsrs	r2, r3, #16
 800056c:	1812      	adds	r2, r2, r0
 800056e:	4296      	cmp	r6, r2
 8000570:	d903      	bls.n	800057a <__aeabi_fmul+0x12a>
 8000572:	2180      	movs	r1, #128	; 0x80
 8000574:	0249      	lsls	r1, r1, #9
 8000576:	468c      	mov	ip, r1
 8000578:	4464      	add	r4, ip
 800057a:	041b      	lsls	r3, r3, #16
 800057c:	0c1b      	lsrs	r3, r3, #16
 800057e:	0410      	lsls	r0, r2, #16
 8000580:	18c0      	adds	r0, r0, r3
 8000582:	0183      	lsls	r3, r0, #6
 8000584:	1e5e      	subs	r6, r3, #1
 8000586:	41b3      	sbcs	r3, r6
 8000588:	0e80      	lsrs	r0, r0, #26
 800058a:	4318      	orrs	r0, r3
 800058c:	0c13      	lsrs	r3, r2, #16
 800058e:	191b      	adds	r3, r3, r4
 8000590:	019b      	lsls	r3, r3, #6
 8000592:	4303      	orrs	r3, r0
 8000594:	001c      	movs	r4, r3
 8000596:	0123      	lsls	r3, r4, #4
 8000598:	d579      	bpl.n	800068e <__aeabi_fmul+0x23e>
 800059a:	2301      	movs	r3, #1
 800059c:	0862      	lsrs	r2, r4, #1
 800059e:	401c      	ands	r4, r3
 80005a0:	4314      	orrs	r4, r2
 80005a2:	9a01      	ldr	r2, [sp, #4]
 80005a4:	327f      	adds	r2, #127	; 0x7f
 80005a6:	2a00      	cmp	r2, #0
 80005a8:	dd4d      	ble.n	8000646 <__aeabi_fmul+0x1f6>
 80005aa:	0763      	lsls	r3, r4, #29
 80005ac:	d004      	beq.n	80005b8 <__aeabi_fmul+0x168>
 80005ae:	230f      	movs	r3, #15
 80005b0:	4023      	ands	r3, r4
 80005b2:	2b04      	cmp	r3, #4
 80005b4:	d000      	beq.n	80005b8 <__aeabi_fmul+0x168>
 80005b6:	3404      	adds	r4, #4
 80005b8:	0123      	lsls	r3, r4, #4
 80005ba:	d503      	bpl.n	80005c4 <__aeabi_fmul+0x174>
 80005bc:	4b3c      	ldr	r3, [pc, #240]	; (80006b0 <__aeabi_fmul+0x260>)
 80005be:	9a01      	ldr	r2, [sp, #4]
 80005c0:	401c      	ands	r4, r3
 80005c2:	3280      	adds	r2, #128	; 0x80
 80005c4:	2afe      	cmp	r2, #254	; 0xfe
 80005c6:	dcbc      	bgt.n	8000542 <__aeabi_fmul+0xf2>
 80005c8:	01a3      	lsls	r3, r4, #6
 80005ca:	0a5b      	lsrs	r3, r3, #9
 80005cc:	b2d2      	uxtb	r2, r2
 80005ce:	e79a      	b.n	8000506 <__aeabi_fmul+0xb6>
 80005d0:	230c      	movs	r3, #12
 80005d2:	469a      	mov	sl, r3
 80005d4:	3b09      	subs	r3, #9
 80005d6:	25ff      	movs	r5, #255	; 0xff
 80005d8:	469b      	mov	fp, r3
 80005da:	e754      	b.n	8000486 <__aeabi_fmul+0x36>
 80005dc:	0018      	movs	r0, r3
 80005de:	f000 fa8d 	bl	8000afc <__clzsi2>
 80005e2:	464a      	mov	r2, r9
 80005e4:	1f43      	subs	r3, r0, #5
 80005e6:	2576      	movs	r5, #118	; 0x76
 80005e8:	409a      	lsls	r2, r3
 80005ea:	2300      	movs	r3, #0
 80005ec:	426d      	negs	r5, r5
 80005ee:	4691      	mov	r9, r2
 80005f0:	1a2d      	subs	r5, r5, r0
 80005f2:	469a      	mov	sl, r3
 80005f4:	469b      	mov	fp, r3
 80005f6:	e746      	b.n	8000486 <__aeabi_fmul+0x36>
 80005f8:	4652      	mov	r2, sl
 80005fa:	2303      	movs	r3, #3
 80005fc:	431a      	orrs	r2, r3
 80005fe:	4692      	mov	sl, r2
 8000600:	2003      	movs	r0, #3
 8000602:	e750      	b.n	80004a6 <__aeabi_fmul+0x56>
 8000604:	0020      	movs	r0, r4
 8000606:	f000 fa79 	bl	8000afc <__clzsi2>
 800060a:	1f43      	subs	r3, r0, #5
 800060c:	1a2d      	subs	r5, r5, r0
 800060e:	409c      	lsls	r4, r3
 8000610:	3d76      	subs	r5, #118	; 0x76
 8000612:	2000      	movs	r0, #0
 8000614:	e747      	b.n	80004a6 <__aeabi_fmul+0x56>
 8000616:	2380      	movs	r3, #128	; 0x80
 8000618:	2700      	movs	r7, #0
 800061a:	03db      	lsls	r3, r3, #15
 800061c:	22ff      	movs	r2, #255	; 0xff
 800061e:	e772      	b.n	8000506 <__aeabi_fmul+0xb6>
 8000620:	4642      	mov	r2, r8
 8000622:	e766      	b.n	80004f2 <__aeabi_fmul+0xa2>
 8000624:	464c      	mov	r4, r9
 8000626:	0032      	movs	r2, r6
 8000628:	4658      	mov	r0, fp
 800062a:	e762      	b.n	80004f2 <__aeabi_fmul+0xa2>
 800062c:	2380      	movs	r3, #128	; 0x80
 800062e:	464a      	mov	r2, r9
 8000630:	03db      	lsls	r3, r3, #15
 8000632:	421a      	tst	r2, r3
 8000634:	d022      	beq.n	800067c <__aeabi_fmul+0x22c>
 8000636:	421c      	tst	r4, r3
 8000638:	d120      	bne.n	800067c <__aeabi_fmul+0x22c>
 800063a:	4323      	orrs	r3, r4
 800063c:	025b      	lsls	r3, r3, #9
 800063e:	0a5b      	lsrs	r3, r3, #9
 8000640:	4647      	mov	r7, r8
 8000642:	22ff      	movs	r2, #255	; 0xff
 8000644:	e75f      	b.n	8000506 <__aeabi_fmul+0xb6>
 8000646:	2301      	movs	r3, #1
 8000648:	1a9a      	subs	r2, r3, r2
 800064a:	2a1b      	cmp	r2, #27
 800064c:	dc21      	bgt.n	8000692 <__aeabi_fmul+0x242>
 800064e:	0023      	movs	r3, r4
 8000650:	9901      	ldr	r1, [sp, #4]
 8000652:	40d3      	lsrs	r3, r2
 8000654:	319e      	adds	r1, #158	; 0x9e
 8000656:	408c      	lsls	r4, r1
 8000658:	001a      	movs	r2, r3
 800065a:	0023      	movs	r3, r4
 800065c:	1e5c      	subs	r4, r3, #1
 800065e:	41a3      	sbcs	r3, r4
 8000660:	4313      	orrs	r3, r2
 8000662:	075a      	lsls	r2, r3, #29
 8000664:	d004      	beq.n	8000670 <__aeabi_fmul+0x220>
 8000666:	220f      	movs	r2, #15
 8000668:	401a      	ands	r2, r3
 800066a:	2a04      	cmp	r2, #4
 800066c:	d000      	beq.n	8000670 <__aeabi_fmul+0x220>
 800066e:	3304      	adds	r3, #4
 8000670:	015a      	lsls	r2, r3, #5
 8000672:	d411      	bmi.n	8000698 <__aeabi_fmul+0x248>
 8000674:	019b      	lsls	r3, r3, #6
 8000676:	0a5b      	lsrs	r3, r3, #9
 8000678:	2200      	movs	r2, #0
 800067a:	e744      	b.n	8000506 <__aeabi_fmul+0xb6>
 800067c:	2380      	movs	r3, #128	; 0x80
 800067e:	464a      	mov	r2, r9
 8000680:	03db      	lsls	r3, r3, #15
 8000682:	4313      	orrs	r3, r2
 8000684:	025b      	lsls	r3, r3, #9
 8000686:	0a5b      	lsrs	r3, r3, #9
 8000688:	0037      	movs	r7, r6
 800068a:	22ff      	movs	r2, #255	; 0xff
 800068c:	e73b      	b.n	8000506 <__aeabi_fmul+0xb6>
 800068e:	9501      	str	r5, [sp, #4]
 8000690:	e787      	b.n	80005a2 <__aeabi_fmul+0x152>
 8000692:	2200      	movs	r2, #0
 8000694:	2300      	movs	r3, #0
 8000696:	e736      	b.n	8000506 <__aeabi_fmul+0xb6>
 8000698:	2201      	movs	r2, #1
 800069a:	2300      	movs	r3, #0
 800069c:	e733      	b.n	8000506 <__aeabi_fmul+0xb6>
 800069e:	2380      	movs	r3, #128	; 0x80
 80006a0:	03db      	lsls	r3, r3, #15
 80006a2:	4323      	orrs	r3, r4
 80006a4:	025b      	lsls	r3, r3, #9
 80006a6:	0a5b      	lsrs	r3, r3, #9
 80006a8:	22ff      	movs	r2, #255	; 0xff
 80006aa:	e72c      	b.n	8000506 <__aeabi_fmul+0xb6>
 80006ac:	08002d68 	.word	0x08002d68
 80006b0:	f7ffffff 	.word	0xf7ffffff

080006b4 <__aeabi_fsub>:
 80006b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006b6:	4647      	mov	r7, r8
 80006b8:	46ce      	mov	lr, r9
 80006ba:	0044      	lsls	r4, r0, #1
 80006bc:	0fc2      	lsrs	r2, r0, #31
 80006be:	b580      	push	{r7, lr}
 80006c0:	0247      	lsls	r7, r0, #9
 80006c2:	0248      	lsls	r0, r1, #9
 80006c4:	0a40      	lsrs	r0, r0, #9
 80006c6:	4684      	mov	ip, r0
 80006c8:	4666      	mov	r6, ip
 80006ca:	0048      	lsls	r0, r1, #1
 80006cc:	0a7f      	lsrs	r7, r7, #9
 80006ce:	0e24      	lsrs	r4, r4, #24
 80006d0:	00f6      	lsls	r6, r6, #3
 80006d2:	0025      	movs	r5, r4
 80006d4:	4690      	mov	r8, r2
 80006d6:	00fb      	lsls	r3, r7, #3
 80006d8:	0e00      	lsrs	r0, r0, #24
 80006da:	0fc9      	lsrs	r1, r1, #31
 80006dc:	46b1      	mov	r9, r6
 80006de:	28ff      	cmp	r0, #255	; 0xff
 80006e0:	d100      	bne.n	80006e4 <__aeabi_fsub+0x30>
 80006e2:	e085      	b.n	80007f0 <__aeabi_fsub+0x13c>
 80006e4:	2601      	movs	r6, #1
 80006e6:	4071      	eors	r1, r6
 80006e8:	1a26      	subs	r6, r4, r0
 80006ea:	4291      	cmp	r1, r2
 80006ec:	d057      	beq.n	800079e <__aeabi_fsub+0xea>
 80006ee:	2e00      	cmp	r6, #0
 80006f0:	dd43      	ble.n	800077a <__aeabi_fsub+0xc6>
 80006f2:	2800      	cmp	r0, #0
 80006f4:	d000      	beq.n	80006f8 <__aeabi_fsub+0x44>
 80006f6:	e07f      	b.n	80007f8 <__aeabi_fsub+0x144>
 80006f8:	4649      	mov	r1, r9
 80006fa:	2900      	cmp	r1, #0
 80006fc:	d100      	bne.n	8000700 <__aeabi_fsub+0x4c>
 80006fe:	e0aa      	b.n	8000856 <__aeabi_fsub+0x1a2>
 8000700:	3e01      	subs	r6, #1
 8000702:	2e00      	cmp	r6, #0
 8000704:	d000      	beq.n	8000708 <__aeabi_fsub+0x54>
 8000706:	e0f7      	b.n	80008f8 <__aeabi_fsub+0x244>
 8000708:	1a5b      	subs	r3, r3, r1
 800070a:	015a      	lsls	r2, r3, #5
 800070c:	d400      	bmi.n	8000710 <__aeabi_fsub+0x5c>
 800070e:	e08b      	b.n	8000828 <__aeabi_fsub+0x174>
 8000710:	019b      	lsls	r3, r3, #6
 8000712:	099c      	lsrs	r4, r3, #6
 8000714:	0020      	movs	r0, r4
 8000716:	f000 f9f1 	bl	8000afc <__clzsi2>
 800071a:	3805      	subs	r0, #5
 800071c:	4084      	lsls	r4, r0
 800071e:	4285      	cmp	r5, r0
 8000720:	dd00      	ble.n	8000724 <__aeabi_fsub+0x70>
 8000722:	e0d3      	b.n	80008cc <__aeabi_fsub+0x218>
 8000724:	1b45      	subs	r5, r0, r5
 8000726:	0023      	movs	r3, r4
 8000728:	2020      	movs	r0, #32
 800072a:	3501      	adds	r5, #1
 800072c:	40eb      	lsrs	r3, r5
 800072e:	1b45      	subs	r5, r0, r5
 8000730:	40ac      	lsls	r4, r5
 8000732:	1e62      	subs	r2, r4, #1
 8000734:	4194      	sbcs	r4, r2
 8000736:	4323      	orrs	r3, r4
 8000738:	2407      	movs	r4, #7
 800073a:	2500      	movs	r5, #0
 800073c:	401c      	ands	r4, r3
 800073e:	2201      	movs	r2, #1
 8000740:	4641      	mov	r1, r8
 8000742:	400a      	ands	r2, r1
 8000744:	2c00      	cmp	r4, #0
 8000746:	d004      	beq.n	8000752 <__aeabi_fsub+0x9e>
 8000748:	210f      	movs	r1, #15
 800074a:	4019      	ands	r1, r3
 800074c:	2904      	cmp	r1, #4
 800074e:	d000      	beq.n	8000752 <__aeabi_fsub+0x9e>
 8000750:	3304      	adds	r3, #4
 8000752:	0159      	lsls	r1, r3, #5
 8000754:	d400      	bmi.n	8000758 <__aeabi_fsub+0xa4>
 8000756:	e080      	b.n	800085a <__aeabi_fsub+0x1a6>
 8000758:	3501      	adds	r5, #1
 800075a:	b2ec      	uxtb	r4, r5
 800075c:	2dff      	cmp	r5, #255	; 0xff
 800075e:	d000      	beq.n	8000762 <__aeabi_fsub+0xae>
 8000760:	e0a3      	b.n	80008aa <__aeabi_fsub+0x1f6>
 8000762:	24ff      	movs	r4, #255	; 0xff
 8000764:	2300      	movs	r3, #0
 8000766:	025b      	lsls	r3, r3, #9
 8000768:	05e4      	lsls	r4, r4, #23
 800076a:	0a58      	lsrs	r0, r3, #9
 800076c:	07d2      	lsls	r2, r2, #31
 800076e:	4320      	orrs	r0, r4
 8000770:	4310      	orrs	r0, r2
 8000772:	bc0c      	pop	{r2, r3}
 8000774:	4690      	mov	r8, r2
 8000776:	4699      	mov	r9, r3
 8000778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800077a:	2e00      	cmp	r6, #0
 800077c:	d174      	bne.n	8000868 <__aeabi_fsub+0x1b4>
 800077e:	1c60      	adds	r0, r4, #1
 8000780:	b2c0      	uxtb	r0, r0
 8000782:	2801      	cmp	r0, #1
 8000784:	dc00      	bgt.n	8000788 <__aeabi_fsub+0xd4>
 8000786:	e0a7      	b.n	80008d8 <__aeabi_fsub+0x224>
 8000788:	464a      	mov	r2, r9
 800078a:	1a9c      	subs	r4, r3, r2
 800078c:	0162      	lsls	r2, r4, #5
 800078e:	d500      	bpl.n	8000792 <__aeabi_fsub+0xde>
 8000790:	e0b6      	b.n	8000900 <__aeabi_fsub+0x24c>
 8000792:	2c00      	cmp	r4, #0
 8000794:	d1be      	bne.n	8000714 <__aeabi_fsub+0x60>
 8000796:	2200      	movs	r2, #0
 8000798:	2400      	movs	r4, #0
 800079a:	2300      	movs	r3, #0
 800079c:	e7e3      	b.n	8000766 <__aeabi_fsub+0xb2>
 800079e:	2e00      	cmp	r6, #0
 80007a0:	dc00      	bgt.n	80007a4 <__aeabi_fsub+0xf0>
 80007a2:	e085      	b.n	80008b0 <__aeabi_fsub+0x1fc>
 80007a4:	2800      	cmp	r0, #0
 80007a6:	d046      	beq.n	8000836 <__aeabi_fsub+0x182>
 80007a8:	2cff      	cmp	r4, #255	; 0xff
 80007aa:	d049      	beq.n	8000840 <__aeabi_fsub+0x18c>
 80007ac:	2280      	movs	r2, #128	; 0x80
 80007ae:	4648      	mov	r0, r9
 80007b0:	04d2      	lsls	r2, r2, #19
 80007b2:	4310      	orrs	r0, r2
 80007b4:	4681      	mov	r9, r0
 80007b6:	2201      	movs	r2, #1
 80007b8:	2e1b      	cmp	r6, #27
 80007ba:	dc09      	bgt.n	80007d0 <__aeabi_fsub+0x11c>
 80007bc:	2020      	movs	r0, #32
 80007be:	464c      	mov	r4, r9
 80007c0:	1b80      	subs	r0, r0, r6
 80007c2:	4084      	lsls	r4, r0
 80007c4:	464a      	mov	r2, r9
 80007c6:	0020      	movs	r0, r4
 80007c8:	40f2      	lsrs	r2, r6
 80007ca:	1e44      	subs	r4, r0, #1
 80007cc:	41a0      	sbcs	r0, r4
 80007ce:	4302      	orrs	r2, r0
 80007d0:	189b      	adds	r3, r3, r2
 80007d2:	015a      	lsls	r2, r3, #5
 80007d4:	d528      	bpl.n	8000828 <__aeabi_fsub+0x174>
 80007d6:	3501      	adds	r5, #1
 80007d8:	2dff      	cmp	r5, #255	; 0xff
 80007da:	d100      	bne.n	80007de <__aeabi_fsub+0x12a>
 80007dc:	e0a8      	b.n	8000930 <__aeabi_fsub+0x27c>
 80007de:	2201      	movs	r2, #1
 80007e0:	2407      	movs	r4, #7
 80007e2:	4994      	ldr	r1, [pc, #592]	; (8000a34 <__aeabi_fsub+0x380>)
 80007e4:	401a      	ands	r2, r3
 80007e6:	085b      	lsrs	r3, r3, #1
 80007e8:	400b      	ands	r3, r1
 80007ea:	4313      	orrs	r3, r2
 80007ec:	401c      	ands	r4, r3
 80007ee:	e7a6      	b.n	800073e <__aeabi_fsub+0x8a>
 80007f0:	2e00      	cmp	r6, #0
 80007f2:	d000      	beq.n	80007f6 <__aeabi_fsub+0x142>
 80007f4:	e778      	b.n	80006e8 <__aeabi_fsub+0x34>
 80007f6:	e775      	b.n	80006e4 <__aeabi_fsub+0x30>
 80007f8:	2cff      	cmp	r4, #255	; 0xff
 80007fa:	d054      	beq.n	80008a6 <__aeabi_fsub+0x1f2>
 80007fc:	2280      	movs	r2, #128	; 0x80
 80007fe:	4649      	mov	r1, r9
 8000800:	04d2      	lsls	r2, r2, #19
 8000802:	4311      	orrs	r1, r2
 8000804:	4689      	mov	r9, r1
 8000806:	2201      	movs	r2, #1
 8000808:	2e1b      	cmp	r6, #27
 800080a:	dc09      	bgt.n	8000820 <__aeabi_fsub+0x16c>
 800080c:	2120      	movs	r1, #32
 800080e:	4648      	mov	r0, r9
 8000810:	1b89      	subs	r1, r1, r6
 8000812:	4088      	lsls	r0, r1
 8000814:	464a      	mov	r2, r9
 8000816:	0001      	movs	r1, r0
 8000818:	40f2      	lsrs	r2, r6
 800081a:	1e48      	subs	r0, r1, #1
 800081c:	4181      	sbcs	r1, r0
 800081e:	430a      	orrs	r2, r1
 8000820:	1a9b      	subs	r3, r3, r2
 8000822:	015a      	lsls	r2, r3, #5
 8000824:	d500      	bpl.n	8000828 <__aeabi_fsub+0x174>
 8000826:	e773      	b.n	8000710 <__aeabi_fsub+0x5c>
 8000828:	2201      	movs	r2, #1
 800082a:	4641      	mov	r1, r8
 800082c:	400a      	ands	r2, r1
 800082e:	0759      	lsls	r1, r3, #29
 8000830:	d000      	beq.n	8000834 <__aeabi_fsub+0x180>
 8000832:	e789      	b.n	8000748 <__aeabi_fsub+0x94>
 8000834:	e011      	b.n	800085a <__aeabi_fsub+0x1a6>
 8000836:	4648      	mov	r0, r9
 8000838:	2800      	cmp	r0, #0
 800083a:	d158      	bne.n	80008ee <__aeabi_fsub+0x23a>
 800083c:	2cff      	cmp	r4, #255	; 0xff
 800083e:	d10c      	bne.n	800085a <__aeabi_fsub+0x1a6>
 8000840:	08db      	lsrs	r3, r3, #3
 8000842:	2b00      	cmp	r3, #0
 8000844:	d100      	bne.n	8000848 <__aeabi_fsub+0x194>
 8000846:	e78c      	b.n	8000762 <__aeabi_fsub+0xae>
 8000848:	2080      	movs	r0, #128	; 0x80
 800084a:	03c0      	lsls	r0, r0, #15
 800084c:	4303      	orrs	r3, r0
 800084e:	025b      	lsls	r3, r3, #9
 8000850:	0a5b      	lsrs	r3, r3, #9
 8000852:	24ff      	movs	r4, #255	; 0xff
 8000854:	e787      	b.n	8000766 <__aeabi_fsub+0xb2>
 8000856:	2cff      	cmp	r4, #255	; 0xff
 8000858:	d025      	beq.n	80008a6 <__aeabi_fsub+0x1f2>
 800085a:	08db      	lsrs	r3, r3, #3
 800085c:	2dff      	cmp	r5, #255	; 0xff
 800085e:	d0f0      	beq.n	8000842 <__aeabi_fsub+0x18e>
 8000860:	025b      	lsls	r3, r3, #9
 8000862:	0a5b      	lsrs	r3, r3, #9
 8000864:	b2ec      	uxtb	r4, r5
 8000866:	e77e      	b.n	8000766 <__aeabi_fsub+0xb2>
 8000868:	2c00      	cmp	r4, #0
 800086a:	d04d      	beq.n	8000908 <__aeabi_fsub+0x254>
 800086c:	28ff      	cmp	r0, #255	; 0xff
 800086e:	d018      	beq.n	80008a2 <__aeabi_fsub+0x1ee>
 8000870:	2480      	movs	r4, #128	; 0x80
 8000872:	04e4      	lsls	r4, r4, #19
 8000874:	4272      	negs	r2, r6
 8000876:	4323      	orrs	r3, r4
 8000878:	2a1b      	cmp	r2, #27
 800087a:	dd00      	ble.n	800087e <__aeabi_fsub+0x1ca>
 800087c:	e0c4      	b.n	8000a08 <__aeabi_fsub+0x354>
 800087e:	001c      	movs	r4, r3
 8000880:	2520      	movs	r5, #32
 8000882:	40d4      	lsrs	r4, r2
 8000884:	1aaa      	subs	r2, r5, r2
 8000886:	4093      	lsls	r3, r2
 8000888:	1e5a      	subs	r2, r3, #1
 800088a:	4193      	sbcs	r3, r2
 800088c:	4323      	orrs	r3, r4
 800088e:	464a      	mov	r2, r9
 8000890:	0005      	movs	r5, r0
 8000892:	1ad3      	subs	r3, r2, r3
 8000894:	4688      	mov	r8, r1
 8000896:	e738      	b.n	800070a <__aeabi_fsub+0x56>
 8000898:	1c72      	adds	r2, r6, #1
 800089a:	d0f8      	beq.n	800088e <__aeabi_fsub+0x1da>
 800089c:	43f2      	mvns	r2, r6
 800089e:	28ff      	cmp	r0, #255	; 0xff
 80008a0:	d1ea      	bne.n	8000878 <__aeabi_fsub+0x1c4>
 80008a2:	000a      	movs	r2, r1
 80008a4:	464b      	mov	r3, r9
 80008a6:	25ff      	movs	r5, #255	; 0xff
 80008a8:	e7d7      	b.n	800085a <__aeabi_fsub+0x1a6>
 80008aa:	019b      	lsls	r3, r3, #6
 80008ac:	0a5b      	lsrs	r3, r3, #9
 80008ae:	e75a      	b.n	8000766 <__aeabi_fsub+0xb2>
 80008b0:	2e00      	cmp	r6, #0
 80008b2:	d141      	bne.n	8000938 <__aeabi_fsub+0x284>
 80008b4:	1c65      	adds	r5, r4, #1
 80008b6:	b2e9      	uxtb	r1, r5
 80008b8:	2901      	cmp	r1, #1
 80008ba:	dd45      	ble.n	8000948 <__aeabi_fsub+0x294>
 80008bc:	2dff      	cmp	r5, #255	; 0xff
 80008be:	d100      	bne.n	80008c2 <__aeabi_fsub+0x20e>
 80008c0:	e74f      	b.n	8000762 <__aeabi_fsub+0xae>
 80008c2:	2407      	movs	r4, #7
 80008c4:	444b      	add	r3, r9
 80008c6:	085b      	lsrs	r3, r3, #1
 80008c8:	401c      	ands	r4, r3
 80008ca:	e738      	b.n	800073e <__aeabi_fsub+0x8a>
 80008cc:	2207      	movs	r2, #7
 80008ce:	4b5a      	ldr	r3, [pc, #360]	; (8000a38 <__aeabi_fsub+0x384>)
 80008d0:	1a2d      	subs	r5, r5, r0
 80008d2:	4023      	ands	r3, r4
 80008d4:	4014      	ands	r4, r2
 80008d6:	e732      	b.n	800073e <__aeabi_fsub+0x8a>
 80008d8:	2c00      	cmp	r4, #0
 80008da:	d11d      	bne.n	8000918 <__aeabi_fsub+0x264>
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d17a      	bne.n	80009d6 <__aeabi_fsub+0x322>
 80008e0:	464b      	mov	r3, r9
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d100      	bne.n	80008e8 <__aeabi_fsub+0x234>
 80008e6:	e091      	b.n	8000a0c <__aeabi_fsub+0x358>
 80008e8:	000a      	movs	r2, r1
 80008ea:	2500      	movs	r5, #0
 80008ec:	e7b5      	b.n	800085a <__aeabi_fsub+0x1a6>
 80008ee:	3e01      	subs	r6, #1
 80008f0:	2e00      	cmp	r6, #0
 80008f2:	d119      	bne.n	8000928 <__aeabi_fsub+0x274>
 80008f4:	444b      	add	r3, r9
 80008f6:	e76c      	b.n	80007d2 <__aeabi_fsub+0x11e>
 80008f8:	2cff      	cmp	r4, #255	; 0xff
 80008fa:	d184      	bne.n	8000806 <__aeabi_fsub+0x152>
 80008fc:	25ff      	movs	r5, #255	; 0xff
 80008fe:	e7ac      	b.n	800085a <__aeabi_fsub+0x1a6>
 8000900:	464a      	mov	r2, r9
 8000902:	4688      	mov	r8, r1
 8000904:	1ad4      	subs	r4, r2, r3
 8000906:	e705      	b.n	8000714 <__aeabi_fsub+0x60>
 8000908:	2b00      	cmp	r3, #0
 800090a:	d1c5      	bne.n	8000898 <__aeabi_fsub+0x1e4>
 800090c:	000a      	movs	r2, r1
 800090e:	28ff      	cmp	r0, #255	; 0xff
 8000910:	d0c8      	beq.n	80008a4 <__aeabi_fsub+0x1f0>
 8000912:	0005      	movs	r5, r0
 8000914:	464b      	mov	r3, r9
 8000916:	e7a0      	b.n	800085a <__aeabi_fsub+0x1a6>
 8000918:	2b00      	cmp	r3, #0
 800091a:	d149      	bne.n	80009b0 <__aeabi_fsub+0x2fc>
 800091c:	464b      	mov	r3, r9
 800091e:	2b00      	cmp	r3, #0
 8000920:	d077      	beq.n	8000a12 <__aeabi_fsub+0x35e>
 8000922:	000a      	movs	r2, r1
 8000924:	25ff      	movs	r5, #255	; 0xff
 8000926:	e798      	b.n	800085a <__aeabi_fsub+0x1a6>
 8000928:	2cff      	cmp	r4, #255	; 0xff
 800092a:	d000      	beq.n	800092e <__aeabi_fsub+0x27a>
 800092c:	e743      	b.n	80007b6 <__aeabi_fsub+0x102>
 800092e:	e787      	b.n	8000840 <__aeabi_fsub+0x18c>
 8000930:	000a      	movs	r2, r1
 8000932:	24ff      	movs	r4, #255	; 0xff
 8000934:	2300      	movs	r3, #0
 8000936:	e716      	b.n	8000766 <__aeabi_fsub+0xb2>
 8000938:	2c00      	cmp	r4, #0
 800093a:	d115      	bne.n	8000968 <__aeabi_fsub+0x2b4>
 800093c:	2b00      	cmp	r3, #0
 800093e:	d157      	bne.n	80009f0 <__aeabi_fsub+0x33c>
 8000940:	28ff      	cmp	r0, #255	; 0xff
 8000942:	d1e6      	bne.n	8000912 <__aeabi_fsub+0x25e>
 8000944:	464b      	mov	r3, r9
 8000946:	e77b      	b.n	8000840 <__aeabi_fsub+0x18c>
 8000948:	2c00      	cmp	r4, #0
 800094a:	d120      	bne.n	800098e <__aeabi_fsub+0x2da>
 800094c:	2b00      	cmp	r3, #0
 800094e:	d057      	beq.n	8000a00 <__aeabi_fsub+0x34c>
 8000950:	4649      	mov	r1, r9
 8000952:	2900      	cmp	r1, #0
 8000954:	d053      	beq.n	80009fe <__aeabi_fsub+0x34a>
 8000956:	444b      	add	r3, r9
 8000958:	015a      	lsls	r2, r3, #5
 800095a:	d568      	bpl.n	8000a2e <__aeabi_fsub+0x37a>
 800095c:	2407      	movs	r4, #7
 800095e:	4a36      	ldr	r2, [pc, #216]	; (8000a38 <__aeabi_fsub+0x384>)
 8000960:	401c      	ands	r4, r3
 8000962:	2501      	movs	r5, #1
 8000964:	4013      	ands	r3, r2
 8000966:	e6ea      	b.n	800073e <__aeabi_fsub+0x8a>
 8000968:	28ff      	cmp	r0, #255	; 0xff
 800096a:	d0eb      	beq.n	8000944 <__aeabi_fsub+0x290>
 800096c:	2280      	movs	r2, #128	; 0x80
 800096e:	04d2      	lsls	r2, r2, #19
 8000970:	4276      	negs	r6, r6
 8000972:	4313      	orrs	r3, r2
 8000974:	2e1b      	cmp	r6, #27
 8000976:	dc53      	bgt.n	8000a20 <__aeabi_fsub+0x36c>
 8000978:	2520      	movs	r5, #32
 800097a:	1bad      	subs	r5, r5, r6
 800097c:	001a      	movs	r2, r3
 800097e:	40ab      	lsls	r3, r5
 8000980:	40f2      	lsrs	r2, r6
 8000982:	1e5c      	subs	r4, r3, #1
 8000984:	41a3      	sbcs	r3, r4
 8000986:	4313      	orrs	r3, r2
 8000988:	444b      	add	r3, r9
 800098a:	0005      	movs	r5, r0
 800098c:	e721      	b.n	80007d2 <__aeabi_fsub+0x11e>
 800098e:	2b00      	cmp	r3, #0
 8000990:	d0d8      	beq.n	8000944 <__aeabi_fsub+0x290>
 8000992:	4649      	mov	r1, r9
 8000994:	2900      	cmp	r1, #0
 8000996:	d100      	bne.n	800099a <__aeabi_fsub+0x2e6>
 8000998:	e752      	b.n	8000840 <__aeabi_fsub+0x18c>
 800099a:	2180      	movs	r1, #128	; 0x80
 800099c:	03c9      	lsls	r1, r1, #15
 800099e:	420f      	tst	r7, r1
 80009a0:	d100      	bne.n	80009a4 <__aeabi_fsub+0x2f0>
 80009a2:	e74d      	b.n	8000840 <__aeabi_fsub+0x18c>
 80009a4:	4660      	mov	r0, ip
 80009a6:	4208      	tst	r0, r1
 80009a8:	d000      	beq.n	80009ac <__aeabi_fsub+0x2f8>
 80009aa:	e749      	b.n	8000840 <__aeabi_fsub+0x18c>
 80009ac:	464b      	mov	r3, r9
 80009ae:	e747      	b.n	8000840 <__aeabi_fsub+0x18c>
 80009b0:	4648      	mov	r0, r9
 80009b2:	25ff      	movs	r5, #255	; 0xff
 80009b4:	2800      	cmp	r0, #0
 80009b6:	d100      	bne.n	80009ba <__aeabi_fsub+0x306>
 80009b8:	e74f      	b.n	800085a <__aeabi_fsub+0x1a6>
 80009ba:	2280      	movs	r2, #128	; 0x80
 80009bc:	03d2      	lsls	r2, r2, #15
 80009be:	4217      	tst	r7, r2
 80009c0:	d004      	beq.n	80009cc <__aeabi_fsub+0x318>
 80009c2:	4660      	mov	r0, ip
 80009c4:	4210      	tst	r0, r2
 80009c6:	d101      	bne.n	80009cc <__aeabi_fsub+0x318>
 80009c8:	464b      	mov	r3, r9
 80009ca:	4688      	mov	r8, r1
 80009cc:	2201      	movs	r2, #1
 80009ce:	4641      	mov	r1, r8
 80009d0:	25ff      	movs	r5, #255	; 0xff
 80009d2:	400a      	ands	r2, r1
 80009d4:	e741      	b.n	800085a <__aeabi_fsub+0x1a6>
 80009d6:	4648      	mov	r0, r9
 80009d8:	2800      	cmp	r0, #0
 80009da:	d01f      	beq.n	8000a1c <__aeabi_fsub+0x368>
 80009dc:	1a1a      	subs	r2, r3, r0
 80009de:	0150      	lsls	r0, r2, #5
 80009e0:	d520      	bpl.n	8000a24 <__aeabi_fsub+0x370>
 80009e2:	464a      	mov	r2, r9
 80009e4:	2407      	movs	r4, #7
 80009e6:	1ad3      	subs	r3, r2, r3
 80009e8:	401c      	ands	r4, r3
 80009ea:	4688      	mov	r8, r1
 80009ec:	2500      	movs	r5, #0
 80009ee:	e6a6      	b.n	800073e <__aeabi_fsub+0x8a>
 80009f0:	1c74      	adds	r4, r6, #1
 80009f2:	d0c9      	beq.n	8000988 <__aeabi_fsub+0x2d4>
 80009f4:	43f6      	mvns	r6, r6
 80009f6:	28ff      	cmp	r0, #255	; 0xff
 80009f8:	d1bc      	bne.n	8000974 <__aeabi_fsub+0x2c0>
 80009fa:	464b      	mov	r3, r9
 80009fc:	e720      	b.n	8000840 <__aeabi_fsub+0x18c>
 80009fe:	4699      	mov	r9, r3
 8000a00:	464b      	mov	r3, r9
 8000a02:	2500      	movs	r5, #0
 8000a04:	08db      	lsrs	r3, r3, #3
 8000a06:	e72b      	b.n	8000860 <__aeabi_fsub+0x1ac>
 8000a08:	2301      	movs	r3, #1
 8000a0a:	e740      	b.n	800088e <__aeabi_fsub+0x1da>
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	2300      	movs	r3, #0
 8000a10:	e6a9      	b.n	8000766 <__aeabi_fsub+0xb2>
 8000a12:	2380      	movs	r3, #128	; 0x80
 8000a14:	2200      	movs	r2, #0
 8000a16:	03db      	lsls	r3, r3, #15
 8000a18:	24ff      	movs	r4, #255	; 0xff
 8000a1a:	e6a4      	b.n	8000766 <__aeabi_fsub+0xb2>
 8000a1c:	2500      	movs	r5, #0
 8000a1e:	e71c      	b.n	800085a <__aeabi_fsub+0x1a6>
 8000a20:	2301      	movs	r3, #1
 8000a22:	e7b1      	b.n	8000988 <__aeabi_fsub+0x2d4>
 8000a24:	2a00      	cmp	r2, #0
 8000a26:	d0f1      	beq.n	8000a0c <__aeabi_fsub+0x358>
 8000a28:	0013      	movs	r3, r2
 8000a2a:	2500      	movs	r5, #0
 8000a2c:	e6fc      	b.n	8000828 <__aeabi_fsub+0x174>
 8000a2e:	2500      	movs	r5, #0
 8000a30:	e6fa      	b.n	8000828 <__aeabi_fsub+0x174>
 8000a32:	46c0      	nop			; (mov r8, r8)
 8000a34:	7dffffff 	.word	0x7dffffff
 8000a38:	fbffffff 	.word	0xfbffffff

08000a3c <__aeabi_f2iz>:
 8000a3c:	0241      	lsls	r1, r0, #9
 8000a3e:	0042      	lsls	r2, r0, #1
 8000a40:	0fc3      	lsrs	r3, r0, #31
 8000a42:	0a49      	lsrs	r1, r1, #9
 8000a44:	0e12      	lsrs	r2, r2, #24
 8000a46:	2000      	movs	r0, #0
 8000a48:	2a7e      	cmp	r2, #126	; 0x7e
 8000a4a:	d90d      	bls.n	8000a68 <__aeabi_f2iz+0x2c>
 8000a4c:	2a9d      	cmp	r2, #157	; 0x9d
 8000a4e:	d80c      	bhi.n	8000a6a <__aeabi_f2iz+0x2e>
 8000a50:	2080      	movs	r0, #128	; 0x80
 8000a52:	0400      	lsls	r0, r0, #16
 8000a54:	4301      	orrs	r1, r0
 8000a56:	2a95      	cmp	r2, #149	; 0x95
 8000a58:	dc0a      	bgt.n	8000a70 <__aeabi_f2iz+0x34>
 8000a5a:	2096      	movs	r0, #150	; 0x96
 8000a5c:	1a82      	subs	r2, r0, r2
 8000a5e:	40d1      	lsrs	r1, r2
 8000a60:	4248      	negs	r0, r1
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d100      	bne.n	8000a68 <__aeabi_f2iz+0x2c>
 8000a66:	0008      	movs	r0, r1
 8000a68:	4770      	bx	lr
 8000a6a:	4a03      	ldr	r2, [pc, #12]	; (8000a78 <__aeabi_f2iz+0x3c>)
 8000a6c:	1898      	adds	r0, r3, r2
 8000a6e:	e7fb      	b.n	8000a68 <__aeabi_f2iz+0x2c>
 8000a70:	3a96      	subs	r2, #150	; 0x96
 8000a72:	4091      	lsls	r1, r2
 8000a74:	e7f4      	b.n	8000a60 <__aeabi_f2iz+0x24>
 8000a76:	46c0      	nop			; (mov r8, r8)
 8000a78:	7fffffff 	.word	0x7fffffff

08000a7c <__aeabi_ui2f>:
 8000a7c:	b570      	push	{r4, r5, r6, lr}
 8000a7e:	1e04      	subs	r4, r0, #0
 8000a80:	d034      	beq.n	8000aec <__aeabi_ui2f+0x70>
 8000a82:	f000 f83b 	bl	8000afc <__clzsi2>
 8000a86:	229e      	movs	r2, #158	; 0x9e
 8000a88:	1a12      	subs	r2, r2, r0
 8000a8a:	2a96      	cmp	r2, #150	; 0x96
 8000a8c:	dc07      	bgt.n	8000a9e <__aeabi_ui2f+0x22>
 8000a8e:	b2d2      	uxtb	r2, r2
 8000a90:	2808      	cmp	r0, #8
 8000a92:	dd2e      	ble.n	8000af2 <__aeabi_ui2f+0x76>
 8000a94:	3808      	subs	r0, #8
 8000a96:	4084      	lsls	r4, r0
 8000a98:	0260      	lsls	r0, r4, #9
 8000a9a:	0a40      	lsrs	r0, r0, #9
 8000a9c:	e021      	b.n	8000ae2 <__aeabi_ui2f+0x66>
 8000a9e:	2a99      	cmp	r2, #153	; 0x99
 8000aa0:	dd09      	ble.n	8000ab6 <__aeabi_ui2f+0x3a>
 8000aa2:	0003      	movs	r3, r0
 8000aa4:	0021      	movs	r1, r4
 8000aa6:	331b      	adds	r3, #27
 8000aa8:	4099      	lsls	r1, r3
 8000aaa:	1e4b      	subs	r3, r1, #1
 8000aac:	4199      	sbcs	r1, r3
 8000aae:	2305      	movs	r3, #5
 8000ab0:	1a1b      	subs	r3, r3, r0
 8000ab2:	40dc      	lsrs	r4, r3
 8000ab4:	430c      	orrs	r4, r1
 8000ab6:	2805      	cmp	r0, #5
 8000ab8:	dd01      	ble.n	8000abe <__aeabi_ui2f+0x42>
 8000aba:	1f43      	subs	r3, r0, #5
 8000abc:	409c      	lsls	r4, r3
 8000abe:	0023      	movs	r3, r4
 8000ac0:	490d      	ldr	r1, [pc, #52]	; (8000af8 <__aeabi_ui2f+0x7c>)
 8000ac2:	400b      	ands	r3, r1
 8000ac4:	0765      	lsls	r5, r4, #29
 8000ac6:	d009      	beq.n	8000adc <__aeabi_ui2f+0x60>
 8000ac8:	250f      	movs	r5, #15
 8000aca:	402c      	ands	r4, r5
 8000acc:	2c04      	cmp	r4, #4
 8000ace:	d005      	beq.n	8000adc <__aeabi_ui2f+0x60>
 8000ad0:	3304      	adds	r3, #4
 8000ad2:	015c      	lsls	r4, r3, #5
 8000ad4:	d502      	bpl.n	8000adc <__aeabi_ui2f+0x60>
 8000ad6:	229f      	movs	r2, #159	; 0x9f
 8000ad8:	400b      	ands	r3, r1
 8000ada:	1a12      	subs	r2, r2, r0
 8000adc:	019b      	lsls	r3, r3, #6
 8000ade:	0a58      	lsrs	r0, r3, #9
 8000ae0:	b2d2      	uxtb	r2, r2
 8000ae2:	0240      	lsls	r0, r0, #9
 8000ae4:	05d2      	lsls	r2, r2, #23
 8000ae6:	0a40      	lsrs	r0, r0, #9
 8000ae8:	4310      	orrs	r0, r2
 8000aea:	bd70      	pop	{r4, r5, r6, pc}
 8000aec:	2200      	movs	r2, #0
 8000aee:	2000      	movs	r0, #0
 8000af0:	e7f7      	b.n	8000ae2 <__aeabi_ui2f+0x66>
 8000af2:	0260      	lsls	r0, r4, #9
 8000af4:	0a40      	lsrs	r0, r0, #9
 8000af6:	e7f4      	b.n	8000ae2 <__aeabi_ui2f+0x66>
 8000af8:	fbffffff 	.word	0xfbffffff

08000afc <__clzsi2>:
 8000afc:	211c      	movs	r1, #28
 8000afe:	2301      	movs	r3, #1
 8000b00:	041b      	lsls	r3, r3, #16
 8000b02:	4298      	cmp	r0, r3
 8000b04:	d301      	bcc.n	8000b0a <__clzsi2+0xe>
 8000b06:	0c00      	lsrs	r0, r0, #16
 8000b08:	3910      	subs	r1, #16
 8000b0a:	0a1b      	lsrs	r3, r3, #8
 8000b0c:	4298      	cmp	r0, r3
 8000b0e:	d301      	bcc.n	8000b14 <__clzsi2+0x18>
 8000b10:	0a00      	lsrs	r0, r0, #8
 8000b12:	3908      	subs	r1, #8
 8000b14:	091b      	lsrs	r3, r3, #4
 8000b16:	4298      	cmp	r0, r3
 8000b18:	d301      	bcc.n	8000b1e <__clzsi2+0x22>
 8000b1a:	0900      	lsrs	r0, r0, #4
 8000b1c:	3904      	subs	r1, #4
 8000b1e:	a202      	add	r2, pc, #8	; (adr r2, 8000b28 <__clzsi2+0x2c>)
 8000b20:	5c10      	ldrb	r0, [r2, r0]
 8000b22:	1840      	adds	r0, r0, r1
 8000b24:	4770      	bx	lr
 8000b26:	46c0      	nop			; (mov r8, r8)
 8000b28:	02020304 	.word	0x02020304
 8000b2c:	01010101 	.word	0x01010101
	...

08000b38 <setupTB6612FNG>:
/*
 * @bruef	Saves the necessary variables for start/stop operations.
 * @note	Pass the same motor into both motorA and motorB if i=only 1 motor used.
 * 			The other motor will remain in the default state without throwing errors.
 */
void setupTB6612FNG(TIM_HandleTypeDef * tim, TB6612FNG_Motor * motorA, TB6612FNG_Motor * motorB, TB6612FNG_Pin * stby){
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	60f8      	str	r0, [r7, #12]
 8000b40:	60b9      	str	r1, [r7, #8]
 8000b42:	607a      	str	r2, [r7, #4]
 8000b44:	603b      	str	r3, [r7, #0]
	htim = tim;
 8000b46:	4b08      	ldr	r3, [pc, #32]	; (8000b68 <setupTB6612FNG+0x30>)
 8000b48:	68fa      	ldr	r2, [r7, #12]
 8000b4a:	601a      	str	r2, [r3, #0]

	MOTOR_A = motorA;
 8000b4c:	4b07      	ldr	r3, [pc, #28]	; (8000b6c <setupTB6612FNG+0x34>)
 8000b4e:	68ba      	ldr	r2, [r7, #8]
 8000b50:	601a      	str	r2, [r3, #0]
	MOTOR_B = motorB;
 8000b52:	4b07      	ldr	r3, [pc, #28]	; (8000b70 <setupTB6612FNG+0x38>)
 8000b54:	687a      	ldr	r2, [r7, #4]
 8000b56:	601a      	str	r2, [r3, #0]

	STBY = stby;
 8000b58:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <setupTB6612FNG+0x3c>)
 8000b5a:	683a      	ldr	r2, [r7, #0]
 8000b5c:	601a      	str	r2, [r3, #0]
}
 8000b5e:	46c0      	nop			; (mov r8, r8)
 8000b60:	46bd      	mov	sp, r7
 8000b62:	b004      	add	sp, #16
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	46c0      	nop			; (mov r8, r8)
 8000b68:	20000028 	.word	0x20000028
 8000b6c:	2000002c 	.word	0x2000002c
 8000b70:	20000030 	.word	0x20000030
 8000b74:	20000034 	.word	0x20000034

08000b78 <startTB6612FNG>:

/*
 * @brief	Starts the PWM channels and enables the STBY line.
 * @note	Resets the PWM to 0% Duty Cycle and sets motor states to BREAK
 */
void startTB6612FNG(){
 8000b78:	b5b0      	push	{r4, r5, r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
	/* Break both motors */
	setMotorDutyCycle(MOTOR_A, 0.0);
 8000b7c:	4b25      	ldr	r3, [pc, #148]	; (8000c14 <startTB6612FNG+0x9c>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	2200      	movs	r2, #0
 8000b82:	1c11      	adds	r1, r2, #0
 8000b84:	0018      	movs	r0, r3
 8000b86:	f000 f8cd 	bl	8000d24 <setMotorDutyCycle>
	setMotorDutyCycle(MOTOR_B, 0.0);
 8000b8a:	4b23      	ldr	r3, [pc, #140]	; (8000c18 <startTB6612FNG+0xa0>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	2200      	movs	r2, #0
 8000b90:	1c11      	adds	r1, r2, #0
 8000b92:	0018      	movs	r0, r3
 8000b94:	f000 f8c6 	bl	8000d24 <setMotorDutyCycle>
	motorState(MOTOR_A, BREAK);
 8000b98:	4b1e      	ldr	r3, [pc, #120]	; (8000c14 <startTB6612FNG+0x9c>)
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	432b      	orrs	r3, r5
 8000ba0:	1c1d      	adds	r5, r3, #0
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	432b      	orrs	r3, r5
 8000ba6:	1c1d      	adds	r5, r3, #0
 8000ba8:	1c29      	adds	r1, r5, #0
 8000baa:	0010      	movs	r0, r2
 8000bac:	f000 f894 	bl	8000cd8 <motorState>
	motorState(MOTOR_B, BREAK);
 8000bb0:	4b19      	ldr	r3, [pc, #100]	; (8000c18 <startTB6612FNG+0xa0>)
 8000bb2:	681a      	ldr	r2, [r3, #0]
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	4323      	orrs	r3, r4
 8000bb8:	1c1c      	adds	r4, r3, #0
 8000bba:	2302      	movs	r3, #2
 8000bbc:	4323      	orrs	r3, r4
 8000bbe:	1c1c      	adds	r4, r3, #0
 8000bc0:	1c21      	adds	r1, r4, #0
 8000bc2:	0010      	movs	r0, r2
 8000bc4:	f000 f888 	bl	8000cd8 <motorState>

	/* Start PWM */
	HAL_TIM_PWM_Start(MOTOR_A->TIMER->htim, MOTOR_A->TIMER->channel);
 8000bc8:	4b12      	ldr	r3, [pc, #72]	; (8000c14 <startTB6612FNG+0x9c>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	68db      	ldr	r3, [r3, #12]
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	4b10      	ldr	r3, [pc, #64]	; (8000c14 <startTB6612FNG+0x9c>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	68db      	ldr	r3, [r3, #12]
 8000bd6:	791b      	ldrb	r3, [r3, #4]
 8000bd8:	0019      	movs	r1, r3
 8000bda:	0010      	movs	r0, r2
 8000bdc:	f001 fb08 	bl	80021f0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(MOTOR_B->TIMER->htim, MOTOR_B->TIMER->channel);
 8000be0:	4b0d      	ldr	r3, [pc, #52]	; (8000c18 <startTB6612FNG+0xa0>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	68db      	ldr	r3, [r3, #12]
 8000be6:	681a      	ldr	r2, [r3, #0]
 8000be8:	4b0b      	ldr	r3, [pc, #44]	; (8000c18 <startTB6612FNG+0xa0>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	68db      	ldr	r3, [r3, #12]
 8000bee:	791b      	ldrb	r3, [r3, #4]
 8000bf0:	0019      	movs	r1, r3
 8000bf2:	0010      	movs	r0, r2
 8000bf4:	f001 fafc 	bl	80021f0 <HAL_TIM_PWM_Start>

	/* Enable the STBY Line */
	HAL_GPIO_WritePin(STBY->Port, STBY->Pin, HIGH);
 8000bf8:	4b08      	ldr	r3, [pc, #32]	; (8000c1c <startTB6612FNG+0xa4>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	6818      	ldr	r0, [r3, #0]
 8000bfe:	4b07      	ldr	r3, [pc, #28]	; (8000c1c <startTB6612FNG+0xa4>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	889b      	ldrh	r3, [r3, #4]
 8000c04:	2201      	movs	r2, #1
 8000c06:	0019      	movs	r1, r3
 8000c08:	f000 fe26 	bl	8001858 <HAL_GPIO_WritePin>
}
 8000c0c:	46c0      	nop			; (mov r8, r8)
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bdb0      	pop	{r4, r5, r7, pc}
 8000c12:	46c0      	nop			; (mov r8, r8)
 8000c14:	2000002c 	.word	0x2000002c
 8000c18:	20000030 	.word	0x20000030
 8000c1c:	20000034 	.word	0x20000034

08000c20 <stopTB6612FNG>:

void stopTB6612FNG(){
 8000c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c22:	af00      	add	r7, sp, #0
	// Short break both motors.
	motorState(MOTOR_A, BREAK);
 8000c24:	4a29      	ldr	r2, [pc, #164]	; (8000ccc <stopTB6612FNG+0xac>)
 8000c26:	6810      	ldr	r0, [r2, #0]
 8000c28:	2201      	movs	r2, #1
 8000c2a:	4313      	orrs	r3, r2
 8000c2c:	2202      	movs	r2, #2
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	1c19      	adds	r1, r3, #0
 8000c32:	f000 f851 	bl	8000cd8 <motorState>
	motorState(MOTOR_B, BREAK);
 8000c36:	4b26      	ldr	r3, [pc, #152]	; (8000cd0 <stopTB6612FNG+0xb0>)
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	4333      	orrs	r3, r6
 8000c3e:	1c1e      	adds	r6, r3, #0
 8000c40:	2302      	movs	r3, #2
 8000c42:	4333      	orrs	r3, r6
 8000c44:	1c1e      	adds	r6, r3, #0
 8000c46:	1c31      	adds	r1, r6, #0
 8000c48:	0010      	movs	r0, r2
 8000c4a:	f000 f845 	bl	8000cd8 <motorState>

	// Remove the PWM
	setMotorDutyCycle(MOTOR_A, 0.0);
 8000c4e:	4b1f      	ldr	r3, [pc, #124]	; (8000ccc <stopTB6612FNG+0xac>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	2200      	movs	r2, #0
 8000c54:	1c11      	adds	r1, r2, #0
 8000c56:	0018      	movs	r0, r3
 8000c58:	f000 f864 	bl	8000d24 <setMotorDutyCycle>
	setMotorDutyCycle(MOTOR_B, 0.0);
 8000c5c:	4b1c      	ldr	r3, [pc, #112]	; (8000cd0 <stopTB6612FNG+0xb0>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	2200      	movs	r2, #0
 8000c62:	1c11      	adds	r1, r2, #0
 8000c64:	0018      	movs	r0, r3
 8000c66:	f000 f85d 	bl	8000d24 <setMotorDutyCycle>

	// Delay for some safety
	HAL_Delay(TB6612FNG_BREAK_DELAY_MS);
 8000c6a:	2064      	movs	r0, #100	; 0x64
 8000c6c:	f000 fbae 	bl	80013cc <HAL_Delay>

	// Set both motor states to STOP
	motorState(MOTOR_A, STOP);
 8000c70:	4b16      	ldr	r3, [pc, #88]	; (8000ccc <stopTB6612FNG+0xac>)
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	2301      	movs	r3, #1
 8000c76:	0029      	movs	r1, r5
 8000c78:	4399      	bics	r1, r3
 8000c7a:	000b      	movs	r3, r1
 8000c7c:	1c1d      	adds	r5, r3, #0
 8000c7e:	2302      	movs	r3, #2
 8000c80:	0029      	movs	r1, r5
 8000c82:	4399      	bics	r1, r3
 8000c84:	000b      	movs	r3, r1
 8000c86:	1c1d      	adds	r5, r3, #0
 8000c88:	1c29      	adds	r1, r5, #0
 8000c8a:	0010      	movs	r0, r2
 8000c8c:	f000 f824 	bl	8000cd8 <motorState>
	motorState(MOTOR_B, STOP);
 8000c90:	4b0f      	ldr	r3, [pc, #60]	; (8000cd0 <stopTB6612FNG+0xb0>)
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	2301      	movs	r3, #1
 8000c96:	0021      	movs	r1, r4
 8000c98:	4399      	bics	r1, r3
 8000c9a:	000b      	movs	r3, r1
 8000c9c:	1c1c      	adds	r4, r3, #0
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	0021      	movs	r1, r4
 8000ca2:	4399      	bics	r1, r3
 8000ca4:	000b      	movs	r3, r1
 8000ca6:	1c1c      	adds	r4, r3, #0
 8000ca8:	1c21      	adds	r1, r4, #0
 8000caa:	0010      	movs	r0, r2
 8000cac:	f000 f814 	bl	8000cd8 <motorState>

	// Disable the STBY line.
	HAL_GPIO_WritePin(STBY->Port, STBY->Pin, LOW);
 8000cb0:	4b08      	ldr	r3, [pc, #32]	; (8000cd4 <stopTB6612FNG+0xb4>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	6818      	ldr	r0, [r3, #0]
 8000cb6:	4b07      	ldr	r3, [pc, #28]	; (8000cd4 <stopTB6612FNG+0xb4>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	889b      	ldrh	r3, [r3, #4]
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	0019      	movs	r1, r3
 8000cc0:	f000 fdca 	bl	8001858 <HAL_GPIO_WritePin>
}
 8000cc4:	46c0      	nop			; (mov r8, r8)
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000cca:	46c0      	nop			; (mov r8, r8)
 8000ccc:	2000002c 	.word	0x2000002c
 8000cd0:	20000030 	.word	0x20000030
 8000cd4:	20000034 	.word	0x20000034

08000cd8 <motorState>:

/*
 * @brief	Sets the state of a motor to FORWARD, REVERSE, BREAK or STOP
 * @note	Does not slow. Careful changing direction suddenly.
 */
void motorState(TB6612FNG_Motor * MOTOR, TB6612FNG_MotorDirectionTypedef STATE){
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
 8000ce0:	003b      	movs	r3, r7
 8000ce2:	8019      	strh	r1, [r3, #0]
	HAL_GPIO_WritePin(MOTOR->I1->Port, 	MOTOR->I1->Pin, 	STATE.I1_STATE);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	6818      	ldr	r0, [r3, #0]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	8899      	ldrh	r1, [r3, #4]
 8000cf0:	003b      	movs	r3, r7
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	07db      	lsls	r3, r3, #31
 8000cf6:	0fdb      	lsrs	r3, r3, #31
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	001a      	movs	r2, r3
 8000cfc:	f000 fdac 	bl	8001858 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR->I2->Port, 	MOTOR->I2->Pin, 	STATE.I2_STATE);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	689b      	ldr	r3, [r3, #8]
 8000d04:	6818      	ldr	r0, [r3, #0]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	689b      	ldr	r3, [r3, #8]
 8000d0a:	8899      	ldrh	r1, [r3, #4]
 8000d0c:	003b      	movs	r3, r7
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	079b      	lsls	r3, r3, #30
 8000d12:	0fdb      	lsrs	r3, r3, #31
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	001a      	movs	r2, r3
 8000d18:	f000 fd9e 	bl	8001858 <HAL_GPIO_WritePin>
}
 8000d1c:	46c0      	nop			; (mov r8, r8)
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	b002      	add	sp, #8
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <setMotorDutyCycle>:
/* PWM Control */

/*
 * @brief	Sets the speed of the motor according to a duty cycle.
 */
void setMotorDutyCycle(TB6612FNG_Motor * MOTOR, float D){
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
 8000d2c:	6039      	str	r1, [r7, #0]
	/* Parameter Chancing */
	if((D > 1.0) || (D < 0)) D = 0.0;		// Reject and set to 0 if invalid number
 8000d2e:	21fe      	movs	r1, #254	; 0xfe
 8000d30:	0589      	lsls	r1, r1, #22
 8000d32:	6838      	ldr	r0, [r7, #0]
 8000d34:	f7ff fa9a 	bl	800026c <__aeabi_fcmpgt>
 8000d38:	1e03      	subs	r3, r0, #0
 8000d3a:	d105      	bne.n	8000d48 <setMotorDutyCycle+0x24>
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	6838      	ldr	r0, [r7, #0]
 8000d40:	f7ff fa80 	bl	8000244 <__aeabi_fcmplt>
 8000d44:	1e03      	subs	r3, r0, #0
 8000d46:	d001      	beq.n	8000d4c <setMotorDutyCycle+0x28>
 8000d48:	2300      	movs	r3, #0
 8000d4a:	603b      	str	r3, [r7, #0]

	unsigned int ARR = __HAL_TIM_GET_AUTORELOAD(htim);	// Get the ARR value
 8000d4c:	4b0d      	ldr	r3, [pc, #52]	; (8000d84 <setMotorDutyCycle+0x60>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d54:	60fb      	str	r3, [r7, #12]
	setPWM(MOTOR, (unsigned int)(D * ARR));				// Set with the count proportional to the ARR
 8000d56:	68f8      	ldr	r0, [r7, #12]
 8000d58:	f7ff fe90 	bl	8000a7c <__aeabi_ui2f>
 8000d5c:	1c03      	adds	r3, r0, #0
 8000d5e:	6839      	ldr	r1, [r7, #0]
 8000d60:	1c18      	adds	r0, r3, #0
 8000d62:	f7ff fb75 	bl	8000450 <__aeabi_fmul>
 8000d66:	1c03      	adds	r3, r0, #0
 8000d68:	1c18      	adds	r0, r3, #0
 8000d6a:	f7ff fa93 	bl	8000294 <__aeabi_f2uiz>
 8000d6e:	0002      	movs	r2, r0
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	0011      	movs	r1, r2
 8000d74:	0018      	movs	r0, r3
 8000d76:	f000 f807 	bl	8000d88 <setPWM>
}
 8000d7a:	46c0      	nop			; (mov r8, r8)
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	b004      	add	sp, #16
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	46c0      	nop			; (mov r8, r8)
 8000d84:	20000028 	.word	0x20000028

08000d88 <setPWM>:


static void setPWM(TB6612FNG_Motor * MOTOR, unsigned int counter){
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	6039      	str	r1, [r7, #0]
	__HAL_TIM_SET_COMPARE(MOTOR->TIMER->htim, MOTOR->TIMER->channel, counter);	// Set PWM compare value
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	68db      	ldr	r3, [r3, #12]
 8000d96:	791b      	ldrb	r3, [r3, #4]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d106      	bne.n	8000daa <setPWM+0x22>
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	68db      	ldr	r3, [r3, #12]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	683a      	ldr	r2, [r7, #0]
 8000da6:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000da8:	e01d      	b.n	8000de6 <setPWM+0x5e>
	__HAL_TIM_SET_COMPARE(MOTOR->TIMER->htim, MOTOR->TIMER->channel, counter);	// Set PWM compare value
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	68db      	ldr	r3, [r3, #12]
 8000dae:	791b      	ldrb	r3, [r3, #4]
 8000db0:	2b04      	cmp	r3, #4
 8000db2:	d106      	bne.n	8000dc2 <setPWM+0x3a>
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	683a      	ldr	r2, [r7, #0]
 8000dbe:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000dc0:	e011      	b.n	8000de6 <setPWM+0x5e>
	__HAL_TIM_SET_COMPARE(MOTOR->TIMER->htim, MOTOR->TIMER->channel, counter);	// Set PWM compare value
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	68db      	ldr	r3, [r3, #12]
 8000dc6:	791b      	ldrb	r3, [r3, #4]
 8000dc8:	2b08      	cmp	r3, #8
 8000dca:	d106      	bne.n	8000dda <setPWM+0x52>
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	68db      	ldr	r3, [r3, #12]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	683a      	ldr	r2, [r7, #0]
 8000dd6:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000dd8:	e005      	b.n	8000de6 <setPWM+0x5e>
	__HAL_TIM_SET_COMPARE(MOTOR->TIMER->htim, MOTOR->TIMER->channel, counter);	// Set PWM compare value
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	68db      	ldr	r3, [r3, #12]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	683a      	ldr	r2, [r7, #0]
 8000de4:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000de6:	46c0      	nop			; (mov r8, r8)
 8000de8:	46bd      	mov	sp, r7
 8000dea:	b002      	add	sp, #8
 8000dec:	bd80      	pop	{r7, pc}
	...

08000df0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000df0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000df2:	b091      	sub	sp, #68	; 0x44
 8000df4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000df6:	f000 fa85 	bl	8001304 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dfa:	f000 f861 	bl	8000ec0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dfe:	f000 f929 	bl	8001054 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000e02:	f000 f89d 	bl	8000f40 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  // NOTE: Definitions made on user labels from Code Generator

  TB6612FNG_Motor motorA = {
 8000e06:	2518      	movs	r5, #24
 8000e08:	197b      	adds	r3, r7, r5
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	701a      	strb	r2, [r3, #0]
		  .MOTOR = TB6612FNG_Motor_A,
		  .I1 = &(TB6612FNG_Pin){ .Port = AI1_GPIO_Port, .Pin = AI1_Pin },
 8000e0e:	2128      	movs	r1, #40	; 0x28
 8000e10:	187b      	adds	r3, r7, r1
 8000e12:	4a25      	ldr	r2, [pc, #148]	; (8000ea8 <main+0xb8>)
 8000e14:	ca41      	ldmia	r2!, {r0, r6}
 8000e16:	c341      	stmia	r3!, {r0, r6}
  TB6612FNG_Motor motorA = {
 8000e18:	197b      	adds	r3, r7, r5
 8000e1a:	187a      	adds	r2, r7, r1
 8000e1c:	605a      	str	r2, [r3, #4]
		  .I2 = &(TB6612FNG_Pin){ .Port = AI2_GPIO_Port, .Pin = AI2_Pin },
 8000e1e:	2130      	movs	r1, #48	; 0x30
 8000e20:	187b      	adds	r3, r7, r1
 8000e22:	4a22      	ldr	r2, [pc, #136]	; (8000eac <main+0xbc>)
 8000e24:	ca41      	ldmia	r2!, {r0, r6}
 8000e26:	c341      	stmia	r3!, {r0, r6}
  TB6612FNG_Motor motorA = {
 8000e28:	197b      	adds	r3, r7, r5
 8000e2a:	187a      	adds	r2, r7, r1
 8000e2c:	609a      	str	r2, [r3, #8]
		  .TIMER = &(TB6612FNG_Timer){ .htim = &htim3, .channel = TIM_CHANNEL_4}
 8000e2e:	2138      	movs	r1, #56	; 0x38
 8000e30:	187b      	adds	r3, r7, r1
 8000e32:	4a1f      	ldr	r2, [pc, #124]	; (8000eb0 <main+0xc0>)
 8000e34:	ca41      	ldmia	r2!, {r0, r6}
 8000e36:	c341      	stmia	r3!, {r0, r6}
  TB6612FNG_Motor motorA = {
 8000e38:	197b      	adds	r3, r7, r5
 8000e3a:	187a      	adds	r2, r7, r1
 8000e3c:	60da      	str	r2, [r3, #12]
  };
  TB6612FNG_Motor motorB = motorA;
 8000e3e:	2608      	movs	r6, #8
 8000e40:	19ba      	adds	r2, r7, r6
 8000e42:	197b      	adds	r3, r7, r5
 8000e44:	0010      	movs	r0, r2
 8000e46:	0019      	movs	r1, r3
 8000e48:	2310      	movs	r3, #16
 8000e4a:	001a      	movs	r2, r3
 8000e4c:	f001 ff4e 	bl	8002cec <memcpy>

  TB6612FNG_Pin stby = { .Port = STBY_GPIO_Port, .Pin = STBY_Pin };
 8000e50:	003b      	movs	r3, r7
 8000e52:	4a18      	ldr	r2, [pc, #96]	; (8000eb4 <main+0xc4>)
 8000e54:	ca03      	ldmia	r2!, {r0, r1}
 8000e56:	c303      	stmia	r3!, {r0, r1}


  setupTB6612FNG(&htim3, &motorA, &motorB, &stby);
 8000e58:	003b      	movs	r3, r7
 8000e5a:	19ba      	adds	r2, r7, r6
 8000e5c:	1979      	adds	r1, r7, r5
 8000e5e:	4816      	ldr	r0, [pc, #88]	; (8000eb8 <main+0xc8>)
 8000e60:	f7ff fe6a 	bl	8000b38 <setupTB6612FNG>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  startTB6612FNG();
 8000e64:	f7ff fe88 	bl	8000b78 <startTB6612FNG>
	  motorState(&motorA, REVERSE);
 8000e68:	2301      	movs	r3, #1
 8000e6a:	0022      	movs	r2, r4
 8000e6c:	439a      	bics	r2, r3
 8000e6e:	0013      	movs	r3, r2
 8000e70:	1c1c      	adds	r4, r3, #0
 8000e72:	2302      	movs	r3, #2
 8000e74:	4323      	orrs	r3, r4
 8000e76:	1c1c      	adds	r4, r3, #0
 8000e78:	2518      	movs	r5, #24
 8000e7a:	197b      	adds	r3, r7, r5
 8000e7c:	1c21      	adds	r1, r4, #0
 8000e7e:	0018      	movs	r0, r3
 8000e80:	f7ff ff2a 	bl	8000cd8 <motorState>
	  setMotorDutyCycle(&motorA, 0.5);
 8000e84:	22fc      	movs	r2, #252	; 0xfc
 8000e86:	0592      	lsls	r2, r2, #22
 8000e88:	197b      	adds	r3, r7, r5
 8000e8a:	1c11      	adds	r1, r2, #0
 8000e8c:	0018      	movs	r0, r3
 8000e8e:	f7ff ff49 	bl	8000d24 <setMotorDutyCycle>
	  HAL_Delay(5E3);
 8000e92:	4b0a      	ldr	r3, [pc, #40]	; (8000ebc <main+0xcc>)
 8000e94:	0018      	movs	r0, r3
 8000e96:	f000 fa99 	bl	80013cc <HAL_Delay>
	  stopTB6612FNG();
 8000e9a:	f7ff fec1 	bl	8000c20 <stopTB6612FNG>
	  HAL_Delay(5E3);
 8000e9e:	4b07      	ldr	r3, [pc, #28]	; (8000ebc <main+0xcc>)
 8000ea0:	0018      	movs	r0, r3
 8000ea2:	f000 fa93 	bl	80013cc <HAL_Delay>
	  startTB6612FNG();
 8000ea6:	e7dd      	b.n	8000e64 <main+0x74>
 8000ea8:	08002d28 	.word	0x08002d28
 8000eac:	08002d30 	.word	0x08002d30
 8000eb0:	08002d38 	.word	0x08002d38
 8000eb4:	08002d40 	.word	0x08002d40
 8000eb8:	20000038 	.word	0x20000038
 8000ebc:	00001388 	.word	0x00001388

08000ec0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ec0:	b590      	push	{r4, r7, lr}
 8000ec2:	b091      	sub	sp, #68	; 0x44
 8000ec4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ec6:	2410      	movs	r4, #16
 8000ec8:	193b      	adds	r3, r7, r4
 8000eca:	0018      	movs	r0, r3
 8000ecc:	2330      	movs	r3, #48	; 0x30
 8000ece:	001a      	movs	r2, r3
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	f001 ff14 	bl	8002cfe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ed6:	003b      	movs	r3, r7
 8000ed8:	0018      	movs	r0, r3
 8000eda:	2310      	movs	r3, #16
 8000edc:	001a      	movs	r2, r3
 8000ede:	2100      	movs	r1, #0
 8000ee0:	f001 ff0d 	bl	8002cfe <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ee4:	0021      	movs	r1, r4
 8000ee6:	187b      	adds	r3, r7, r1
 8000ee8:	2202      	movs	r2, #2
 8000eea:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000eec:	187b      	adds	r3, r7, r1
 8000eee:	2201      	movs	r2, #1
 8000ef0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ef2:	187b      	adds	r3, r7, r1
 8000ef4:	2210      	movs	r2, #16
 8000ef6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ef8:	187b      	adds	r3, r7, r1
 8000efa:	2200      	movs	r2, #0
 8000efc:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000efe:	187b      	adds	r3, r7, r1
 8000f00:	0018      	movs	r0, r3
 8000f02:	f000 fcc7 	bl	8001894 <HAL_RCC_OscConfig>
 8000f06:	1e03      	subs	r3, r0, #0
 8000f08:	d001      	beq.n	8000f0e <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8000f0a:	f000 f907 	bl	800111c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f0e:	003b      	movs	r3, r7
 8000f10:	2207      	movs	r2, #7
 8000f12:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f14:	003b      	movs	r3, r7
 8000f16:	2200      	movs	r2, #0
 8000f18:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f1a:	003b      	movs	r3, r7
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f20:	003b      	movs	r3, r7
 8000f22:	2200      	movs	r2, #0
 8000f24:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f26:	003b      	movs	r3, r7
 8000f28:	2100      	movs	r1, #0
 8000f2a:	0018      	movs	r0, r3
 8000f2c:	f000 ffce 	bl	8001ecc <HAL_RCC_ClockConfig>
 8000f30:	1e03      	subs	r3, r0, #0
 8000f32:	d001      	beq.n	8000f38 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000f34:	f000 f8f2 	bl	800111c <Error_Handler>
  }
}
 8000f38:	46c0      	nop			; (mov r8, r8)
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	b011      	add	sp, #68	; 0x44
 8000f3e:	bd90      	pop	{r4, r7, pc}

08000f40 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b08e      	sub	sp, #56	; 0x38
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f46:	2328      	movs	r3, #40	; 0x28
 8000f48:	18fb      	adds	r3, r7, r3
 8000f4a:	0018      	movs	r0, r3
 8000f4c:	2310      	movs	r3, #16
 8000f4e:	001a      	movs	r2, r3
 8000f50:	2100      	movs	r1, #0
 8000f52:	f001 fed4 	bl	8002cfe <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f56:	2320      	movs	r3, #32
 8000f58:	18fb      	adds	r3, r7, r3
 8000f5a:	0018      	movs	r0, r3
 8000f5c:	2308      	movs	r3, #8
 8000f5e:	001a      	movs	r2, r3
 8000f60:	2100      	movs	r1, #0
 8000f62:	f001 fecc 	bl	8002cfe <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f66:	1d3b      	adds	r3, r7, #4
 8000f68:	0018      	movs	r0, r3
 8000f6a:	231c      	movs	r3, #28
 8000f6c:	001a      	movs	r2, r3
 8000f6e:	2100      	movs	r1, #0
 8000f70:	f001 fec5 	bl	8002cfe <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f74:	4b34      	ldr	r3, [pc, #208]	; (8001048 <MX_TIM3_Init+0x108>)
 8000f76:	4a35      	ldr	r2, [pc, #212]	; (800104c <MX_TIM3_Init+0x10c>)
 8000f78:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8000f7a:	4b33      	ldr	r3, [pc, #204]	; (8001048 <MX_TIM3_Init+0x108>)
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f80:	4b31      	ldr	r3, [pc, #196]	; (8001048 <MX_TIM3_Init+0x108>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000f86:	4b30      	ldr	r3, [pc, #192]	; (8001048 <MX_TIM3_Init+0x108>)
 8000f88:	4a31      	ldr	r2, [pc, #196]	; (8001050 <MX_TIM3_Init+0x110>)
 8000f8a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f8c:	4b2e      	ldr	r3, [pc, #184]	; (8001048 <MX_TIM3_Init+0x108>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f92:	4b2d      	ldr	r3, [pc, #180]	; (8001048 <MX_TIM3_Init+0x108>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f98:	4b2b      	ldr	r3, [pc, #172]	; (8001048 <MX_TIM3_Init+0x108>)
 8000f9a:	0018      	movs	r0, r3
 8000f9c:	f001 f8c8 	bl	8002130 <HAL_TIM_Base_Init>
 8000fa0:	1e03      	subs	r3, r0, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000fa4:	f000 f8ba 	bl	800111c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fa8:	2128      	movs	r1, #40	; 0x28
 8000faa:	187b      	adds	r3, r7, r1
 8000fac:	2280      	movs	r2, #128	; 0x80
 8000fae:	0152      	lsls	r2, r2, #5
 8000fb0:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000fb2:	187a      	adds	r2, r7, r1
 8000fb4:	4b24      	ldr	r3, [pc, #144]	; (8001048 <MX_TIM3_Init+0x108>)
 8000fb6:	0011      	movs	r1, r2
 8000fb8:	0018      	movs	r0, r3
 8000fba:	f001 fa1d 	bl	80023f8 <HAL_TIM_ConfigClockSource>
 8000fbe:	1e03      	subs	r3, r0, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000fc2:	f000 f8ab 	bl	800111c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000fc6:	4b20      	ldr	r3, [pc, #128]	; (8001048 <MX_TIM3_Init+0x108>)
 8000fc8:	0018      	movs	r0, r3
 8000fca:	f001 f8dd 	bl	8002188 <HAL_TIM_PWM_Init>
 8000fce:	1e03      	subs	r3, r0, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000fd2:	f000 f8a3 	bl	800111c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fd6:	2120      	movs	r1, #32
 8000fd8:	187b      	adds	r3, r7, r1
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fde:	187b      	adds	r3, r7, r1
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fe4:	187a      	adds	r2, r7, r1
 8000fe6:	4b18      	ldr	r3, [pc, #96]	; (8001048 <MX_TIM3_Init+0x108>)
 8000fe8:	0011      	movs	r1, r2
 8000fea:	0018      	movs	r0, r3
 8000fec:	f001 fdfc 	bl	8002be8 <HAL_TIMEx_MasterConfigSynchronization>
 8000ff0:	1e03      	subs	r3, r0, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8000ff4:	f000 f892 	bl	800111c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ff8:	1d3b      	adds	r3, r7, #4
 8000ffa:	2260      	movs	r2, #96	; 0x60
 8000ffc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000ffe:	1d3b      	adds	r3, r7, #4
 8001000:	2200      	movs	r2, #0
 8001002:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001004:	1d3b      	adds	r3, r7, #4
 8001006:	2200      	movs	r2, #0
 8001008:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800100a:	1d3b      	adds	r3, r7, #4
 800100c:	2200      	movs	r2, #0
 800100e:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001010:	1d39      	adds	r1, r7, #4
 8001012:	4b0d      	ldr	r3, [pc, #52]	; (8001048 <MX_TIM3_Init+0x108>)
 8001014:	2200      	movs	r2, #0
 8001016:	0018      	movs	r0, r3
 8001018:	f001 f936 	bl	8002288 <HAL_TIM_PWM_ConfigChannel>
 800101c:	1e03      	subs	r3, r0, #0
 800101e:	d001      	beq.n	8001024 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8001020:	f000 f87c 	bl	800111c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001024:	1d39      	adds	r1, r7, #4
 8001026:	4b08      	ldr	r3, [pc, #32]	; (8001048 <MX_TIM3_Init+0x108>)
 8001028:	220c      	movs	r2, #12
 800102a:	0018      	movs	r0, r3
 800102c:	f001 f92c 	bl	8002288 <HAL_TIM_PWM_ConfigChannel>
 8001030:	1e03      	subs	r3, r0, #0
 8001032:	d001      	beq.n	8001038 <MX_TIM3_Init+0xf8>
  {
    Error_Handler();
 8001034:	f000 f872 	bl	800111c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001038:	4b03      	ldr	r3, [pc, #12]	; (8001048 <MX_TIM3_Init+0x108>)
 800103a:	0018      	movs	r0, r3
 800103c:	f000 f8b6 	bl	80011ac <HAL_TIM_MspPostInit>

}
 8001040:	46c0      	nop			; (mov r8, r8)
 8001042:	46bd      	mov	sp, r7
 8001044:	b00e      	add	sp, #56	; 0x38
 8001046:	bd80      	pop	{r7, pc}
 8001048:	20000038 	.word	0x20000038
 800104c:	40000400 	.word	0x40000400
 8001050:	0000ffff 	.word	0x0000ffff

08001054 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001054:	b590      	push	{r4, r7, lr}
 8001056:	b089      	sub	sp, #36	; 0x24
 8001058:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105a:	240c      	movs	r4, #12
 800105c:	193b      	adds	r3, r7, r4
 800105e:	0018      	movs	r0, r3
 8001060:	2314      	movs	r3, #20
 8001062:	001a      	movs	r2, r3
 8001064:	2100      	movs	r1, #0
 8001066:	f001 fe4a 	bl	8002cfe <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800106a:	4b29      	ldr	r3, [pc, #164]	; (8001110 <MX_GPIO_Init+0xbc>)
 800106c:	695a      	ldr	r2, [r3, #20]
 800106e:	4b28      	ldr	r3, [pc, #160]	; (8001110 <MX_GPIO_Init+0xbc>)
 8001070:	2180      	movs	r1, #128	; 0x80
 8001072:	0289      	lsls	r1, r1, #10
 8001074:	430a      	orrs	r2, r1
 8001076:	615a      	str	r2, [r3, #20]
 8001078:	4b25      	ldr	r3, [pc, #148]	; (8001110 <MX_GPIO_Init+0xbc>)
 800107a:	695a      	ldr	r2, [r3, #20]
 800107c:	2380      	movs	r3, #128	; 0x80
 800107e:	029b      	lsls	r3, r3, #10
 8001080:	4013      	ands	r3, r2
 8001082:	60bb      	str	r3, [r7, #8]
 8001084:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001086:	4b22      	ldr	r3, [pc, #136]	; (8001110 <MX_GPIO_Init+0xbc>)
 8001088:	695a      	ldr	r2, [r3, #20]
 800108a:	4b21      	ldr	r3, [pc, #132]	; (8001110 <MX_GPIO_Init+0xbc>)
 800108c:	2180      	movs	r1, #128	; 0x80
 800108e:	02c9      	lsls	r1, r1, #11
 8001090:	430a      	orrs	r2, r1
 8001092:	615a      	str	r2, [r3, #20]
 8001094:	4b1e      	ldr	r3, [pc, #120]	; (8001110 <MX_GPIO_Init+0xbc>)
 8001096:	695a      	ldr	r2, [r3, #20]
 8001098:	2380      	movs	r3, #128	; 0x80
 800109a:	02db      	lsls	r3, r3, #11
 800109c:	4013      	ands	r3, r2
 800109e:	607b      	str	r3, [r7, #4]
 80010a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BI2_GPIO_Port, BI2_Pin, GPIO_PIN_RESET);
 80010a2:	2390      	movs	r3, #144	; 0x90
 80010a4:	05db      	lsls	r3, r3, #23
 80010a6:	2200      	movs	r2, #0
 80010a8:	2180      	movs	r1, #128	; 0x80
 80010aa:	0018      	movs	r0, r3
 80010ac:	f000 fbd4 	bl	8001858 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BI1_Pin|AI2_Pin|AI1_Pin|STBY_Pin, GPIO_PIN_RESET);
 80010b0:	4918      	ldr	r1, [pc, #96]	; (8001114 <MX_GPIO_Init+0xc0>)
 80010b2:	4b19      	ldr	r3, [pc, #100]	; (8001118 <MX_GPIO_Init+0xc4>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	0018      	movs	r0, r3
 80010b8:	f000 fbce 	bl	8001858 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BI2_Pin */
  GPIO_InitStruct.Pin = BI2_Pin;
 80010bc:	193b      	adds	r3, r7, r4
 80010be:	2280      	movs	r2, #128	; 0x80
 80010c0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c2:	193b      	adds	r3, r7, r4
 80010c4:	2201      	movs	r2, #1
 80010c6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c8:	193b      	adds	r3, r7, r4
 80010ca:	2200      	movs	r2, #0
 80010cc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ce:	193b      	adds	r3, r7, r4
 80010d0:	2200      	movs	r2, #0
 80010d2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BI2_GPIO_Port, &GPIO_InitStruct);
 80010d4:	193a      	adds	r2, r7, r4
 80010d6:	2390      	movs	r3, #144	; 0x90
 80010d8:	05db      	lsls	r3, r3, #23
 80010da:	0011      	movs	r1, r2
 80010dc:	0018      	movs	r0, r3
 80010de:	f000 fa4b 	bl	8001578 <HAL_GPIO_Init>

  /*Configure GPIO pins : BI1_Pin AI2_Pin AI1_Pin STBY_Pin */
  GPIO_InitStruct.Pin = BI1_Pin|AI2_Pin|AI1_Pin|STBY_Pin;
 80010e2:	0021      	movs	r1, r4
 80010e4:	187b      	adds	r3, r7, r1
 80010e6:	4a0b      	ldr	r2, [pc, #44]	; (8001114 <MX_GPIO_Init+0xc0>)
 80010e8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ea:	187b      	adds	r3, r7, r1
 80010ec:	2201      	movs	r2, #1
 80010ee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	187b      	adds	r3, r7, r1
 80010f2:	2200      	movs	r2, #0
 80010f4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f6:	187b      	adds	r3, r7, r1
 80010f8:	2200      	movs	r2, #0
 80010fa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010fc:	187b      	adds	r3, r7, r1
 80010fe:	4a06      	ldr	r2, [pc, #24]	; (8001118 <MX_GPIO_Init+0xc4>)
 8001100:	0019      	movs	r1, r3
 8001102:	0010      	movs	r0, r2
 8001104:	f000 fa38 	bl	8001578 <HAL_GPIO_Init>

}
 8001108:	46c0      	nop			; (mov r8, r8)
 800110a:	46bd      	mov	sp, r7
 800110c:	b009      	add	sp, #36	; 0x24
 800110e:	bd90      	pop	{r4, r7, pc}
 8001110:	40021000 	.word	0x40021000
 8001114:	00000c05 	.word	0x00000c05
 8001118:	48000400 	.word	0x48000400

0800111c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001120:	46c0      	nop			; (mov r8, r8)
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
	...

08001128 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800112e:	4b0f      	ldr	r3, [pc, #60]	; (800116c <HAL_MspInit+0x44>)
 8001130:	699a      	ldr	r2, [r3, #24]
 8001132:	4b0e      	ldr	r3, [pc, #56]	; (800116c <HAL_MspInit+0x44>)
 8001134:	2101      	movs	r1, #1
 8001136:	430a      	orrs	r2, r1
 8001138:	619a      	str	r2, [r3, #24]
 800113a:	4b0c      	ldr	r3, [pc, #48]	; (800116c <HAL_MspInit+0x44>)
 800113c:	699b      	ldr	r3, [r3, #24]
 800113e:	2201      	movs	r2, #1
 8001140:	4013      	ands	r3, r2
 8001142:	607b      	str	r3, [r7, #4]
 8001144:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001146:	4b09      	ldr	r3, [pc, #36]	; (800116c <HAL_MspInit+0x44>)
 8001148:	69da      	ldr	r2, [r3, #28]
 800114a:	4b08      	ldr	r3, [pc, #32]	; (800116c <HAL_MspInit+0x44>)
 800114c:	2180      	movs	r1, #128	; 0x80
 800114e:	0549      	lsls	r1, r1, #21
 8001150:	430a      	orrs	r2, r1
 8001152:	61da      	str	r2, [r3, #28]
 8001154:	4b05      	ldr	r3, [pc, #20]	; (800116c <HAL_MspInit+0x44>)
 8001156:	69da      	ldr	r2, [r3, #28]
 8001158:	2380      	movs	r3, #128	; 0x80
 800115a:	055b      	lsls	r3, r3, #21
 800115c:	4013      	ands	r3, r2
 800115e:	603b      	str	r3, [r7, #0]
 8001160:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001162:	46c0      	nop			; (mov r8, r8)
 8001164:	46bd      	mov	sp, r7
 8001166:	b002      	add	sp, #8
 8001168:	bd80      	pop	{r7, pc}
 800116a:	46c0      	nop			; (mov r8, r8)
 800116c:	40021000 	.word	0x40021000

08001170 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a09      	ldr	r2, [pc, #36]	; (80011a4 <HAL_TIM_Base_MspInit+0x34>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d10b      	bne.n	800119a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001182:	4b09      	ldr	r3, [pc, #36]	; (80011a8 <HAL_TIM_Base_MspInit+0x38>)
 8001184:	69da      	ldr	r2, [r3, #28]
 8001186:	4b08      	ldr	r3, [pc, #32]	; (80011a8 <HAL_TIM_Base_MspInit+0x38>)
 8001188:	2102      	movs	r1, #2
 800118a:	430a      	orrs	r2, r1
 800118c:	61da      	str	r2, [r3, #28]
 800118e:	4b06      	ldr	r3, [pc, #24]	; (80011a8 <HAL_TIM_Base_MspInit+0x38>)
 8001190:	69db      	ldr	r3, [r3, #28]
 8001192:	2202      	movs	r2, #2
 8001194:	4013      	ands	r3, r2
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800119a:	46c0      	nop			; (mov r8, r8)
 800119c:	46bd      	mov	sp, r7
 800119e:	b004      	add	sp, #16
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	46c0      	nop			; (mov r8, r8)
 80011a4:	40000400 	.word	0x40000400
 80011a8:	40021000 	.word	0x40021000

080011ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80011ac:	b590      	push	{r4, r7, lr}
 80011ae:	b08b      	sub	sp, #44	; 0x2c
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b4:	2314      	movs	r3, #20
 80011b6:	18fb      	adds	r3, r7, r3
 80011b8:	0018      	movs	r0, r3
 80011ba:	2314      	movs	r3, #20
 80011bc:	001a      	movs	r2, r3
 80011be:	2100      	movs	r1, #0
 80011c0:	f001 fd9d 	bl	8002cfe <memset>
  if(htim->Instance==TIM3)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a27      	ldr	r2, [pc, #156]	; (8001268 <HAL_TIM_MspPostInit+0xbc>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d148      	bne.n	8001260 <HAL_TIM_MspPostInit+0xb4>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ce:	4b27      	ldr	r3, [pc, #156]	; (800126c <HAL_TIM_MspPostInit+0xc0>)
 80011d0:	695a      	ldr	r2, [r3, #20]
 80011d2:	4b26      	ldr	r3, [pc, #152]	; (800126c <HAL_TIM_MspPostInit+0xc0>)
 80011d4:	2180      	movs	r1, #128	; 0x80
 80011d6:	0289      	lsls	r1, r1, #10
 80011d8:	430a      	orrs	r2, r1
 80011da:	615a      	str	r2, [r3, #20]
 80011dc:	4b23      	ldr	r3, [pc, #140]	; (800126c <HAL_TIM_MspPostInit+0xc0>)
 80011de:	695a      	ldr	r2, [r3, #20]
 80011e0:	2380      	movs	r3, #128	; 0x80
 80011e2:	029b      	lsls	r3, r3, #10
 80011e4:	4013      	ands	r3, r2
 80011e6:	613b      	str	r3, [r7, #16]
 80011e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ea:	4b20      	ldr	r3, [pc, #128]	; (800126c <HAL_TIM_MspPostInit+0xc0>)
 80011ec:	695a      	ldr	r2, [r3, #20]
 80011ee:	4b1f      	ldr	r3, [pc, #124]	; (800126c <HAL_TIM_MspPostInit+0xc0>)
 80011f0:	2180      	movs	r1, #128	; 0x80
 80011f2:	02c9      	lsls	r1, r1, #11
 80011f4:	430a      	orrs	r2, r1
 80011f6:	615a      	str	r2, [r3, #20]
 80011f8:	4b1c      	ldr	r3, [pc, #112]	; (800126c <HAL_TIM_MspPostInit+0xc0>)
 80011fa:	695a      	ldr	r2, [r3, #20]
 80011fc:	2380      	movs	r3, #128	; 0x80
 80011fe:	02db      	lsls	r3, r3, #11
 8001200:	4013      	ands	r3, r2
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1
    PB1     ------> TIM3_CH4 
    */
    GPIO_InitStruct.Pin = BPWM_Pin;
 8001206:	2414      	movs	r4, #20
 8001208:	193b      	adds	r3, r7, r4
 800120a:	2240      	movs	r2, #64	; 0x40
 800120c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120e:	193b      	adds	r3, r7, r4
 8001210:	2202      	movs	r2, #2
 8001212:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	193b      	adds	r3, r7, r4
 8001216:	2200      	movs	r2, #0
 8001218:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121a:	193b      	adds	r3, r7, r4
 800121c:	2200      	movs	r2, #0
 800121e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001220:	193b      	adds	r3, r7, r4
 8001222:	2201      	movs	r2, #1
 8001224:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(BPWM_GPIO_Port, &GPIO_InitStruct);
 8001226:	193a      	adds	r2, r7, r4
 8001228:	2390      	movs	r3, #144	; 0x90
 800122a:	05db      	lsls	r3, r3, #23
 800122c:	0011      	movs	r1, r2
 800122e:	0018      	movs	r0, r3
 8001230:	f000 f9a2 	bl	8001578 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = APWM_Pin;
 8001234:	0021      	movs	r1, r4
 8001236:	187b      	adds	r3, r7, r1
 8001238:	2202      	movs	r2, #2
 800123a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123c:	187b      	adds	r3, r7, r1
 800123e:	2202      	movs	r2, #2
 8001240:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001242:	187b      	adds	r3, r7, r1
 8001244:	2200      	movs	r2, #0
 8001246:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001248:	187b      	adds	r3, r7, r1
 800124a:	2200      	movs	r2, #0
 800124c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 800124e:	187b      	adds	r3, r7, r1
 8001250:	2201      	movs	r2, #1
 8001252:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(APWM_GPIO_Port, &GPIO_InitStruct);
 8001254:	187b      	adds	r3, r7, r1
 8001256:	4a06      	ldr	r2, [pc, #24]	; (8001270 <HAL_TIM_MspPostInit+0xc4>)
 8001258:	0019      	movs	r1, r3
 800125a:	0010      	movs	r0, r2
 800125c:	f000 f98c 	bl	8001578 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001260:	46c0      	nop			; (mov r8, r8)
 8001262:	46bd      	mov	sp, r7
 8001264:	b00b      	add	sp, #44	; 0x2c
 8001266:	bd90      	pop	{r4, r7, pc}
 8001268:	40000400 	.word	0x40000400
 800126c:	40021000 	.word	0x40021000
 8001270:	48000400 	.word	0x48000400

08001274 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001278:	46c0      	nop			; (mov r8, r8)
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001282:	e7fe      	b.n	8001282 <HardFault_Handler+0x4>

08001284 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001288:	46c0      	nop			; (mov r8, r8)
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}

0800128e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800128e:	b580      	push	{r7, lr}
 8001290:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001292:	46c0      	nop			; (mov r8, r8)
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800129c:	f000 f87a 	bl	8001394 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012a0:	46c0      	nop			; (mov r8, r8)
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80012aa:	46c0      	nop			; (mov r8, r8)
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80012b0:	480d      	ldr	r0, [pc, #52]	; (80012e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80012b2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012b4:	480d      	ldr	r0, [pc, #52]	; (80012ec <LoopForever+0x6>)
  ldr r1, =_edata
 80012b6:	490e      	ldr	r1, [pc, #56]	; (80012f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012b8:	4a0e      	ldr	r2, [pc, #56]	; (80012f4 <LoopForever+0xe>)
  movs r3, #0
 80012ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012bc:	e002      	b.n	80012c4 <LoopCopyDataInit>

080012be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012c2:	3304      	adds	r3, #4

080012c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012c8:	d3f9      	bcc.n	80012be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ca:	4a0b      	ldr	r2, [pc, #44]	; (80012f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012cc:	4c0b      	ldr	r4, [pc, #44]	; (80012fc <LoopForever+0x16>)
  movs r3, #0
 80012ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012d0:	e001      	b.n	80012d6 <LoopFillZerobss>

080012d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012d4:	3204      	adds	r2, #4

080012d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012d8:	d3fb      	bcc.n	80012d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80012da:	f7ff ffe4 	bl	80012a6 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80012de:	f001 fce1 	bl	8002ca4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012e2:	f7ff fd85 	bl	8000df0 <main>

080012e6 <LoopForever>:

LoopForever:
    b LoopForever
 80012e6:	e7fe      	b.n	80012e6 <LoopForever>
  ldr   r0, =_estack
 80012e8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80012ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012f0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80012f4:	08002dc0 	.word	0x08002dc0
  ldr r2, =_sbss
 80012f8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80012fc:	2000007c 	.word	0x2000007c

08001300 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001300:	e7fe      	b.n	8001300 <ADC1_COMP_IRQHandler>
	...

08001304 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001308:	4b07      	ldr	r3, [pc, #28]	; (8001328 <HAL_Init+0x24>)
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	4b06      	ldr	r3, [pc, #24]	; (8001328 <HAL_Init+0x24>)
 800130e:	2110      	movs	r1, #16
 8001310:	430a      	orrs	r2, r1
 8001312:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001314:	2000      	movs	r0, #0
 8001316:	f000 f809 	bl	800132c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800131a:	f7ff ff05 	bl	8001128 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800131e:	2300      	movs	r3, #0
}
 8001320:	0018      	movs	r0, r3
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	46c0      	nop			; (mov r8, r8)
 8001328:	40022000 	.word	0x40022000

0800132c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800132c:	b590      	push	{r4, r7, lr}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001334:	4b14      	ldr	r3, [pc, #80]	; (8001388 <HAL_InitTick+0x5c>)
 8001336:	681c      	ldr	r4, [r3, #0]
 8001338:	4b14      	ldr	r3, [pc, #80]	; (800138c <HAL_InitTick+0x60>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	0019      	movs	r1, r3
 800133e:	23fa      	movs	r3, #250	; 0xfa
 8001340:	0098      	lsls	r0, r3, #2
 8001342:	f7fe fee1 	bl	8000108 <__udivsi3>
 8001346:	0003      	movs	r3, r0
 8001348:	0019      	movs	r1, r3
 800134a:	0020      	movs	r0, r4
 800134c:	f7fe fedc 	bl	8000108 <__udivsi3>
 8001350:	0003      	movs	r3, r0
 8001352:	0018      	movs	r0, r3
 8001354:	f000 f903 	bl	800155e <HAL_SYSTICK_Config>
 8001358:	1e03      	subs	r3, r0, #0
 800135a:	d001      	beq.n	8001360 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800135c:	2301      	movs	r3, #1
 800135e:	e00f      	b.n	8001380 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2b03      	cmp	r3, #3
 8001364:	d80b      	bhi.n	800137e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001366:	6879      	ldr	r1, [r7, #4]
 8001368:	2301      	movs	r3, #1
 800136a:	425b      	negs	r3, r3
 800136c:	2200      	movs	r2, #0
 800136e:	0018      	movs	r0, r3
 8001370:	f000 f8e0 	bl	8001534 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001374:	4b06      	ldr	r3, [pc, #24]	; (8001390 <HAL_InitTick+0x64>)
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800137a:	2300      	movs	r3, #0
 800137c:	e000      	b.n	8001380 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
}
 8001380:	0018      	movs	r0, r3
 8001382:	46bd      	mov	sp, r7
 8001384:	b003      	add	sp, #12
 8001386:	bd90      	pop	{r4, r7, pc}
 8001388:	20000000 	.word	0x20000000
 800138c:	20000008 	.word	0x20000008
 8001390:	20000004 	.word	0x20000004

08001394 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001398:	4b05      	ldr	r3, [pc, #20]	; (80013b0 <HAL_IncTick+0x1c>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	001a      	movs	r2, r3
 800139e:	4b05      	ldr	r3, [pc, #20]	; (80013b4 <HAL_IncTick+0x20>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	18d2      	adds	r2, r2, r3
 80013a4:	4b03      	ldr	r3, [pc, #12]	; (80013b4 <HAL_IncTick+0x20>)
 80013a6:	601a      	str	r2, [r3, #0]
}
 80013a8:	46c0      	nop			; (mov r8, r8)
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	46c0      	nop			; (mov r8, r8)
 80013b0:	20000008 	.word	0x20000008
 80013b4:	20000078 	.word	0x20000078

080013b8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  return uwTick;
 80013bc:	4b02      	ldr	r3, [pc, #8]	; (80013c8 <HAL_GetTick+0x10>)
 80013be:	681b      	ldr	r3, [r3, #0]
}
 80013c0:	0018      	movs	r0, r3
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	46c0      	nop			; (mov r8, r8)
 80013c8:	20000078 	.word	0x20000078

080013cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013d4:	f7ff fff0 	bl	80013b8 <HAL_GetTick>
 80013d8:	0003      	movs	r3, r0
 80013da:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	3301      	adds	r3, #1
 80013e4:	d005      	beq.n	80013f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013e6:	4b09      	ldr	r3, [pc, #36]	; (800140c <HAL_Delay+0x40>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	001a      	movs	r2, r3
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	189b      	adds	r3, r3, r2
 80013f0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80013f2:	46c0      	nop			; (mov r8, r8)
 80013f4:	f7ff ffe0 	bl	80013b8 <HAL_GetTick>
 80013f8:	0002      	movs	r2, r0
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	68fa      	ldr	r2, [r7, #12]
 8001400:	429a      	cmp	r2, r3
 8001402:	d8f7      	bhi.n	80013f4 <HAL_Delay+0x28>
  {
  }
}
 8001404:	46c0      	nop			; (mov r8, r8)
 8001406:	46bd      	mov	sp, r7
 8001408:	b004      	add	sp, #16
 800140a:	bd80      	pop	{r7, pc}
 800140c:	20000008 	.word	0x20000008

08001410 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001410:	b590      	push	{r4, r7, lr}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	0002      	movs	r2, r0
 8001418:	6039      	str	r1, [r7, #0]
 800141a:	1dfb      	adds	r3, r7, #7
 800141c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800141e:	1dfb      	adds	r3, r7, #7
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	2b7f      	cmp	r3, #127	; 0x7f
 8001424:	d828      	bhi.n	8001478 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001426:	4a2f      	ldr	r2, [pc, #188]	; (80014e4 <__NVIC_SetPriority+0xd4>)
 8001428:	1dfb      	adds	r3, r7, #7
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	b25b      	sxtb	r3, r3
 800142e:	089b      	lsrs	r3, r3, #2
 8001430:	33c0      	adds	r3, #192	; 0xc0
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	589b      	ldr	r3, [r3, r2]
 8001436:	1dfa      	adds	r2, r7, #7
 8001438:	7812      	ldrb	r2, [r2, #0]
 800143a:	0011      	movs	r1, r2
 800143c:	2203      	movs	r2, #3
 800143e:	400a      	ands	r2, r1
 8001440:	00d2      	lsls	r2, r2, #3
 8001442:	21ff      	movs	r1, #255	; 0xff
 8001444:	4091      	lsls	r1, r2
 8001446:	000a      	movs	r2, r1
 8001448:	43d2      	mvns	r2, r2
 800144a:	401a      	ands	r2, r3
 800144c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	019b      	lsls	r3, r3, #6
 8001452:	22ff      	movs	r2, #255	; 0xff
 8001454:	401a      	ands	r2, r3
 8001456:	1dfb      	adds	r3, r7, #7
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	0018      	movs	r0, r3
 800145c:	2303      	movs	r3, #3
 800145e:	4003      	ands	r3, r0
 8001460:	00db      	lsls	r3, r3, #3
 8001462:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001464:	481f      	ldr	r0, [pc, #124]	; (80014e4 <__NVIC_SetPriority+0xd4>)
 8001466:	1dfb      	adds	r3, r7, #7
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	b25b      	sxtb	r3, r3
 800146c:	089b      	lsrs	r3, r3, #2
 800146e:	430a      	orrs	r2, r1
 8001470:	33c0      	adds	r3, #192	; 0xc0
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001476:	e031      	b.n	80014dc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001478:	4a1b      	ldr	r2, [pc, #108]	; (80014e8 <__NVIC_SetPriority+0xd8>)
 800147a:	1dfb      	adds	r3, r7, #7
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	0019      	movs	r1, r3
 8001480:	230f      	movs	r3, #15
 8001482:	400b      	ands	r3, r1
 8001484:	3b08      	subs	r3, #8
 8001486:	089b      	lsrs	r3, r3, #2
 8001488:	3306      	adds	r3, #6
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	18d3      	adds	r3, r2, r3
 800148e:	3304      	adds	r3, #4
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	1dfa      	adds	r2, r7, #7
 8001494:	7812      	ldrb	r2, [r2, #0]
 8001496:	0011      	movs	r1, r2
 8001498:	2203      	movs	r2, #3
 800149a:	400a      	ands	r2, r1
 800149c:	00d2      	lsls	r2, r2, #3
 800149e:	21ff      	movs	r1, #255	; 0xff
 80014a0:	4091      	lsls	r1, r2
 80014a2:	000a      	movs	r2, r1
 80014a4:	43d2      	mvns	r2, r2
 80014a6:	401a      	ands	r2, r3
 80014a8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	019b      	lsls	r3, r3, #6
 80014ae:	22ff      	movs	r2, #255	; 0xff
 80014b0:	401a      	ands	r2, r3
 80014b2:	1dfb      	adds	r3, r7, #7
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	0018      	movs	r0, r3
 80014b8:	2303      	movs	r3, #3
 80014ba:	4003      	ands	r3, r0
 80014bc:	00db      	lsls	r3, r3, #3
 80014be:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014c0:	4809      	ldr	r0, [pc, #36]	; (80014e8 <__NVIC_SetPriority+0xd8>)
 80014c2:	1dfb      	adds	r3, r7, #7
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	001c      	movs	r4, r3
 80014c8:	230f      	movs	r3, #15
 80014ca:	4023      	ands	r3, r4
 80014cc:	3b08      	subs	r3, #8
 80014ce:	089b      	lsrs	r3, r3, #2
 80014d0:	430a      	orrs	r2, r1
 80014d2:	3306      	adds	r3, #6
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	18c3      	adds	r3, r0, r3
 80014d8:	3304      	adds	r3, #4
 80014da:	601a      	str	r2, [r3, #0]
}
 80014dc:	46c0      	nop			; (mov r8, r8)
 80014de:	46bd      	mov	sp, r7
 80014e0:	b003      	add	sp, #12
 80014e2:	bd90      	pop	{r4, r7, pc}
 80014e4:	e000e100 	.word	0xe000e100
 80014e8:	e000ed00 	.word	0xe000ed00

080014ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	3b01      	subs	r3, #1
 80014f8:	4a0c      	ldr	r2, [pc, #48]	; (800152c <SysTick_Config+0x40>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d901      	bls.n	8001502 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014fe:	2301      	movs	r3, #1
 8001500:	e010      	b.n	8001524 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001502:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <SysTick_Config+0x44>)
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	3a01      	subs	r2, #1
 8001508:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800150a:	2301      	movs	r3, #1
 800150c:	425b      	negs	r3, r3
 800150e:	2103      	movs	r1, #3
 8001510:	0018      	movs	r0, r3
 8001512:	f7ff ff7d 	bl	8001410 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001516:	4b06      	ldr	r3, [pc, #24]	; (8001530 <SysTick_Config+0x44>)
 8001518:	2200      	movs	r2, #0
 800151a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800151c:	4b04      	ldr	r3, [pc, #16]	; (8001530 <SysTick_Config+0x44>)
 800151e:	2207      	movs	r2, #7
 8001520:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001522:	2300      	movs	r3, #0
}
 8001524:	0018      	movs	r0, r3
 8001526:	46bd      	mov	sp, r7
 8001528:	b002      	add	sp, #8
 800152a:	bd80      	pop	{r7, pc}
 800152c:	00ffffff 	.word	0x00ffffff
 8001530:	e000e010 	.word	0xe000e010

08001534 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	60b9      	str	r1, [r7, #8]
 800153c:	607a      	str	r2, [r7, #4]
 800153e:	210f      	movs	r1, #15
 8001540:	187b      	adds	r3, r7, r1
 8001542:	1c02      	adds	r2, r0, #0
 8001544:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001546:	68ba      	ldr	r2, [r7, #8]
 8001548:	187b      	adds	r3, r7, r1
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	b25b      	sxtb	r3, r3
 800154e:	0011      	movs	r1, r2
 8001550:	0018      	movs	r0, r3
 8001552:	f7ff ff5d 	bl	8001410 <__NVIC_SetPriority>
}
 8001556:	46c0      	nop			; (mov r8, r8)
 8001558:	46bd      	mov	sp, r7
 800155a:	b004      	add	sp, #16
 800155c:	bd80      	pop	{r7, pc}

0800155e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800155e:	b580      	push	{r7, lr}
 8001560:	b082      	sub	sp, #8
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	0018      	movs	r0, r3
 800156a:	f7ff ffbf 	bl	80014ec <SysTick_Config>
 800156e:	0003      	movs	r3, r0
}
 8001570:	0018      	movs	r0, r3
 8001572:	46bd      	mov	sp, r7
 8001574:	b002      	add	sp, #8
 8001576:	bd80      	pop	{r7, pc}

08001578 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001578:	b580      	push	{r7, lr}
 800157a:	b086      	sub	sp, #24
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001582:	2300      	movs	r3, #0
 8001584:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001586:	e14f      	b.n	8001828 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2101      	movs	r1, #1
 800158e:	697a      	ldr	r2, [r7, #20]
 8001590:	4091      	lsls	r1, r2
 8001592:	000a      	movs	r2, r1
 8001594:	4013      	ands	r3, r2
 8001596:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d100      	bne.n	80015a0 <HAL_GPIO_Init+0x28>
 800159e:	e140      	b.n	8001822 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d003      	beq.n	80015b0 <HAL_GPIO_Init+0x38>
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	2b12      	cmp	r3, #18
 80015ae:	d123      	bne.n	80015f8 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	08da      	lsrs	r2, r3, #3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	3208      	adds	r2, #8
 80015b8:	0092      	lsls	r2, r2, #2
 80015ba:	58d3      	ldr	r3, [r2, r3]
 80015bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	2207      	movs	r2, #7
 80015c2:	4013      	ands	r3, r2
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	220f      	movs	r2, #15
 80015c8:	409a      	lsls	r2, r3
 80015ca:	0013      	movs	r3, r2
 80015cc:	43da      	mvns	r2, r3
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	4013      	ands	r3, r2
 80015d2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	691a      	ldr	r2, [r3, #16]
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	2107      	movs	r1, #7
 80015dc:	400b      	ands	r3, r1
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	409a      	lsls	r2, r3
 80015e2:	0013      	movs	r3, r2
 80015e4:	693a      	ldr	r2, [r7, #16]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	08da      	lsrs	r2, r3, #3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	3208      	adds	r2, #8
 80015f2:	0092      	lsls	r2, r2, #2
 80015f4:	6939      	ldr	r1, [r7, #16]
 80015f6:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	2203      	movs	r2, #3
 8001604:	409a      	lsls	r2, r3
 8001606:	0013      	movs	r3, r2
 8001608:	43da      	mvns	r2, r3
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	4013      	ands	r3, r2
 800160e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	2203      	movs	r2, #3
 8001616:	401a      	ands	r2, r3
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	409a      	lsls	r2, r3
 800161e:	0013      	movs	r3, r2
 8001620:	693a      	ldr	r2, [r7, #16]
 8001622:	4313      	orrs	r3, r2
 8001624:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	693a      	ldr	r2, [r7, #16]
 800162a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	2b01      	cmp	r3, #1
 8001632:	d00b      	beq.n	800164c <HAL_GPIO_Init+0xd4>
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	2b02      	cmp	r3, #2
 800163a:	d007      	beq.n	800164c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001640:	2b11      	cmp	r3, #17
 8001642:	d003      	beq.n	800164c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	2b12      	cmp	r3, #18
 800164a:	d130      	bne.n	80016ae <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	2203      	movs	r2, #3
 8001658:	409a      	lsls	r2, r3
 800165a:	0013      	movs	r3, r2
 800165c:	43da      	mvns	r2, r3
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	4013      	ands	r3, r2
 8001662:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	68da      	ldr	r2, [r3, #12]
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	409a      	lsls	r2, r3
 800166e:	0013      	movs	r3, r2
 8001670:	693a      	ldr	r2, [r7, #16]
 8001672:	4313      	orrs	r3, r2
 8001674:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	693a      	ldr	r2, [r7, #16]
 800167a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001682:	2201      	movs	r2, #1
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	409a      	lsls	r2, r3
 8001688:	0013      	movs	r3, r2
 800168a:	43da      	mvns	r2, r3
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	4013      	ands	r3, r2
 8001690:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	091b      	lsrs	r3, r3, #4
 8001698:	2201      	movs	r2, #1
 800169a:	401a      	ands	r2, r3
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	409a      	lsls	r2, r3
 80016a0:	0013      	movs	r3, r2
 80016a2:	693a      	ldr	r2, [r7, #16]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	68db      	ldr	r3, [r3, #12]
 80016b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	005b      	lsls	r3, r3, #1
 80016b8:	2203      	movs	r2, #3
 80016ba:	409a      	lsls	r2, r3
 80016bc:	0013      	movs	r3, r2
 80016be:	43da      	mvns	r2, r3
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	4013      	ands	r3, r2
 80016c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	689a      	ldr	r2, [r3, #8]
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	409a      	lsls	r2, r3
 80016d0:	0013      	movs	r3, r2
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	693a      	ldr	r2, [r7, #16]
 80016dc:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	685a      	ldr	r2, [r3, #4]
 80016e2:	2380      	movs	r3, #128	; 0x80
 80016e4:	055b      	lsls	r3, r3, #21
 80016e6:	4013      	ands	r3, r2
 80016e8:	d100      	bne.n	80016ec <HAL_GPIO_Init+0x174>
 80016ea:	e09a      	b.n	8001822 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ec:	4b54      	ldr	r3, [pc, #336]	; (8001840 <HAL_GPIO_Init+0x2c8>)
 80016ee:	699a      	ldr	r2, [r3, #24]
 80016f0:	4b53      	ldr	r3, [pc, #332]	; (8001840 <HAL_GPIO_Init+0x2c8>)
 80016f2:	2101      	movs	r1, #1
 80016f4:	430a      	orrs	r2, r1
 80016f6:	619a      	str	r2, [r3, #24]
 80016f8:	4b51      	ldr	r3, [pc, #324]	; (8001840 <HAL_GPIO_Init+0x2c8>)
 80016fa:	699b      	ldr	r3, [r3, #24]
 80016fc:	2201      	movs	r2, #1
 80016fe:	4013      	ands	r3, r2
 8001700:	60bb      	str	r3, [r7, #8]
 8001702:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001704:	4a4f      	ldr	r2, [pc, #316]	; (8001844 <HAL_GPIO_Init+0x2cc>)
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	089b      	lsrs	r3, r3, #2
 800170a:	3302      	adds	r3, #2
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	589b      	ldr	r3, [r3, r2]
 8001710:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	2203      	movs	r2, #3
 8001716:	4013      	ands	r3, r2
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	220f      	movs	r2, #15
 800171c:	409a      	lsls	r2, r3
 800171e:	0013      	movs	r3, r2
 8001720:	43da      	mvns	r2, r3
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	4013      	ands	r3, r2
 8001726:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	2390      	movs	r3, #144	; 0x90
 800172c:	05db      	lsls	r3, r3, #23
 800172e:	429a      	cmp	r2, r3
 8001730:	d013      	beq.n	800175a <HAL_GPIO_Init+0x1e2>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4a44      	ldr	r2, [pc, #272]	; (8001848 <HAL_GPIO_Init+0x2d0>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d00d      	beq.n	8001756 <HAL_GPIO_Init+0x1de>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4a43      	ldr	r2, [pc, #268]	; (800184c <HAL_GPIO_Init+0x2d4>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d007      	beq.n	8001752 <HAL_GPIO_Init+0x1da>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4a42      	ldr	r2, [pc, #264]	; (8001850 <HAL_GPIO_Init+0x2d8>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d101      	bne.n	800174e <HAL_GPIO_Init+0x1d6>
 800174a:	2303      	movs	r3, #3
 800174c:	e006      	b.n	800175c <HAL_GPIO_Init+0x1e4>
 800174e:	2305      	movs	r3, #5
 8001750:	e004      	b.n	800175c <HAL_GPIO_Init+0x1e4>
 8001752:	2302      	movs	r3, #2
 8001754:	e002      	b.n	800175c <HAL_GPIO_Init+0x1e4>
 8001756:	2301      	movs	r3, #1
 8001758:	e000      	b.n	800175c <HAL_GPIO_Init+0x1e4>
 800175a:	2300      	movs	r3, #0
 800175c:	697a      	ldr	r2, [r7, #20]
 800175e:	2103      	movs	r1, #3
 8001760:	400a      	ands	r2, r1
 8001762:	0092      	lsls	r2, r2, #2
 8001764:	4093      	lsls	r3, r2
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	4313      	orrs	r3, r2
 800176a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800176c:	4935      	ldr	r1, [pc, #212]	; (8001844 <HAL_GPIO_Init+0x2cc>)
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	089b      	lsrs	r3, r3, #2
 8001772:	3302      	adds	r3, #2
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800177a:	4b36      	ldr	r3, [pc, #216]	; (8001854 <HAL_GPIO_Init+0x2dc>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	43da      	mvns	r2, r3
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	4013      	ands	r3, r2
 8001788:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	685a      	ldr	r2, [r3, #4]
 800178e:	2380      	movs	r3, #128	; 0x80
 8001790:	025b      	lsls	r3, r3, #9
 8001792:	4013      	ands	r3, r2
 8001794:	d003      	beq.n	800179e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001796:	693a      	ldr	r2, [r7, #16]
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	4313      	orrs	r3, r2
 800179c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800179e:	4b2d      	ldr	r3, [pc, #180]	; (8001854 <HAL_GPIO_Init+0x2dc>)
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80017a4:	4b2b      	ldr	r3, [pc, #172]	; (8001854 <HAL_GPIO_Init+0x2dc>)
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	43da      	mvns	r2, r3
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	4013      	ands	r3, r2
 80017b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685a      	ldr	r2, [r3, #4]
 80017b8:	2380      	movs	r3, #128	; 0x80
 80017ba:	029b      	lsls	r3, r3, #10
 80017bc:	4013      	ands	r3, r2
 80017be:	d003      	beq.n	80017c8 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80017c0:	693a      	ldr	r2, [r7, #16]
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80017c8:	4b22      	ldr	r3, [pc, #136]	; (8001854 <HAL_GPIO_Init+0x2dc>)
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017ce:	4b21      	ldr	r3, [pc, #132]	; (8001854 <HAL_GPIO_Init+0x2dc>)
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	43da      	mvns	r2, r3
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	4013      	ands	r3, r2
 80017dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	685a      	ldr	r2, [r3, #4]
 80017e2:	2380      	movs	r3, #128	; 0x80
 80017e4:	035b      	lsls	r3, r3, #13
 80017e6:	4013      	ands	r3, r2
 80017e8:	d003      	beq.n	80017f2 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80017ea:	693a      	ldr	r2, [r7, #16]
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80017f2:	4b18      	ldr	r3, [pc, #96]	; (8001854 <HAL_GPIO_Init+0x2dc>)
 80017f4:	693a      	ldr	r2, [r7, #16]
 80017f6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80017f8:	4b16      	ldr	r3, [pc, #88]	; (8001854 <HAL_GPIO_Init+0x2dc>)
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	43da      	mvns	r2, r3
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	4013      	ands	r3, r2
 8001806:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685a      	ldr	r2, [r3, #4]
 800180c:	2380      	movs	r3, #128	; 0x80
 800180e:	039b      	lsls	r3, r3, #14
 8001810:	4013      	ands	r3, r2
 8001812:	d003      	beq.n	800181c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001814:	693a      	ldr	r2, [r7, #16]
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	4313      	orrs	r3, r2
 800181a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800181c:	4b0d      	ldr	r3, [pc, #52]	; (8001854 <HAL_GPIO_Init+0x2dc>)
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	3301      	adds	r3, #1
 8001826:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	40da      	lsrs	r2, r3
 8001830:	1e13      	subs	r3, r2, #0
 8001832:	d000      	beq.n	8001836 <HAL_GPIO_Init+0x2be>
 8001834:	e6a8      	b.n	8001588 <HAL_GPIO_Init+0x10>
  } 
}
 8001836:	46c0      	nop			; (mov r8, r8)
 8001838:	46bd      	mov	sp, r7
 800183a:	b006      	add	sp, #24
 800183c:	bd80      	pop	{r7, pc}
 800183e:	46c0      	nop			; (mov r8, r8)
 8001840:	40021000 	.word	0x40021000
 8001844:	40010000 	.word	0x40010000
 8001848:	48000400 	.word	0x48000400
 800184c:	48000800 	.word	0x48000800
 8001850:	48000c00 	.word	0x48000c00
 8001854:	40010400 	.word	0x40010400

08001858 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	0008      	movs	r0, r1
 8001862:	0011      	movs	r1, r2
 8001864:	1cbb      	adds	r3, r7, #2
 8001866:	1c02      	adds	r2, r0, #0
 8001868:	801a      	strh	r2, [r3, #0]
 800186a:	1c7b      	adds	r3, r7, #1
 800186c:	1c0a      	adds	r2, r1, #0
 800186e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001870:	1c7b      	adds	r3, r7, #1
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d004      	beq.n	8001882 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001878:	1cbb      	adds	r3, r7, #2
 800187a:	881a      	ldrh	r2, [r3, #0]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001880:	e003      	b.n	800188a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001882:	1cbb      	adds	r3, r7, #2
 8001884:	881a      	ldrh	r2, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	629a      	str	r2, [r3, #40]	; 0x28
}
 800188a:	46c0      	nop			; (mov r8, r8)
 800188c:	46bd      	mov	sp, r7
 800188e:	b002      	add	sp, #8
 8001890:	bd80      	pop	{r7, pc}
	...

08001894 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b088      	sub	sp, #32
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d101      	bne.n	80018a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e303      	b.n	8001eae <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	2201      	movs	r2, #1
 80018ac:	4013      	ands	r3, r2
 80018ae:	d100      	bne.n	80018b2 <HAL_RCC_OscConfig+0x1e>
 80018b0:	e08d      	b.n	80019ce <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80018b2:	4bc4      	ldr	r3, [pc, #784]	; (8001bc4 <HAL_RCC_OscConfig+0x330>)
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	220c      	movs	r2, #12
 80018b8:	4013      	ands	r3, r2
 80018ba:	2b04      	cmp	r3, #4
 80018bc:	d00e      	beq.n	80018dc <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018be:	4bc1      	ldr	r3, [pc, #772]	; (8001bc4 <HAL_RCC_OscConfig+0x330>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	220c      	movs	r2, #12
 80018c4:	4013      	ands	r3, r2
 80018c6:	2b08      	cmp	r3, #8
 80018c8:	d116      	bne.n	80018f8 <HAL_RCC_OscConfig+0x64>
 80018ca:	4bbe      	ldr	r3, [pc, #760]	; (8001bc4 <HAL_RCC_OscConfig+0x330>)
 80018cc:	685a      	ldr	r2, [r3, #4]
 80018ce:	2380      	movs	r3, #128	; 0x80
 80018d0:	025b      	lsls	r3, r3, #9
 80018d2:	401a      	ands	r2, r3
 80018d4:	2380      	movs	r3, #128	; 0x80
 80018d6:	025b      	lsls	r3, r3, #9
 80018d8:	429a      	cmp	r2, r3
 80018da:	d10d      	bne.n	80018f8 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018dc:	4bb9      	ldr	r3, [pc, #740]	; (8001bc4 <HAL_RCC_OscConfig+0x330>)
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	2380      	movs	r3, #128	; 0x80
 80018e2:	029b      	lsls	r3, r3, #10
 80018e4:	4013      	ands	r3, r2
 80018e6:	d100      	bne.n	80018ea <HAL_RCC_OscConfig+0x56>
 80018e8:	e070      	b.n	80019cc <HAL_RCC_OscConfig+0x138>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d000      	beq.n	80018f4 <HAL_RCC_OscConfig+0x60>
 80018f2:	e06b      	b.n	80019cc <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e2da      	b.n	8001eae <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d107      	bne.n	8001910 <HAL_RCC_OscConfig+0x7c>
 8001900:	4bb0      	ldr	r3, [pc, #704]	; (8001bc4 <HAL_RCC_OscConfig+0x330>)
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	4baf      	ldr	r3, [pc, #700]	; (8001bc4 <HAL_RCC_OscConfig+0x330>)
 8001906:	2180      	movs	r1, #128	; 0x80
 8001908:	0249      	lsls	r1, r1, #9
 800190a:	430a      	orrs	r2, r1
 800190c:	601a      	str	r2, [r3, #0]
 800190e:	e02f      	b.n	8001970 <HAL_RCC_OscConfig+0xdc>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d10c      	bne.n	8001932 <HAL_RCC_OscConfig+0x9e>
 8001918:	4baa      	ldr	r3, [pc, #680]	; (8001bc4 <HAL_RCC_OscConfig+0x330>)
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	4ba9      	ldr	r3, [pc, #676]	; (8001bc4 <HAL_RCC_OscConfig+0x330>)
 800191e:	49aa      	ldr	r1, [pc, #680]	; (8001bc8 <HAL_RCC_OscConfig+0x334>)
 8001920:	400a      	ands	r2, r1
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	4ba7      	ldr	r3, [pc, #668]	; (8001bc4 <HAL_RCC_OscConfig+0x330>)
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	4ba6      	ldr	r3, [pc, #664]	; (8001bc4 <HAL_RCC_OscConfig+0x330>)
 800192a:	49a8      	ldr	r1, [pc, #672]	; (8001bcc <HAL_RCC_OscConfig+0x338>)
 800192c:	400a      	ands	r2, r1
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	e01e      	b.n	8001970 <HAL_RCC_OscConfig+0xdc>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	2b05      	cmp	r3, #5
 8001938:	d10e      	bne.n	8001958 <HAL_RCC_OscConfig+0xc4>
 800193a:	4ba2      	ldr	r3, [pc, #648]	; (8001bc4 <HAL_RCC_OscConfig+0x330>)
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	4ba1      	ldr	r3, [pc, #644]	; (8001bc4 <HAL_RCC_OscConfig+0x330>)
 8001940:	2180      	movs	r1, #128	; 0x80
 8001942:	02c9      	lsls	r1, r1, #11
 8001944:	430a      	orrs	r2, r1
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	4b9e      	ldr	r3, [pc, #632]	; (8001bc4 <HAL_RCC_OscConfig+0x330>)
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	4b9d      	ldr	r3, [pc, #628]	; (8001bc4 <HAL_RCC_OscConfig+0x330>)
 800194e:	2180      	movs	r1, #128	; 0x80
 8001950:	0249      	lsls	r1, r1, #9
 8001952:	430a      	orrs	r2, r1
 8001954:	601a      	str	r2, [r3, #0]
 8001956:	e00b      	b.n	8001970 <HAL_RCC_OscConfig+0xdc>
 8001958:	4b9a      	ldr	r3, [pc, #616]	; (8001bc4 <HAL_RCC_OscConfig+0x330>)
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	4b99      	ldr	r3, [pc, #612]	; (8001bc4 <HAL_RCC_OscConfig+0x330>)
 800195e:	499a      	ldr	r1, [pc, #616]	; (8001bc8 <HAL_RCC_OscConfig+0x334>)
 8001960:	400a      	ands	r2, r1
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	4b97      	ldr	r3, [pc, #604]	; (8001bc4 <HAL_RCC_OscConfig+0x330>)
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	4b96      	ldr	r3, [pc, #600]	; (8001bc4 <HAL_RCC_OscConfig+0x330>)
 800196a:	4998      	ldr	r1, [pc, #608]	; (8001bcc <HAL_RCC_OscConfig+0x338>)
 800196c:	400a      	ands	r2, r1
 800196e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d014      	beq.n	80019a2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001978:	f7ff fd1e 	bl	80013b8 <HAL_GetTick>
 800197c:	0003      	movs	r3, r0
 800197e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001980:	e008      	b.n	8001994 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001982:	f7ff fd19 	bl	80013b8 <HAL_GetTick>
 8001986:	0002      	movs	r2, r0
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	2b64      	cmp	r3, #100	; 0x64
 800198e:	d901      	bls.n	8001994 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001990:	2303      	movs	r3, #3
 8001992:	e28c      	b.n	8001eae <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001994:	4b8b      	ldr	r3, [pc, #556]	; (8001bc4 <HAL_RCC_OscConfig+0x330>)
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	2380      	movs	r3, #128	; 0x80
 800199a:	029b      	lsls	r3, r3, #10
 800199c:	4013      	ands	r3, r2
 800199e:	d0f0      	beq.n	8001982 <HAL_RCC_OscConfig+0xee>
 80019a0:	e015      	b.n	80019ce <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a2:	f7ff fd09 	bl	80013b8 <HAL_GetTick>
 80019a6:	0003      	movs	r3, r0
 80019a8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019aa:	e008      	b.n	80019be <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019ac:	f7ff fd04 	bl	80013b8 <HAL_GetTick>
 80019b0:	0002      	movs	r2, r0
 80019b2:	69bb      	ldr	r3, [r7, #24]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	2b64      	cmp	r3, #100	; 0x64
 80019b8:	d901      	bls.n	80019be <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e277      	b.n	8001eae <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019be:	4b81      	ldr	r3, [pc, #516]	; (8001bc4 <HAL_RCC_OscConfig+0x330>)
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	2380      	movs	r3, #128	; 0x80
 80019c4:	029b      	lsls	r3, r3, #10
 80019c6:	4013      	ands	r3, r2
 80019c8:	d1f0      	bne.n	80019ac <HAL_RCC_OscConfig+0x118>
 80019ca:	e000      	b.n	80019ce <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019cc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	2202      	movs	r2, #2
 80019d4:	4013      	ands	r3, r2
 80019d6:	d100      	bne.n	80019da <HAL_RCC_OscConfig+0x146>
 80019d8:	e069      	b.n	8001aae <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80019da:	4b7a      	ldr	r3, [pc, #488]	; (8001bc4 <HAL_RCC_OscConfig+0x330>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	220c      	movs	r2, #12
 80019e0:	4013      	ands	r3, r2
 80019e2:	d00b      	beq.n	80019fc <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80019e4:	4b77      	ldr	r3, [pc, #476]	; (8001bc4 <HAL_RCC_OscConfig+0x330>)
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	220c      	movs	r2, #12
 80019ea:	4013      	ands	r3, r2
 80019ec:	2b08      	cmp	r3, #8
 80019ee:	d11c      	bne.n	8001a2a <HAL_RCC_OscConfig+0x196>
 80019f0:	4b74      	ldr	r3, [pc, #464]	; (8001bc4 <HAL_RCC_OscConfig+0x330>)
 80019f2:	685a      	ldr	r2, [r3, #4]
 80019f4:	2380      	movs	r3, #128	; 0x80
 80019f6:	025b      	lsls	r3, r3, #9
 80019f8:	4013      	ands	r3, r2
 80019fa:	d116      	bne.n	8001a2a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019fc:	4b71      	ldr	r3, [pc, #452]	; (8001bc4 <HAL_RCC_OscConfig+0x330>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2202      	movs	r2, #2
 8001a02:	4013      	ands	r3, r2
 8001a04:	d005      	beq.n	8001a12 <HAL_RCC_OscConfig+0x17e>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	68db      	ldr	r3, [r3, #12]
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d001      	beq.n	8001a12 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e24d      	b.n	8001eae <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a12:	4b6c      	ldr	r3, [pc, #432]	; (8001bc4 <HAL_RCC_OscConfig+0x330>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	22f8      	movs	r2, #248	; 0xf8
 8001a18:	4393      	bics	r3, r2
 8001a1a:	0019      	movs	r1, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	691b      	ldr	r3, [r3, #16]
 8001a20:	00da      	lsls	r2, r3, #3
 8001a22:	4b68      	ldr	r3, [pc, #416]	; (8001bc4 <HAL_RCC_OscConfig+0x330>)
 8001a24:	430a      	orrs	r2, r1
 8001a26:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a28:	e041      	b.n	8001aae <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	68db      	ldr	r3, [r3, #12]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d024      	beq.n	8001a7c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a32:	4b64      	ldr	r3, [pc, #400]	; (8001bc4 <HAL_RCC_OscConfig+0x330>)
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	4b63      	ldr	r3, [pc, #396]	; (8001bc4 <HAL_RCC_OscConfig+0x330>)
 8001a38:	2101      	movs	r1, #1
 8001a3a:	430a      	orrs	r2, r1
 8001a3c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a3e:	f7ff fcbb 	bl	80013b8 <HAL_GetTick>
 8001a42:	0003      	movs	r3, r0
 8001a44:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a46:	e008      	b.n	8001a5a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a48:	f7ff fcb6 	bl	80013b8 <HAL_GetTick>
 8001a4c:	0002      	movs	r2, r0
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d901      	bls.n	8001a5a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e229      	b.n	8001eae <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a5a:	4b5a      	ldr	r3, [pc, #360]	; (8001bc4 <HAL_RCC_OscConfig+0x330>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2202      	movs	r2, #2
 8001a60:	4013      	ands	r3, r2
 8001a62:	d0f1      	beq.n	8001a48 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a64:	4b57      	ldr	r3, [pc, #348]	; (8001bc4 <HAL_RCC_OscConfig+0x330>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	22f8      	movs	r2, #248	; 0xf8
 8001a6a:	4393      	bics	r3, r2
 8001a6c:	0019      	movs	r1, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	691b      	ldr	r3, [r3, #16]
 8001a72:	00da      	lsls	r2, r3, #3
 8001a74:	4b53      	ldr	r3, [pc, #332]	; (8001bc4 <HAL_RCC_OscConfig+0x330>)
 8001a76:	430a      	orrs	r2, r1
 8001a78:	601a      	str	r2, [r3, #0]
 8001a7a:	e018      	b.n	8001aae <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a7c:	4b51      	ldr	r3, [pc, #324]	; (8001bc4 <HAL_RCC_OscConfig+0x330>)
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	4b50      	ldr	r3, [pc, #320]	; (8001bc4 <HAL_RCC_OscConfig+0x330>)
 8001a82:	2101      	movs	r1, #1
 8001a84:	438a      	bics	r2, r1
 8001a86:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a88:	f7ff fc96 	bl	80013b8 <HAL_GetTick>
 8001a8c:	0003      	movs	r3, r0
 8001a8e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a90:	e008      	b.n	8001aa4 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a92:	f7ff fc91 	bl	80013b8 <HAL_GetTick>
 8001a96:	0002      	movs	r2, r0
 8001a98:	69bb      	ldr	r3, [r7, #24]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d901      	bls.n	8001aa4 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e204      	b.n	8001eae <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aa4:	4b47      	ldr	r3, [pc, #284]	; (8001bc4 <HAL_RCC_OscConfig+0x330>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2202      	movs	r2, #2
 8001aaa:	4013      	ands	r3, r2
 8001aac:	d1f1      	bne.n	8001a92 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	2208      	movs	r2, #8
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	d036      	beq.n	8001b26 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	69db      	ldr	r3, [r3, #28]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d019      	beq.n	8001af4 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ac0:	4b40      	ldr	r3, [pc, #256]	; (8001bc4 <HAL_RCC_OscConfig+0x330>)
 8001ac2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ac4:	4b3f      	ldr	r3, [pc, #252]	; (8001bc4 <HAL_RCC_OscConfig+0x330>)
 8001ac6:	2101      	movs	r1, #1
 8001ac8:	430a      	orrs	r2, r1
 8001aca:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001acc:	f7ff fc74 	bl	80013b8 <HAL_GetTick>
 8001ad0:	0003      	movs	r3, r0
 8001ad2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ad4:	e008      	b.n	8001ae8 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ad6:	f7ff fc6f 	bl	80013b8 <HAL_GetTick>
 8001ada:	0002      	movs	r2, r0
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d901      	bls.n	8001ae8 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e1e2      	b.n	8001eae <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ae8:	4b36      	ldr	r3, [pc, #216]	; (8001bc4 <HAL_RCC_OscConfig+0x330>)
 8001aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aec:	2202      	movs	r2, #2
 8001aee:	4013      	ands	r3, r2
 8001af0:	d0f1      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x242>
 8001af2:	e018      	b.n	8001b26 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001af4:	4b33      	ldr	r3, [pc, #204]	; (8001bc4 <HAL_RCC_OscConfig+0x330>)
 8001af6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001af8:	4b32      	ldr	r3, [pc, #200]	; (8001bc4 <HAL_RCC_OscConfig+0x330>)
 8001afa:	2101      	movs	r1, #1
 8001afc:	438a      	bics	r2, r1
 8001afe:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b00:	f7ff fc5a 	bl	80013b8 <HAL_GetTick>
 8001b04:	0003      	movs	r3, r0
 8001b06:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b08:	e008      	b.n	8001b1c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b0a:	f7ff fc55 	bl	80013b8 <HAL_GetTick>
 8001b0e:	0002      	movs	r2, r0
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d901      	bls.n	8001b1c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e1c8      	b.n	8001eae <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b1c:	4b29      	ldr	r3, [pc, #164]	; (8001bc4 <HAL_RCC_OscConfig+0x330>)
 8001b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b20:	2202      	movs	r2, #2
 8001b22:	4013      	ands	r3, r2
 8001b24:	d1f1      	bne.n	8001b0a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2204      	movs	r2, #4
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	d100      	bne.n	8001b32 <HAL_RCC_OscConfig+0x29e>
 8001b30:	e0b6      	b.n	8001ca0 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b32:	231f      	movs	r3, #31
 8001b34:	18fb      	adds	r3, r7, r3
 8001b36:	2200      	movs	r2, #0
 8001b38:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b3a:	4b22      	ldr	r3, [pc, #136]	; (8001bc4 <HAL_RCC_OscConfig+0x330>)
 8001b3c:	69da      	ldr	r2, [r3, #28]
 8001b3e:	2380      	movs	r3, #128	; 0x80
 8001b40:	055b      	lsls	r3, r3, #21
 8001b42:	4013      	ands	r3, r2
 8001b44:	d111      	bne.n	8001b6a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b46:	4b1f      	ldr	r3, [pc, #124]	; (8001bc4 <HAL_RCC_OscConfig+0x330>)
 8001b48:	69da      	ldr	r2, [r3, #28]
 8001b4a:	4b1e      	ldr	r3, [pc, #120]	; (8001bc4 <HAL_RCC_OscConfig+0x330>)
 8001b4c:	2180      	movs	r1, #128	; 0x80
 8001b4e:	0549      	lsls	r1, r1, #21
 8001b50:	430a      	orrs	r2, r1
 8001b52:	61da      	str	r2, [r3, #28]
 8001b54:	4b1b      	ldr	r3, [pc, #108]	; (8001bc4 <HAL_RCC_OscConfig+0x330>)
 8001b56:	69da      	ldr	r2, [r3, #28]
 8001b58:	2380      	movs	r3, #128	; 0x80
 8001b5a:	055b      	lsls	r3, r3, #21
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	60fb      	str	r3, [r7, #12]
 8001b60:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001b62:	231f      	movs	r3, #31
 8001b64:	18fb      	adds	r3, r7, r3
 8001b66:	2201      	movs	r2, #1
 8001b68:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b6a:	4b19      	ldr	r3, [pc, #100]	; (8001bd0 <HAL_RCC_OscConfig+0x33c>)
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	2380      	movs	r3, #128	; 0x80
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	4013      	ands	r3, r2
 8001b74:	d11a      	bne.n	8001bac <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b76:	4b16      	ldr	r3, [pc, #88]	; (8001bd0 <HAL_RCC_OscConfig+0x33c>)
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	4b15      	ldr	r3, [pc, #84]	; (8001bd0 <HAL_RCC_OscConfig+0x33c>)
 8001b7c:	2180      	movs	r1, #128	; 0x80
 8001b7e:	0049      	lsls	r1, r1, #1
 8001b80:	430a      	orrs	r2, r1
 8001b82:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b84:	f7ff fc18 	bl	80013b8 <HAL_GetTick>
 8001b88:	0003      	movs	r3, r0
 8001b8a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b8c:	e008      	b.n	8001ba0 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b8e:	f7ff fc13 	bl	80013b8 <HAL_GetTick>
 8001b92:	0002      	movs	r2, r0
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	2b64      	cmp	r3, #100	; 0x64
 8001b9a:	d901      	bls.n	8001ba0 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e186      	b.n	8001eae <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ba0:	4b0b      	ldr	r3, [pc, #44]	; (8001bd0 <HAL_RCC_OscConfig+0x33c>)
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	2380      	movs	r3, #128	; 0x80
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	4013      	ands	r3, r2
 8001baa:	d0f0      	beq.n	8001b8e <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d10f      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x340>
 8001bb4:	4b03      	ldr	r3, [pc, #12]	; (8001bc4 <HAL_RCC_OscConfig+0x330>)
 8001bb6:	6a1a      	ldr	r2, [r3, #32]
 8001bb8:	4b02      	ldr	r3, [pc, #8]	; (8001bc4 <HAL_RCC_OscConfig+0x330>)
 8001bba:	2101      	movs	r1, #1
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	621a      	str	r2, [r3, #32]
 8001bc0:	e036      	b.n	8001c30 <HAL_RCC_OscConfig+0x39c>
 8001bc2:	46c0      	nop			; (mov r8, r8)
 8001bc4:	40021000 	.word	0x40021000
 8001bc8:	fffeffff 	.word	0xfffeffff
 8001bcc:	fffbffff 	.word	0xfffbffff
 8001bd0:	40007000 	.word	0x40007000
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d10c      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x362>
 8001bdc:	4bb6      	ldr	r3, [pc, #728]	; (8001eb8 <HAL_RCC_OscConfig+0x624>)
 8001bde:	6a1a      	ldr	r2, [r3, #32]
 8001be0:	4bb5      	ldr	r3, [pc, #724]	; (8001eb8 <HAL_RCC_OscConfig+0x624>)
 8001be2:	2101      	movs	r1, #1
 8001be4:	438a      	bics	r2, r1
 8001be6:	621a      	str	r2, [r3, #32]
 8001be8:	4bb3      	ldr	r3, [pc, #716]	; (8001eb8 <HAL_RCC_OscConfig+0x624>)
 8001bea:	6a1a      	ldr	r2, [r3, #32]
 8001bec:	4bb2      	ldr	r3, [pc, #712]	; (8001eb8 <HAL_RCC_OscConfig+0x624>)
 8001bee:	2104      	movs	r1, #4
 8001bf0:	438a      	bics	r2, r1
 8001bf2:	621a      	str	r2, [r3, #32]
 8001bf4:	e01c      	b.n	8001c30 <HAL_RCC_OscConfig+0x39c>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	2b05      	cmp	r3, #5
 8001bfc:	d10c      	bne.n	8001c18 <HAL_RCC_OscConfig+0x384>
 8001bfe:	4bae      	ldr	r3, [pc, #696]	; (8001eb8 <HAL_RCC_OscConfig+0x624>)
 8001c00:	6a1a      	ldr	r2, [r3, #32]
 8001c02:	4bad      	ldr	r3, [pc, #692]	; (8001eb8 <HAL_RCC_OscConfig+0x624>)
 8001c04:	2104      	movs	r1, #4
 8001c06:	430a      	orrs	r2, r1
 8001c08:	621a      	str	r2, [r3, #32]
 8001c0a:	4bab      	ldr	r3, [pc, #684]	; (8001eb8 <HAL_RCC_OscConfig+0x624>)
 8001c0c:	6a1a      	ldr	r2, [r3, #32]
 8001c0e:	4baa      	ldr	r3, [pc, #680]	; (8001eb8 <HAL_RCC_OscConfig+0x624>)
 8001c10:	2101      	movs	r1, #1
 8001c12:	430a      	orrs	r2, r1
 8001c14:	621a      	str	r2, [r3, #32]
 8001c16:	e00b      	b.n	8001c30 <HAL_RCC_OscConfig+0x39c>
 8001c18:	4ba7      	ldr	r3, [pc, #668]	; (8001eb8 <HAL_RCC_OscConfig+0x624>)
 8001c1a:	6a1a      	ldr	r2, [r3, #32]
 8001c1c:	4ba6      	ldr	r3, [pc, #664]	; (8001eb8 <HAL_RCC_OscConfig+0x624>)
 8001c1e:	2101      	movs	r1, #1
 8001c20:	438a      	bics	r2, r1
 8001c22:	621a      	str	r2, [r3, #32]
 8001c24:	4ba4      	ldr	r3, [pc, #656]	; (8001eb8 <HAL_RCC_OscConfig+0x624>)
 8001c26:	6a1a      	ldr	r2, [r3, #32]
 8001c28:	4ba3      	ldr	r3, [pc, #652]	; (8001eb8 <HAL_RCC_OscConfig+0x624>)
 8001c2a:	2104      	movs	r1, #4
 8001c2c:	438a      	bics	r2, r1
 8001c2e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d014      	beq.n	8001c62 <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c38:	f7ff fbbe 	bl	80013b8 <HAL_GetTick>
 8001c3c:	0003      	movs	r3, r0
 8001c3e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c40:	e009      	b.n	8001c56 <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c42:	f7ff fbb9 	bl	80013b8 <HAL_GetTick>
 8001c46:	0002      	movs	r2, r0
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	4a9b      	ldr	r2, [pc, #620]	; (8001ebc <HAL_RCC_OscConfig+0x628>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e12b      	b.n	8001eae <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c56:	4b98      	ldr	r3, [pc, #608]	; (8001eb8 <HAL_RCC_OscConfig+0x624>)
 8001c58:	6a1b      	ldr	r3, [r3, #32]
 8001c5a:	2202      	movs	r2, #2
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	d0f0      	beq.n	8001c42 <HAL_RCC_OscConfig+0x3ae>
 8001c60:	e013      	b.n	8001c8a <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c62:	f7ff fba9 	bl	80013b8 <HAL_GetTick>
 8001c66:	0003      	movs	r3, r0
 8001c68:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c6a:	e009      	b.n	8001c80 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c6c:	f7ff fba4 	bl	80013b8 <HAL_GetTick>
 8001c70:	0002      	movs	r2, r0
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	4a91      	ldr	r2, [pc, #580]	; (8001ebc <HAL_RCC_OscConfig+0x628>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d901      	bls.n	8001c80 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	e116      	b.n	8001eae <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c80:	4b8d      	ldr	r3, [pc, #564]	; (8001eb8 <HAL_RCC_OscConfig+0x624>)
 8001c82:	6a1b      	ldr	r3, [r3, #32]
 8001c84:	2202      	movs	r2, #2
 8001c86:	4013      	ands	r3, r2
 8001c88:	d1f0      	bne.n	8001c6c <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001c8a:	231f      	movs	r3, #31
 8001c8c:	18fb      	adds	r3, r7, r3
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d105      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c94:	4b88      	ldr	r3, [pc, #544]	; (8001eb8 <HAL_RCC_OscConfig+0x624>)
 8001c96:	69da      	ldr	r2, [r3, #28]
 8001c98:	4b87      	ldr	r3, [pc, #540]	; (8001eb8 <HAL_RCC_OscConfig+0x624>)
 8001c9a:	4989      	ldr	r1, [pc, #548]	; (8001ec0 <HAL_RCC_OscConfig+0x62c>)
 8001c9c:	400a      	ands	r2, r1
 8001c9e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2210      	movs	r2, #16
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	d063      	beq.n	8001d72 <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	695b      	ldr	r3, [r3, #20]
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d12a      	bne.n	8001d08 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001cb2:	4b81      	ldr	r3, [pc, #516]	; (8001eb8 <HAL_RCC_OscConfig+0x624>)
 8001cb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cb6:	4b80      	ldr	r3, [pc, #512]	; (8001eb8 <HAL_RCC_OscConfig+0x624>)
 8001cb8:	2104      	movs	r1, #4
 8001cba:	430a      	orrs	r2, r1
 8001cbc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001cbe:	4b7e      	ldr	r3, [pc, #504]	; (8001eb8 <HAL_RCC_OscConfig+0x624>)
 8001cc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cc2:	4b7d      	ldr	r3, [pc, #500]	; (8001eb8 <HAL_RCC_OscConfig+0x624>)
 8001cc4:	2101      	movs	r1, #1
 8001cc6:	430a      	orrs	r2, r1
 8001cc8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cca:	f7ff fb75 	bl	80013b8 <HAL_GetTick>
 8001cce:	0003      	movs	r3, r0
 8001cd0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001cd2:	e008      	b.n	8001ce6 <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001cd4:	f7ff fb70 	bl	80013b8 <HAL_GetTick>
 8001cd8:	0002      	movs	r2, r0
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e0e3      	b.n	8001eae <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001ce6:	4b74      	ldr	r3, [pc, #464]	; (8001eb8 <HAL_RCC_OscConfig+0x624>)
 8001ce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cea:	2202      	movs	r2, #2
 8001cec:	4013      	ands	r3, r2
 8001cee:	d0f1      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001cf0:	4b71      	ldr	r3, [pc, #452]	; (8001eb8 <HAL_RCC_OscConfig+0x624>)
 8001cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cf4:	22f8      	movs	r2, #248	; 0xf8
 8001cf6:	4393      	bics	r3, r2
 8001cf8:	0019      	movs	r1, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	699b      	ldr	r3, [r3, #24]
 8001cfe:	00da      	lsls	r2, r3, #3
 8001d00:	4b6d      	ldr	r3, [pc, #436]	; (8001eb8 <HAL_RCC_OscConfig+0x624>)
 8001d02:	430a      	orrs	r2, r1
 8001d04:	635a      	str	r2, [r3, #52]	; 0x34
 8001d06:	e034      	b.n	8001d72 <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	695b      	ldr	r3, [r3, #20]
 8001d0c:	3305      	adds	r3, #5
 8001d0e:	d111      	bne.n	8001d34 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001d10:	4b69      	ldr	r3, [pc, #420]	; (8001eb8 <HAL_RCC_OscConfig+0x624>)
 8001d12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d14:	4b68      	ldr	r3, [pc, #416]	; (8001eb8 <HAL_RCC_OscConfig+0x624>)
 8001d16:	2104      	movs	r1, #4
 8001d18:	438a      	bics	r2, r1
 8001d1a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001d1c:	4b66      	ldr	r3, [pc, #408]	; (8001eb8 <HAL_RCC_OscConfig+0x624>)
 8001d1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d20:	22f8      	movs	r2, #248	; 0xf8
 8001d22:	4393      	bics	r3, r2
 8001d24:	0019      	movs	r1, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	699b      	ldr	r3, [r3, #24]
 8001d2a:	00da      	lsls	r2, r3, #3
 8001d2c:	4b62      	ldr	r3, [pc, #392]	; (8001eb8 <HAL_RCC_OscConfig+0x624>)
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	635a      	str	r2, [r3, #52]	; 0x34
 8001d32:	e01e      	b.n	8001d72 <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001d34:	4b60      	ldr	r3, [pc, #384]	; (8001eb8 <HAL_RCC_OscConfig+0x624>)
 8001d36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d38:	4b5f      	ldr	r3, [pc, #380]	; (8001eb8 <HAL_RCC_OscConfig+0x624>)
 8001d3a:	2104      	movs	r1, #4
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001d40:	4b5d      	ldr	r3, [pc, #372]	; (8001eb8 <HAL_RCC_OscConfig+0x624>)
 8001d42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d44:	4b5c      	ldr	r3, [pc, #368]	; (8001eb8 <HAL_RCC_OscConfig+0x624>)
 8001d46:	2101      	movs	r1, #1
 8001d48:	438a      	bics	r2, r1
 8001d4a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d4c:	f7ff fb34 	bl	80013b8 <HAL_GetTick>
 8001d50:	0003      	movs	r3, r0
 8001d52:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001d54:	e008      	b.n	8001d68 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001d56:	f7ff fb2f 	bl	80013b8 <HAL_GetTick>
 8001d5a:	0002      	movs	r2, r0
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d901      	bls.n	8001d68 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	e0a2      	b.n	8001eae <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001d68:	4b53      	ldr	r3, [pc, #332]	; (8001eb8 <HAL_RCC_OscConfig+0x624>)
 8001d6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d6c:	2202      	movs	r2, #2
 8001d6e:	4013      	ands	r3, r2
 8001d70:	d1f1      	bne.n	8001d56 <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6a1b      	ldr	r3, [r3, #32]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d100      	bne.n	8001d7c <HAL_RCC_OscConfig+0x4e8>
 8001d7a:	e097      	b.n	8001eac <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d7c:	4b4e      	ldr	r3, [pc, #312]	; (8001eb8 <HAL_RCC_OscConfig+0x624>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	220c      	movs	r2, #12
 8001d82:	4013      	ands	r3, r2
 8001d84:	2b08      	cmp	r3, #8
 8001d86:	d100      	bne.n	8001d8a <HAL_RCC_OscConfig+0x4f6>
 8001d88:	e06b      	b.n	8001e62 <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6a1b      	ldr	r3, [r3, #32]
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d14c      	bne.n	8001e2c <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d92:	4b49      	ldr	r3, [pc, #292]	; (8001eb8 <HAL_RCC_OscConfig+0x624>)
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	4b48      	ldr	r3, [pc, #288]	; (8001eb8 <HAL_RCC_OscConfig+0x624>)
 8001d98:	494a      	ldr	r1, [pc, #296]	; (8001ec4 <HAL_RCC_OscConfig+0x630>)
 8001d9a:	400a      	ands	r2, r1
 8001d9c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d9e:	f7ff fb0b 	bl	80013b8 <HAL_GetTick>
 8001da2:	0003      	movs	r3, r0
 8001da4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001da6:	e008      	b.n	8001dba <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001da8:	f7ff fb06 	bl	80013b8 <HAL_GetTick>
 8001dac:	0002      	movs	r2, r0
 8001dae:	69bb      	ldr	r3, [r7, #24]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e079      	b.n	8001eae <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dba:	4b3f      	ldr	r3, [pc, #252]	; (8001eb8 <HAL_RCC_OscConfig+0x624>)
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	2380      	movs	r3, #128	; 0x80
 8001dc0:	049b      	lsls	r3, r3, #18
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	d1f0      	bne.n	8001da8 <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dc6:	4b3c      	ldr	r3, [pc, #240]	; (8001eb8 <HAL_RCC_OscConfig+0x624>)
 8001dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dca:	220f      	movs	r2, #15
 8001dcc:	4393      	bics	r3, r2
 8001dce:	0019      	movs	r1, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dd4:	4b38      	ldr	r3, [pc, #224]	; (8001eb8 <HAL_RCC_OscConfig+0x624>)
 8001dd6:	430a      	orrs	r2, r1
 8001dd8:	62da      	str	r2, [r3, #44]	; 0x2c
 8001dda:	4b37      	ldr	r3, [pc, #220]	; (8001eb8 <HAL_RCC_OscConfig+0x624>)
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	4a3a      	ldr	r2, [pc, #232]	; (8001ec8 <HAL_RCC_OscConfig+0x634>)
 8001de0:	4013      	ands	r3, r2
 8001de2:	0019      	movs	r1, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dec:	431a      	orrs	r2, r3
 8001dee:	4b32      	ldr	r3, [pc, #200]	; (8001eb8 <HAL_RCC_OscConfig+0x624>)
 8001df0:	430a      	orrs	r2, r1
 8001df2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001df4:	4b30      	ldr	r3, [pc, #192]	; (8001eb8 <HAL_RCC_OscConfig+0x624>)
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	4b2f      	ldr	r3, [pc, #188]	; (8001eb8 <HAL_RCC_OscConfig+0x624>)
 8001dfa:	2180      	movs	r1, #128	; 0x80
 8001dfc:	0449      	lsls	r1, r1, #17
 8001dfe:	430a      	orrs	r2, r1
 8001e00:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e02:	f7ff fad9 	bl	80013b8 <HAL_GetTick>
 8001e06:	0003      	movs	r3, r0
 8001e08:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e0a:	e008      	b.n	8001e1e <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e0c:	f7ff fad4 	bl	80013b8 <HAL_GetTick>
 8001e10:	0002      	movs	r2, r0
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e047      	b.n	8001eae <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e1e:	4b26      	ldr	r3, [pc, #152]	; (8001eb8 <HAL_RCC_OscConfig+0x624>)
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	2380      	movs	r3, #128	; 0x80
 8001e24:	049b      	lsls	r3, r3, #18
 8001e26:	4013      	ands	r3, r2
 8001e28:	d0f0      	beq.n	8001e0c <HAL_RCC_OscConfig+0x578>
 8001e2a:	e03f      	b.n	8001eac <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e2c:	4b22      	ldr	r3, [pc, #136]	; (8001eb8 <HAL_RCC_OscConfig+0x624>)
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	4b21      	ldr	r3, [pc, #132]	; (8001eb8 <HAL_RCC_OscConfig+0x624>)
 8001e32:	4924      	ldr	r1, [pc, #144]	; (8001ec4 <HAL_RCC_OscConfig+0x630>)
 8001e34:	400a      	ands	r2, r1
 8001e36:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e38:	f7ff fabe 	bl	80013b8 <HAL_GetTick>
 8001e3c:	0003      	movs	r3, r0
 8001e3e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e40:	e008      	b.n	8001e54 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e42:	f7ff fab9 	bl	80013b8 <HAL_GetTick>
 8001e46:	0002      	movs	r2, r0
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d901      	bls.n	8001e54 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8001e50:	2303      	movs	r3, #3
 8001e52:	e02c      	b.n	8001eae <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e54:	4b18      	ldr	r3, [pc, #96]	; (8001eb8 <HAL_RCC_OscConfig+0x624>)
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	2380      	movs	r3, #128	; 0x80
 8001e5a:	049b      	lsls	r3, r3, #18
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	d1f0      	bne.n	8001e42 <HAL_RCC_OscConfig+0x5ae>
 8001e60:	e024      	b.n	8001eac <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a1b      	ldr	r3, [r3, #32]
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d101      	bne.n	8001e6e <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e01f      	b.n	8001eae <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001e6e:	4b12      	ldr	r3, [pc, #72]	; (8001eb8 <HAL_RCC_OscConfig+0x624>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001e74:	4b10      	ldr	r3, [pc, #64]	; (8001eb8 <HAL_RCC_OscConfig+0x624>)
 8001e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e78:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e7a:	697a      	ldr	r2, [r7, #20]
 8001e7c:	2380      	movs	r3, #128	; 0x80
 8001e7e:	025b      	lsls	r3, r3, #9
 8001e80:	401a      	ands	r2, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d10e      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	220f      	movs	r2, #15
 8001e8e:	401a      	ands	r2, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d107      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001e98:	697a      	ldr	r2, [r7, #20]
 8001e9a:	23f0      	movs	r3, #240	; 0xf0
 8001e9c:	039b      	lsls	r3, r3, #14
 8001e9e:	401a      	ands	r2, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d001      	beq.n	8001eac <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e000      	b.n	8001eae <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	0018      	movs	r0, r3
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	b008      	add	sp, #32
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	46c0      	nop			; (mov r8, r8)
 8001eb8:	40021000 	.word	0x40021000
 8001ebc:	00001388 	.word	0x00001388
 8001ec0:	efffffff 	.word	0xefffffff
 8001ec4:	feffffff 	.word	0xfeffffff
 8001ec8:	ffc2ffff 	.word	0xffc2ffff

08001ecc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d101      	bne.n	8001ee0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e0b3      	b.n	8002048 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ee0:	4b5b      	ldr	r3, [pc, #364]	; (8002050 <HAL_RCC_ClockConfig+0x184>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	683a      	ldr	r2, [r7, #0]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d911      	bls.n	8001f12 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eee:	4b58      	ldr	r3, [pc, #352]	; (8002050 <HAL_RCC_ClockConfig+0x184>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	4393      	bics	r3, r2
 8001ef6:	0019      	movs	r1, r3
 8001ef8:	4b55      	ldr	r3, [pc, #340]	; (8002050 <HAL_RCC_ClockConfig+0x184>)
 8001efa:	683a      	ldr	r2, [r7, #0]
 8001efc:	430a      	orrs	r2, r1
 8001efe:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f00:	4b53      	ldr	r3, [pc, #332]	; (8002050 <HAL_RCC_ClockConfig+0x184>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2201      	movs	r2, #1
 8001f06:	4013      	ands	r3, r2
 8001f08:	683a      	ldr	r2, [r7, #0]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d001      	beq.n	8001f12 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e09a      	b.n	8002048 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	2202      	movs	r2, #2
 8001f18:	4013      	ands	r3, r2
 8001f1a:	d015      	beq.n	8001f48 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2204      	movs	r2, #4
 8001f22:	4013      	ands	r3, r2
 8001f24:	d006      	beq.n	8001f34 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001f26:	4b4b      	ldr	r3, [pc, #300]	; (8002054 <HAL_RCC_ClockConfig+0x188>)
 8001f28:	685a      	ldr	r2, [r3, #4]
 8001f2a:	4b4a      	ldr	r3, [pc, #296]	; (8002054 <HAL_RCC_ClockConfig+0x188>)
 8001f2c:	21e0      	movs	r1, #224	; 0xe0
 8001f2e:	00c9      	lsls	r1, r1, #3
 8001f30:	430a      	orrs	r2, r1
 8001f32:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f34:	4b47      	ldr	r3, [pc, #284]	; (8002054 <HAL_RCC_ClockConfig+0x188>)
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	22f0      	movs	r2, #240	; 0xf0
 8001f3a:	4393      	bics	r3, r2
 8001f3c:	0019      	movs	r1, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	689a      	ldr	r2, [r3, #8]
 8001f42:	4b44      	ldr	r3, [pc, #272]	; (8002054 <HAL_RCC_ClockConfig+0x188>)
 8001f44:	430a      	orrs	r2, r1
 8001f46:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	4013      	ands	r3, r2
 8001f50:	d040      	beq.n	8001fd4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d107      	bne.n	8001f6a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f5a:	4b3e      	ldr	r3, [pc, #248]	; (8002054 <HAL_RCC_ClockConfig+0x188>)
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	2380      	movs	r3, #128	; 0x80
 8001f60:	029b      	lsls	r3, r3, #10
 8001f62:	4013      	ands	r3, r2
 8001f64:	d114      	bne.n	8001f90 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e06e      	b.n	8002048 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d107      	bne.n	8001f82 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f72:	4b38      	ldr	r3, [pc, #224]	; (8002054 <HAL_RCC_ClockConfig+0x188>)
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	2380      	movs	r3, #128	; 0x80
 8001f78:	049b      	lsls	r3, r3, #18
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	d108      	bne.n	8001f90 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e062      	b.n	8002048 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f82:	4b34      	ldr	r3, [pc, #208]	; (8002054 <HAL_RCC_ClockConfig+0x188>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2202      	movs	r2, #2
 8001f88:	4013      	ands	r3, r2
 8001f8a:	d101      	bne.n	8001f90 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e05b      	b.n	8002048 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f90:	4b30      	ldr	r3, [pc, #192]	; (8002054 <HAL_RCC_ClockConfig+0x188>)
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	2203      	movs	r2, #3
 8001f96:	4393      	bics	r3, r2
 8001f98:	0019      	movs	r1, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685a      	ldr	r2, [r3, #4]
 8001f9e:	4b2d      	ldr	r3, [pc, #180]	; (8002054 <HAL_RCC_ClockConfig+0x188>)
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fa4:	f7ff fa08 	bl	80013b8 <HAL_GetTick>
 8001fa8:	0003      	movs	r3, r0
 8001faa:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fac:	e009      	b.n	8001fc2 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fae:	f7ff fa03 	bl	80013b8 <HAL_GetTick>
 8001fb2:	0002      	movs	r2, r0
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	4a27      	ldr	r2, [pc, #156]	; (8002058 <HAL_RCC_ClockConfig+0x18c>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e042      	b.n	8002048 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fc2:	4b24      	ldr	r3, [pc, #144]	; (8002054 <HAL_RCC_ClockConfig+0x188>)
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	220c      	movs	r2, #12
 8001fc8:	401a      	ands	r2, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d1ec      	bne.n	8001fae <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fd4:	4b1e      	ldr	r3, [pc, #120]	; (8002050 <HAL_RCC_ClockConfig+0x184>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2201      	movs	r2, #1
 8001fda:	4013      	ands	r3, r2
 8001fdc:	683a      	ldr	r2, [r7, #0]
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d211      	bcs.n	8002006 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fe2:	4b1b      	ldr	r3, [pc, #108]	; (8002050 <HAL_RCC_ClockConfig+0x184>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	4393      	bics	r3, r2
 8001fea:	0019      	movs	r1, r3
 8001fec:	4b18      	ldr	r3, [pc, #96]	; (8002050 <HAL_RCC_ClockConfig+0x184>)
 8001fee:	683a      	ldr	r2, [r7, #0]
 8001ff0:	430a      	orrs	r2, r1
 8001ff2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ff4:	4b16      	ldr	r3, [pc, #88]	; (8002050 <HAL_RCC_ClockConfig+0x184>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	683a      	ldr	r2, [r7, #0]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d001      	beq.n	8002006 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e020      	b.n	8002048 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	2204      	movs	r2, #4
 800200c:	4013      	ands	r3, r2
 800200e:	d009      	beq.n	8002024 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002010:	4b10      	ldr	r3, [pc, #64]	; (8002054 <HAL_RCC_ClockConfig+0x188>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	4a11      	ldr	r2, [pc, #68]	; (800205c <HAL_RCC_ClockConfig+0x190>)
 8002016:	4013      	ands	r3, r2
 8002018:	0019      	movs	r1, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	68da      	ldr	r2, [r3, #12]
 800201e:	4b0d      	ldr	r3, [pc, #52]	; (8002054 <HAL_RCC_ClockConfig+0x188>)
 8002020:	430a      	orrs	r2, r1
 8002022:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002024:	f000 f820 	bl	8002068 <HAL_RCC_GetSysClockFreq>
 8002028:	0001      	movs	r1, r0
 800202a:	4b0a      	ldr	r3, [pc, #40]	; (8002054 <HAL_RCC_ClockConfig+0x188>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	091b      	lsrs	r3, r3, #4
 8002030:	220f      	movs	r2, #15
 8002032:	4013      	ands	r3, r2
 8002034:	4a0a      	ldr	r2, [pc, #40]	; (8002060 <HAL_RCC_ClockConfig+0x194>)
 8002036:	5cd3      	ldrb	r3, [r2, r3]
 8002038:	000a      	movs	r2, r1
 800203a:	40da      	lsrs	r2, r3
 800203c:	4b09      	ldr	r3, [pc, #36]	; (8002064 <HAL_RCC_ClockConfig+0x198>)
 800203e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002040:	2000      	movs	r0, #0
 8002042:	f7ff f973 	bl	800132c <HAL_InitTick>
  
  return HAL_OK;
 8002046:	2300      	movs	r3, #0
}
 8002048:	0018      	movs	r0, r3
 800204a:	46bd      	mov	sp, r7
 800204c:	b004      	add	sp, #16
 800204e:	bd80      	pop	{r7, pc}
 8002050:	40022000 	.word	0x40022000
 8002054:	40021000 	.word	0x40021000
 8002058:	00001388 	.word	0x00001388
 800205c:	fffff8ff 	.word	0xfffff8ff
 8002060:	08002da8 	.word	0x08002da8
 8002064:	20000000 	.word	0x20000000

08002068 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002068:	b590      	push	{r4, r7, lr}
 800206a:	b08f      	sub	sp, #60	; 0x3c
 800206c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800206e:	2314      	movs	r3, #20
 8002070:	18fb      	adds	r3, r7, r3
 8002072:	4a2b      	ldr	r2, [pc, #172]	; (8002120 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002074:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002076:	c313      	stmia	r3!, {r0, r1, r4}
 8002078:	6812      	ldr	r2, [r2, #0]
 800207a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800207c:	1d3b      	adds	r3, r7, #4
 800207e:	4a29      	ldr	r2, [pc, #164]	; (8002124 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002080:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002082:	c313      	stmia	r3!, {r0, r1, r4}
 8002084:	6812      	ldr	r2, [r2, #0]
 8002086:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002088:	2300      	movs	r3, #0
 800208a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800208c:	2300      	movs	r3, #0
 800208e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002090:	2300      	movs	r3, #0
 8002092:	637b      	str	r3, [r7, #52]	; 0x34
 8002094:	2300      	movs	r3, #0
 8002096:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002098:	2300      	movs	r3, #0
 800209a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800209c:	4b22      	ldr	r3, [pc, #136]	; (8002128 <HAL_RCC_GetSysClockFreq+0xc0>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020a4:	220c      	movs	r2, #12
 80020a6:	4013      	ands	r3, r2
 80020a8:	2b04      	cmp	r3, #4
 80020aa:	d002      	beq.n	80020b2 <HAL_RCC_GetSysClockFreq+0x4a>
 80020ac:	2b08      	cmp	r3, #8
 80020ae:	d003      	beq.n	80020b8 <HAL_RCC_GetSysClockFreq+0x50>
 80020b0:	e02d      	b.n	800210e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020b2:	4b1e      	ldr	r3, [pc, #120]	; (800212c <HAL_RCC_GetSysClockFreq+0xc4>)
 80020b4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80020b6:	e02d      	b.n	8002114 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80020b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020ba:	0c9b      	lsrs	r3, r3, #18
 80020bc:	220f      	movs	r2, #15
 80020be:	4013      	ands	r3, r2
 80020c0:	2214      	movs	r2, #20
 80020c2:	18ba      	adds	r2, r7, r2
 80020c4:	5cd3      	ldrb	r3, [r2, r3]
 80020c6:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80020c8:	4b17      	ldr	r3, [pc, #92]	; (8002128 <HAL_RCC_GetSysClockFreq+0xc0>)
 80020ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020cc:	220f      	movs	r2, #15
 80020ce:	4013      	ands	r3, r2
 80020d0:	1d3a      	adds	r2, r7, #4
 80020d2:	5cd3      	ldrb	r3, [r2, r3]
 80020d4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80020d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020d8:	2380      	movs	r3, #128	; 0x80
 80020da:	025b      	lsls	r3, r3, #9
 80020dc:	4013      	ands	r3, r2
 80020de:	d009      	beq.n	80020f4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80020e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80020e2:	4812      	ldr	r0, [pc, #72]	; (800212c <HAL_RCC_GetSysClockFreq+0xc4>)
 80020e4:	f7fe f810 	bl	8000108 <__udivsi3>
 80020e8:	0003      	movs	r3, r0
 80020ea:	001a      	movs	r2, r3
 80020ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ee:	4353      	muls	r3, r2
 80020f0:	637b      	str	r3, [r7, #52]	; 0x34
 80020f2:	e009      	b.n	8002108 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80020f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020f6:	000a      	movs	r2, r1
 80020f8:	0152      	lsls	r2, r2, #5
 80020fa:	1a52      	subs	r2, r2, r1
 80020fc:	0193      	lsls	r3, r2, #6
 80020fe:	1a9b      	subs	r3, r3, r2
 8002100:	00db      	lsls	r3, r3, #3
 8002102:	185b      	adds	r3, r3, r1
 8002104:	021b      	lsls	r3, r3, #8
 8002106:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8002108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800210a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800210c:	e002      	b.n	8002114 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800210e:	4b07      	ldr	r3, [pc, #28]	; (800212c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002110:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002112:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002116:	0018      	movs	r0, r3
 8002118:	46bd      	mov	sp, r7
 800211a:	b00f      	add	sp, #60	; 0x3c
 800211c:	bd90      	pop	{r4, r7, pc}
 800211e:	46c0      	nop			; (mov r8, r8)
 8002120:	08002d48 	.word	0x08002d48
 8002124:	08002d58 	.word	0x08002d58
 8002128:	40021000 	.word	0x40021000
 800212c:	007a1200 	.word	0x007a1200

08002130 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d101      	bne.n	8002142 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e01e      	b.n	8002180 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	223d      	movs	r2, #61	; 0x3d
 8002146:	5c9b      	ldrb	r3, [r3, r2]
 8002148:	b2db      	uxtb	r3, r3
 800214a:	2b00      	cmp	r3, #0
 800214c:	d107      	bne.n	800215e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	223c      	movs	r2, #60	; 0x3c
 8002152:	2100      	movs	r1, #0
 8002154:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	0018      	movs	r0, r3
 800215a:	f7ff f809 	bl	8001170 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	223d      	movs	r2, #61	; 0x3d
 8002162:	2102      	movs	r1, #2
 8002164:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	3304      	adds	r3, #4
 800216e:	0019      	movs	r1, r3
 8002170:	0010      	movs	r0, r2
 8002172:	f000 f9ff 	bl	8002574 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	223d      	movs	r2, #61	; 0x3d
 800217a:	2101      	movs	r1, #1
 800217c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800217e:	2300      	movs	r3, #0
}
 8002180:	0018      	movs	r0, r3
 8002182:	46bd      	mov	sp, r7
 8002184:	b002      	add	sp, #8
 8002186:	bd80      	pop	{r7, pc}

08002188 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d101      	bne.n	800219a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e01e      	b.n	80021d8 <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	223d      	movs	r2, #61	; 0x3d
 800219e:	5c9b      	ldrb	r3, [r3, r2]
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d107      	bne.n	80021b6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	223c      	movs	r2, #60	; 0x3c
 80021aa:	2100      	movs	r1, #0
 80021ac:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	0018      	movs	r0, r3
 80021b2:	f000 f815 	bl	80021e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	223d      	movs	r2, #61	; 0x3d
 80021ba:	2102      	movs	r1, #2
 80021bc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	3304      	adds	r3, #4
 80021c6:	0019      	movs	r1, r3
 80021c8:	0010      	movs	r0, r2
 80021ca:	f000 f9d3 	bl	8002574 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	223d      	movs	r2, #61	; 0x3d
 80021d2:	2101      	movs	r1, #1
 80021d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80021d6:	2300      	movs	r3, #0
}
 80021d8:	0018      	movs	r0, r3
 80021da:	46bd      	mov	sp, r7
 80021dc:	b002      	add	sp, #8
 80021de:	bd80      	pop	{r7, pc}

080021e0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80021e8:	46c0      	nop			; (mov r8, r8)
 80021ea:	46bd      	mov	sp, r7
 80021ec:	b002      	add	sp, #8
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	6839      	ldr	r1, [r7, #0]
 8002200:	2201      	movs	r2, #1
 8002202:	0018      	movs	r0, r3
 8002204:	f000 fccc 	bl	8002ba0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a1a      	ldr	r2, [pc, #104]	; (8002278 <HAL_TIM_PWM_Start+0x88>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d00e      	beq.n	8002230 <HAL_TIM_PWM_Start+0x40>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a19      	ldr	r2, [pc, #100]	; (800227c <HAL_TIM_PWM_Start+0x8c>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d009      	beq.n	8002230 <HAL_TIM_PWM_Start+0x40>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a17      	ldr	r2, [pc, #92]	; (8002280 <HAL_TIM_PWM_Start+0x90>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d004      	beq.n	8002230 <HAL_TIM_PWM_Start+0x40>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a16      	ldr	r2, [pc, #88]	; (8002284 <HAL_TIM_PWM_Start+0x94>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d101      	bne.n	8002234 <HAL_TIM_PWM_Start+0x44>
 8002230:	2301      	movs	r3, #1
 8002232:	e000      	b.n	8002236 <HAL_TIM_PWM_Start+0x46>
 8002234:	2300      	movs	r3, #0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d008      	beq.n	800224c <HAL_TIM_PWM_Start+0x5c>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2180      	movs	r1, #128	; 0x80
 8002246:	0209      	lsls	r1, r1, #8
 8002248:	430a      	orrs	r2, r1
 800224a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	2207      	movs	r2, #7
 8002254:	4013      	ands	r3, r2
 8002256:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2b06      	cmp	r3, #6
 800225c:	d007      	beq.n	800226e <HAL_TIM_PWM_Start+0x7e>
  {
    __HAL_TIM_ENABLE(htim);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2101      	movs	r1, #1
 800226a:	430a      	orrs	r2, r1
 800226c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800226e:	2300      	movs	r3, #0
}
 8002270:	0018      	movs	r0, r3
 8002272:	46bd      	mov	sp, r7
 8002274:	b004      	add	sp, #16
 8002276:	bd80      	pop	{r7, pc}
 8002278:	40012c00 	.word	0x40012c00
 800227c:	40014000 	.word	0x40014000
 8002280:	40014400 	.word	0x40014400
 8002284:	40014800 	.word	0x40014800

08002288 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	223c      	movs	r2, #60	; 0x3c
 8002298:	5c9b      	ldrb	r3, [r3, r2]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d101      	bne.n	80022a2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800229e:	2302      	movs	r3, #2
 80022a0:	e0a4      	b.n	80023ec <HAL_TIM_PWM_ConfigChannel+0x164>
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	223c      	movs	r2, #60	; 0x3c
 80022a6:	2101      	movs	r1, #1
 80022a8:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	223d      	movs	r2, #61	; 0x3d
 80022ae:	2102      	movs	r1, #2
 80022b0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2b04      	cmp	r3, #4
 80022b6:	d029      	beq.n	800230c <HAL_TIM_PWM_ConfigChannel+0x84>
 80022b8:	d802      	bhi.n	80022c0 <HAL_TIM_PWM_ConfigChannel+0x38>
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d005      	beq.n	80022ca <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 80022be:	e08c      	b.n	80023da <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 80022c0:	2b08      	cmp	r3, #8
 80022c2:	d046      	beq.n	8002352 <HAL_TIM_PWM_ConfigChannel+0xca>
 80022c4:	2b0c      	cmp	r3, #12
 80022c6:	d065      	beq.n	8002394 <HAL_TIM_PWM_ConfigChannel+0x10c>
      break;
 80022c8:	e087      	b.n	80023da <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	68ba      	ldr	r2, [r7, #8]
 80022d0:	0011      	movs	r1, r2
 80022d2:	0018      	movs	r0, r3
 80022d4:	f000 f9ce 	bl	8002674 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	699a      	ldr	r2, [r3, #24]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2108      	movs	r1, #8
 80022e4:	430a      	orrs	r2, r1
 80022e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	699a      	ldr	r2, [r3, #24]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	2104      	movs	r1, #4
 80022f4:	438a      	bics	r2, r1
 80022f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	6999      	ldr	r1, [r3, #24]
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	691a      	ldr	r2, [r3, #16]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	430a      	orrs	r2, r1
 8002308:	619a      	str	r2, [r3, #24]
      break;
 800230a:	e066      	b.n	80023da <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	68ba      	ldr	r2, [r7, #8]
 8002312:	0011      	movs	r1, r2
 8002314:	0018      	movs	r0, r3
 8002316:	f000 fa35 	bl	8002784 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	699a      	ldr	r2, [r3, #24]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2180      	movs	r1, #128	; 0x80
 8002326:	0109      	lsls	r1, r1, #4
 8002328:	430a      	orrs	r2, r1
 800232a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	699a      	ldr	r2, [r3, #24]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	492f      	ldr	r1, [pc, #188]	; (80023f4 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8002338:	400a      	ands	r2, r1
 800233a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	6999      	ldr	r1, [r3, #24]
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	021a      	lsls	r2, r3, #8
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	430a      	orrs	r2, r1
 800234e:	619a      	str	r2, [r3, #24]
      break;
 8002350:	e043      	b.n	80023da <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	68ba      	ldr	r2, [r7, #8]
 8002358:	0011      	movs	r1, r2
 800235a:	0018      	movs	r0, r3
 800235c:	f000 fa96 	bl	800288c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	69da      	ldr	r2, [r3, #28]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	2108      	movs	r1, #8
 800236c:	430a      	orrs	r2, r1
 800236e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	69da      	ldr	r2, [r3, #28]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2104      	movs	r1, #4
 800237c:	438a      	bics	r2, r1
 800237e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	69d9      	ldr	r1, [r3, #28]
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	691a      	ldr	r2, [r3, #16]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	430a      	orrs	r2, r1
 8002390:	61da      	str	r2, [r3, #28]
      break;
 8002392:	e022      	b.n	80023da <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	68ba      	ldr	r2, [r7, #8]
 800239a:	0011      	movs	r1, r2
 800239c:	0018      	movs	r0, r3
 800239e:	f000 fafb 	bl	8002998 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	69da      	ldr	r2, [r3, #28]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2180      	movs	r1, #128	; 0x80
 80023ae:	0109      	lsls	r1, r1, #4
 80023b0:	430a      	orrs	r2, r1
 80023b2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	69da      	ldr	r2, [r3, #28]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	490d      	ldr	r1, [pc, #52]	; (80023f4 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 80023c0:	400a      	ands	r2, r1
 80023c2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	69d9      	ldr	r1, [r3, #28]
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	021a      	lsls	r2, r3, #8
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	430a      	orrs	r2, r1
 80023d6:	61da      	str	r2, [r3, #28]
      break;
 80023d8:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	223d      	movs	r2, #61	; 0x3d
 80023de:	2101      	movs	r1, #1
 80023e0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	223c      	movs	r2, #60	; 0x3c
 80023e6:	2100      	movs	r1, #0
 80023e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80023ea:	2300      	movs	r3, #0
}
 80023ec:	0018      	movs	r0, r3
 80023ee:	46bd      	mov	sp, r7
 80023f0:	b004      	add	sp, #16
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	fffffbff 	.word	0xfffffbff

080023f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	223c      	movs	r2, #60	; 0x3c
 8002406:	5c9b      	ldrb	r3, [r3, r2]
 8002408:	2b01      	cmp	r3, #1
 800240a:	d101      	bne.n	8002410 <HAL_TIM_ConfigClockSource+0x18>
 800240c:	2302      	movs	r3, #2
 800240e:	e0ab      	b.n	8002568 <HAL_TIM_ConfigClockSource+0x170>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	223c      	movs	r2, #60	; 0x3c
 8002414:	2101      	movs	r1, #1
 8002416:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	223d      	movs	r2, #61	; 0x3d
 800241c:	2102      	movs	r1, #2
 800241e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2277      	movs	r2, #119	; 0x77
 800242c:	4393      	bics	r3, r2
 800242e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	4a4f      	ldr	r2, [pc, #316]	; (8002570 <HAL_TIM_ConfigClockSource+0x178>)
 8002434:	4013      	ands	r3, r2
 8002436:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	68fa      	ldr	r2, [r7, #12]
 800243e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2b40      	cmp	r3, #64	; 0x40
 8002446:	d100      	bne.n	800244a <HAL_TIM_ConfigClockSource+0x52>
 8002448:	e06b      	b.n	8002522 <HAL_TIM_ConfigClockSource+0x12a>
 800244a:	d80e      	bhi.n	800246a <HAL_TIM_ConfigClockSource+0x72>
 800244c:	2b10      	cmp	r3, #16
 800244e:	d100      	bne.n	8002452 <HAL_TIM_ConfigClockSource+0x5a>
 8002450:	e077      	b.n	8002542 <HAL_TIM_ConfigClockSource+0x14a>
 8002452:	d803      	bhi.n	800245c <HAL_TIM_ConfigClockSource+0x64>
 8002454:	2b00      	cmp	r3, #0
 8002456:	d100      	bne.n	800245a <HAL_TIM_ConfigClockSource+0x62>
 8002458:	e073      	b.n	8002542 <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800245a:	e07c      	b.n	8002556 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800245c:	2b20      	cmp	r3, #32
 800245e:	d100      	bne.n	8002462 <HAL_TIM_ConfigClockSource+0x6a>
 8002460:	e06f      	b.n	8002542 <HAL_TIM_ConfigClockSource+0x14a>
 8002462:	2b30      	cmp	r3, #48	; 0x30
 8002464:	d100      	bne.n	8002468 <HAL_TIM_ConfigClockSource+0x70>
 8002466:	e06c      	b.n	8002542 <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8002468:	e075      	b.n	8002556 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800246a:	2b70      	cmp	r3, #112	; 0x70
 800246c:	d00e      	beq.n	800248c <HAL_TIM_ConfigClockSource+0x94>
 800246e:	d804      	bhi.n	800247a <HAL_TIM_ConfigClockSource+0x82>
 8002470:	2b50      	cmp	r3, #80	; 0x50
 8002472:	d036      	beq.n	80024e2 <HAL_TIM_ConfigClockSource+0xea>
 8002474:	2b60      	cmp	r3, #96	; 0x60
 8002476:	d044      	beq.n	8002502 <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8002478:	e06d      	b.n	8002556 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800247a:	2280      	movs	r2, #128	; 0x80
 800247c:	0152      	lsls	r2, r2, #5
 800247e:	4293      	cmp	r3, r2
 8002480:	d068      	beq.n	8002554 <HAL_TIM_ConfigClockSource+0x15c>
 8002482:	2280      	movs	r2, #128	; 0x80
 8002484:	0192      	lsls	r2, r2, #6
 8002486:	4293      	cmp	r3, r2
 8002488:	d017      	beq.n	80024ba <HAL_TIM_ConfigClockSource+0xc2>
      break;
 800248a:	e064      	b.n	8002556 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6818      	ldr	r0, [r3, #0]
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	6899      	ldr	r1, [r3, #8]
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685a      	ldr	r2, [r3, #4]
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	f000 fb60 	bl	8002b60 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2277      	movs	r2, #119	; 0x77
 80024ac:	4313      	orrs	r3, r2
 80024ae:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	68fa      	ldr	r2, [r7, #12]
 80024b6:	609a      	str	r2, [r3, #8]
      break;
 80024b8:	e04d      	b.n	8002556 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6818      	ldr	r0, [r3, #0]
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	6899      	ldr	r1, [r3, #8]
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	685a      	ldr	r2, [r3, #4]
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	f000 fb49 	bl	8002b60 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	689a      	ldr	r2, [r3, #8]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2180      	movs	r1, #128	; 0x80
 80024da:	01c9      	lsls	r1, r1, #7
 80024dc:	430a      	orrs	r2, r1
 80024de:	609a      	str	r2, [r3, #8]
      break;
 80024e0:	e039      	b.n	8002556 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6818      	ldr	r0, [r3, #0]
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	6859      	ldr	r1, [r3, #4]
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	001a      	movs	r2, r3
 80024f0:	f000 fabc 	bl	8002a6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2150      	movs	r1, #80	; 0x50
 80024fa:	0018      	movs	r0, r3
 80024fc:	f000 fb16 	bl	8002b2c <TIM_ITRx_SetConfig>
      break;
 8002500:	e029      	b.n	8002556 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6818      	ldr	r0, [r3, #0]
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	6859      	ldr	r1, [r3, #4]
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	001a      	movs	r2, r3
 8002510:	f000 fada 	bl	8002ac8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2160      	movs	r1, #96	; 0x60
 800251a:	0018      	movs	r0, r3
 800251c:	f000 fb06 	bl	8002b2c <TIM_ITRx_SetConfig>
      break;
 8002520:	e019      	b.n	8002556 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6818      	ldr	r0, [r3, #0]
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	6859      	ldr	r1, [r3, #4]
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	001a      	movs	r2, r3
 8002530:	f000 fa9c 	bl	8002a6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2140      	movs	r1, #64	; 0x40
 800253a:	0018      	movs	r0, r3
 800253c:	f000 faf6 	bl	8002b2c <TIM_ITRx_SetConfig>
      break;
 8002540:	e009      	b.n	8002556 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	0019      	movs	r1, r3
 800254c:	0010      	movs	r0, r2
 800254e:	f000 faed 	bl	8002b2c <TIM_ITRx_SetConfig>
      break;
 8002552:	e000      	b.n	8002556 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8002554:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	223d      	movs	r2, #61	; 0x3d
 800255a:	2101      	movs	r1, #1
 800255c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	223c      	movs	r2, #60	; 0x3c
 8002562:	2100      	movs	r1, #0
 8002564:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002566:	2300      	movs	r3, #0
}
 8002568:	0018      	movs	r0, r3
 800256a:	46bd      	mov	sp, r7
 800256c:	b004      	add	sp, #16
 800256e:	bd80      	pop	{r7, pc}
 8002570:	ffff00ff 	.word	0xffff00ff

08002574 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	4a34      	ldr	r2, [pc, #208]	; (8002658 <TIM_Base_SetConfig+0xe4>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d008      	beq.n	800259e <TIM_Base_SetConfig+0x2a>
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	2380      	movs	r3, #128	; 0x80
 8002590:	05db      	lsls	r3, r3, #23
 8002592:	429a      	cmp	r2, r3
 8002594:	d003      	beq.n	800259e <TIM_Base_SetConfig+0x2a>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a30      	ldr	r2, [pc, #192]	; (800265c <TIM_Base_SetConfig+0xe8>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d108      	bne.n	80025b0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2270      	movs	r2, #112	; 0x70
 80025a2:	4393      	bics	r3, r2
 80025a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	68fa      	ldr	r2, [r7, #12]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	4a29      	ldr	r2, [pc, #164]	; (8002658 <TIM_Base_SetConfig+0xe4>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d018      	beq.n	80025ea <TIM_Base_SetConfig+0x76>
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	2380      	movs	r3, #128	; 0x80
 80025bc:	05db      	lsls	r3, r3, #23
 80025be:	429a      	cmp	r2, r3
 80025c0:	d013      	beq.n	80025ea <TIM_Base_SetConfig+0x76>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a25      	ldr	r2, [pc, #148]	; (800265c <TIM_Base_SetConfig+0xe8>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d00f      	beq.n	80025ea <TIM_Base_SetConfig+0x76>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a24      	ldr	r2, [pc, #144]	; (8002660 <TIM_Base_SetConfig+0xec>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d00b      	beq.n	80025ea <TIM_Base_SetConfig+0x76>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a23      	ldr	r2, [pc, #140]	; (8002664 <TIM_Base_SetConfig+0xf0>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d007      	beq.n	80025ea <TIM_Base_SetConfig+0x76>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a22      	ldr	r2, [pc, #136]	; (8002668 <TIM_Base_SetConfig+0xf4>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d003      	beq.n	80025ea <TIM_Base_SetConfig+0x76>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a21      	ldr	r2, [pc, #132]	; (800266c <TIM_Base_SetConfig+0xf8>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d108      	bne.n	80025fc <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	4a20      	ldr	r2, [pc, #128]	; (8002670 <TIM_Base_SetConfig+0xfc>)
 80025ee:	4013      	ands	r3, r2
 80025f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	68fa      	ldr	r2, [r7, #12]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2280      	movs	r2, #128	; 0x80
 8002600:	4393      	bics	r3, r2
 8002602:	001a      	movs	r2, r3
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	695b      	ldr	r3, [r3, #20]
 8002608:	4313      	orrs	r3, r2
 800260a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	68fa      	ldr	r2, [r7, #12]
 8002610:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	689a      	ldr	r2, [r3, #8]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a0c      	ldr	r2, [pc, #48]	; (8002658 <TIM_Base_SetConfig+0xe4>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d00b      	beq.n	8002642 <TIM_Base_SetConfig+0xce>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a0d      	ldr	r2, [pc, #52]	; (8002664 <TIM_Base_SetConfig+0xf0>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d007      	beq.n	8002642 <TIM_Base_SetConfig+0xce>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a0c      	ldr	r2, [pc, #48]	; (8002668 <TIM_Base_SetConfig+0xf4>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d003      	beq.n	8002642 <TIM_Base_SetConfig+0xce>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a0b      	ldr	r2, [pc, #44]	; (800266c <TIM_Base_SetConfig+0xf8>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d103      	bne.n	800264a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	691a      	ldr	r2, [r3, #16]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2201      	movs	r2, #1
 800264e:	615a      	str	r2, [r3, #20]
}
 8002650:	46c0      	nop			; (mov r8, r8)
 8002652:	46bd      	mov	sp, r7
 8002654:	b004      	add	sp, #16
 8002656:	bd80      	pop	{r7, pc}
 8002658:	40012c00 	.word	0x40012c00
 800265c:	40000400 	.word	0x40000400
 8002660:	40002000 	.word	0x40002000
 8002664:	40014000 	.word	0x40014000
 8002668:	40014400 	.word	0x40014400
 800266c:	40014800 	.word	0x40014800
 8002670:	fffffcff 	.word	0xfffffcff

08002674 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b086      	sub	sp, #24
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a1b      	ldr	r3, [r3, #32]
 8002682:	2201      	movs	r2, #1
 8002684:	4393      	bics	r3, r2
 8002686:	001a      	movs	r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6a1b      	ldr	r3, [r3, #32]
 8002690:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	699b      	ldr	r3, [r3, #24]
 800269c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2270      	movs	r2, #112	; 0x70
 80026a2:	4393      	bics	r3, r2
 80026a4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2203      	movs	r2, #3
 80026aa:	4393      	bics	r3, r2
 80026ac:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	68fa      	ldr	r2, [r7, #12]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	2202      	movs	r2, #2
 80026bc:	4393      	bics	r3, r2
 80026be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	697a      	ldr	r2, [r7, #20]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a27      	ldr	r2, [pc, #156]	; (800276c <TIM_OC1_SetConfig+0xf8>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d00b      	beq.n	80026ea <TIM_OC1_SetConfig+0x76>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a26      	ldr	r2, [pc, #152]	; (8002770 <TIM_OC1_SetConfig+0xfc>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d007      	beq.n	80026ea <TIM_OC1_SetConfig+0x76>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a25      	ldr	r2, [pc, #148]	; (8002774 <TIM_OC1_SetConfig+0x100>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d003      	beq.n	80026ea <TIM_OC1_SetConfig+0x76>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a24      	ldr	r2, [pc, #144]	; (8002778 <TIM_OC1_SetConfig+0x104>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d10c      	bne.n	8002704 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	2208      	movs	r2, #8
 80026ee:	4393      	bics	r3, r2
 80026f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	697a      	ldr	r2, [r7, #20]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	2204      	movs	r2, #4
 8002700:	4393      	bics	r3, r2
 8002702:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	4a19      	ldr	r2, [pc, #100]	; (800276c <TIM_OC1_SetConfig+0xf8>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d00b      	beq.n	8002724 <TIM_OC1_SetConfig+0xb0>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	4a18      	ldr	r2, [pc, #96]	; (8002770 <TIM_OC1_SetConfig+0xfc>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d007      	beq.n	8002724 <TIM_OC1_SetConfig+0xb0>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	4a17      	ldr	r2, [pc, #92]	; (8002774 <TIM_OC1_SetConfig+0x100>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d003      	beq.n	8002724 <TIM_OC1_SetConfig+0xb0>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	4a16      	ldr	r2, [pc, #88]	; (8002778 <TIM_OC1_SetConfig+0x104>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d111      	bne.n	8002748 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	4a15      	ldr	r2, [pc, #84]	; (800277c <TIM_OC1_SetConfig+0x108>)
 8002728:	4013      	ands	r3, r2
 800272a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	4a14      	ldr	r2, [pc, #80]	; (8002780 <TIM_OC1_SetConfig+0x10c>)
 8002730:	4013      	ands	r3, r2
 8002732:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	695b      	ldr	r3, [r3, #20]
 8002738:	693a      	ldr	r2, [r7, #16]
 800273a:	4313      	orrs	r3, r2
 800273c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	699b      	ldr	r3, [r3, #24]
 8002742:	693a      	ldr	r2, [r7, #16]
 8002744:	4313      	orrs	r3, r2
 8002746:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	693a      	ldr	r2, [r7, #16]
 800274c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	68fa      	ldr	r2, [r7, #12]
 8002752:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685a      	ldr	r2, [r3, #4]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	697a      	ldr	r2, [r7, #20]
 8002760:	621a      	str	r2, [r3, #32]
}
 8002762:	46c0      	nop			; (mov r8, r8)
 8002764:	46bd      	mov	sp, r7
 8002766:	b006      	add	sp, #24
 8002768:	bd80      	pop	{r7, pc}
 800276a:	46c0      	nop			; (mov r8, r8)
 800276c:	40012c00 	.word	0x40012c00
 8002770:	40014000 	.word	0x40014000
 8002774:	40014400 	.word	0x40014400
 8002778:	40014800 	.word	0x40014800
 800277c:	fffffeff 	.word	0xfffffeff
 8002780:	fffffdff 	.word	0xfffffdff

08002784 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a1b      	ldr	r3, [r3, #32]
 8002792:	2210      	movs	r2, #16
 8002794:	4393      	bics	r3, r2
 8002796:	001a      	movs	r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6a1b      	ldr	r3, [r3, #32]
 80027a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	699b      	ldr	r3, [r3, #24]
 80027ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	4a2e      	ldr	r2, [pc, #184]	; (800286c <TIM_OC2_SetConfig+0xe8>)
 80027b2:	4013      	ands	r3, r2
 80027b4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	4a2d      	ldr	r2, [pc, #180]	; (8002870 <TIM_OC2_SetConfig+0xec>)
 80027ba:	4013      	ands	r3, r2
 80027bc:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	021b      	lsls	r3, r3, #8
 80027c4:	68fa      	ldr	r2, [r7, #12]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	2220      	movs	r2, #32
 80027ce:	4393      	bics	r3, r2
 80027d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	011b      	lsls	r3, r3, #4
 80027d8:	697a      	ldr	r2, [r7, #20]
 80027da:	4313      	orrs	r3, r2
 80027dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a24      	ldr	r2, [pc, #144]	; (8002874 <TIM_OC2_SetConfig+0xf0>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d10d      	bne.n	8002802 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	2280      	movs	r2, #128	; 0x80
 80027ea:	4393      	bics	r3, r2
 80027ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	011b      	lsls	r3, r3, #4
 80027f4:	697a      	ldr	r2, [r7, #20]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	2240      	movs	r2, #64	; 0x40
 80027fe:	4393      	bics	r3, r2
 8002800:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a1b      	ldr	r2, [pc, #108]	; (8002874 <TIM_OC2_SetConfig+0xf0>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d00b      	beq.n	8002822 <TIM_OC2_SetConfig+0x9e>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a1a      	ldr	r2, [pc, #104]	; (8002878 <TIM_OC2_SetConfig+0xf4>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d007      	beq.n	8002822 <TIM_OC2_SetConfig+0x9e>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a19      	ldr	r2, [pc, #100]	; (800287c <TIM_OC2_SetConfig+0xf8>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d003      	beq.n	8002822 <TIM_OC2_SetConfig+0x9e>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a18      	ldr	r2, [pc, #96]	; (8002880 <TIM_OC2_SetConfig+0xfc>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d113      	bne.n	800284a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	4a17      	ldr	r2, [pc, #92]	; (8002884 <TIM_OC2_SetConfig+0x100>)
 8002826:	4013      	ands	r3, r2
 8002828:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	4a16      	ldr	r2, [pc, #88]	; (8002888 <TIM_OC2_SetConfig+0x104>)
 800282e:	4013      	ands	r3, r2
 8002830:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	695b      	ldr	r3, [r3, #20]
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	693a      	ldr	r2, [r7, #16]
 800283a:	4313      	orrs	r3, r2
 800283c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	693a      	ldr	r2, [r7, #16]
 8002846:	4313      	orrs	r3, r2
 8002848:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	693a      	ldr	r2, [r7, #16]
 800284e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	68fa      	ldr	r2, [r7, #12]
 8002854:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	685a      	ldr	r2, [r3, #4]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	697a      	ldr	r2, [r7, #20]
 8002862:	621a      	str	r2, [r3, #32]
}
 8002864:	46c0      	nop			; (mov r8, r8)
 8002866:	46bd      	mov	sp, r7
 8002868:	b006      	add	sp, #24
 800286a:	bd80      	pop	{r7, pc}
 800286c:	ffff8fff 	.word	0xffff8fff
 8002870:	fffffcff 	.word	0xfffffcff
 8002874:	40012c00 	.word	0x40012c00
 8002878:	40014000 	.word	0x40014000
 800287c:	40014400 	.word	0x40014400
 8002880:	40014800 	.word	0x40014800
 8002884:	fffffbff 	.word	0xfffffbff
 8002888:	fffff7ff 	.word	0xfffff7ff

0800288c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b086      	sub	sp, #24
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a1b      	ldr	r3, [r3, #32]
 800289a:	4a35      	ldr	r2, [pc, #212]	; (8002970 <TIM_OC3_SetConfig+0xe4>)
 800289c:	401a      	ands	r2, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a1b      	ldr	r3, [r3, #32]
 80028a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	69db      	ldr	r3, [r3, #28]
 80028b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2270      	movs	r2, #112	; 0x70
 80028b8:	4393      	bics	r3, r2
 80028ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2203      	movs	r2, #3
 80028c0:	4393      	bics	r3, r2
 80028c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	68fa      	ldr	r2, [r7, #12]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	4a28      	ldr	r2, [pc, #160]	; (8002974 <TIM_OC3_SetConfig+0xe8>)
 80028d2:	4013      	ands	r3, r2
 80028d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	021b      	lsls	r3, r3, #8
 80028dc:	697a      	ldr	r2, [r7, #20]
 80028de:	4313      	orrs	r3, r2
 80028e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a24      	ldr	r2, [pc, #144]	; (8002978 <TIM_OC3_SetConfig+0xec>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d10d      	bne.n	8002906 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	4a23      	ldr	r2, [pc, #140]	; (800297c <TIM_OC3_SetConfig+0xf0>)
 80028ee:	4013      	ands	r3, r2
 80028f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	021b      	lsls	r3, r3, #8
 80028f8:	697a      	ldr	r2, [r7, #20]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	4a1f      	ldr	r2, [pc, #124]	; (8002980 <TIM_OC3_SetConfig+0xf4>)
 8002902:	4013      	ands	r3, r2
 8002904:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a1b      	ldr	r2, [pc, #108]	; (8002978 <TIM_OC3_SetConfig+0xec>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d00b      	beq.n	8002926 <TIM_OC3_SetConfig+0x9a>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a1c      	ldr	r2, [pc, #112]	; (8002984 <TIM_OC3_SetConfig+0xf8>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d007      	beq.n	8002926 <TIM_OC3_SetConfig+0x9a>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a1b      	ldr	r2, [pc, #108]	; (8002988 <TIM_OC3_SetConfig+0xfc>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d003      	beq.n	8002926 <TIM_OC3_SetConfig+0x9a>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a1a      	ldr	r2, [pc, #104]	; (800298c <TIM_OC3_SetConfig+0x100>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d113      	bne.n	800294e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	4a19      	ldr	r2, [pc, #100]	; (8002990 <TIM_OC3_SetConfig+0x104>)
 800292a:	4013      	ands	r3, r2
 800292c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	4a18      	ldr	r2, [pc, #96]	; (8002994 <TIM_OC3_SetConfig+0x108>)
 8002932:	4013      	ands	r3, r2
 8002934:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	695b      	ldr	r3, [r3, #20]
 800293a:	011b      	lsls	r3, r3, #4
 800293c:	693a      	ldr	r2, [r7, #16]
 800293e:	4313      	orrs	r3, r2
 8002940:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	699b      	ldr	r3, [r3, #24]
 8002946:	011b      	lsls	r3, r3, #4
 8002948:	693a      	ldr	r2, [r7, #16]
 800294a:	4313      	orrs	r3, r2
 800294c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	693a      	ldr	r2, [r7, #16]
 8002952:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	68fa      	ldr	r2, [r7, #12]
 8002958:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	685a      	ldr	r2, [r3, #4]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	697a      	ldr	r2, [r7, #20]
 8002966:	621a      	str	r2, [r3, #32]
}
 8002968:	46c0      	nop			; (mov r8, r8)
 800296a:	46bd      	mov	sp, r7
 800296c:	b006      	add	sp, #24
 800296e:	bd80      	pop	{r7, pc}
 8002970:	fffffeff 	.word	0xfffffeff
 8002974:	fffffdff 	.word	0xfffffdff
 8002978:	40012c00 	.word	0x40012c00
 800297c:	fffff7ff 	.word	0xfffff7ff
 8002980:	fffffbff 	.word	0xfffffbff
 8002984:	40014000 	.word	0x40014000
 8002988:	40014400 	.word	0x40014400
 800298c:	40014800 	.word	0x40014800
 8002990:	ffffefff 	.word	0xffffefff
 8002994:	ffffdfff 	.word	0xffffdfff

08002998 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b086      	sub	sp, #24
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a1b      	ldr	r3, [r3, #32]
 80029a6:	4a28      	ldr	r2, [pc, #160]	; (8002a48 <TIM_OC4_SetConfig+0xb0>)
 80029a8:	401a      	ands	r2, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6a1b      	ldr	r3, [r3, #32]
 80029b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	69db      	ldr	r3, [r3, #28]
 80029be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	4a22      	ldr	r2, [pc, #136]	; (8002a4c <TIM_OC4_SetConfig+0xb4>)
 80029c4:	4013      	ands	r3, r2
 80029c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	4a21      	ldr	r2, [pc, #132]	; (8002a50 <TIM_OC4_SetConfig+0xb8>)
 80029cc:	4013      	ands	r3, r2
 80029ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	021b      	lsls	r3, r3, #8
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	4313      	orrs	r3, r2
 80029da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	4a1d      	ldr	r2, [pc, #116]	; (8002a54 <TIM_OC4_SetConfig+0xbc>)
 80029e0:	4013      	ands	r3, r2
 80029e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	031b      	lsls	r3, r3, #12
 80029ea:	693a      	ldr	r2, [r7, #16]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	4a19      	ldr	r2, [pc, #100]	; (8002a58 <TIM_OC4_SetConfig+0xc0>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d00b      	beq.n	8002a10 <TIM_OC4_SetConfig+0x78>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	4a18      	ldr	r2, [pc, #96]	; (8002a5c <TIM_OC4_SetConfig+0xc4>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d007      	beq.n	8002a10 <TIM_OC4_SetConfig+0x78>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	4a17      	ldr	r2, [pc, #92]	; (8002a60 <TIM_OC4_SetConfig+0xc8>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d003      	beq.n	8002a10 <TIM_OC4_SetConfig+0x78>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	4a16      	ldr	r2, [pc, #88]	; (8002a64 <TIM_OC4_SetConfig+0xcc>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d109      	bne.n	8002a24 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	4a15      	ldr	r2, [pc, #84]	; (8002a68 <TIM_OC4_SetConfig+0xd0>)
 8002a14:	4013      	ands	r3, r2
 8002a16:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	695b      	ldr	r3, [r3, #20]
 8002a1c:	019b      	lsls	r3, r3, #6
 8002a1e:	697a      	ldr	r2, [r7, #20]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	697a      	ldr	r2, [r7, #20]
 8002a28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	68fa      	ldr	r2, [r7, #12]
 8002a2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	685a      	ldr	r2, [r3, #4]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	693a      	ldr	r2, [r7, #16]
 8002a3c:	621a      	str	r2, [r3, #32]
}
 8002a3e:	46c0      	nop			; (mov r8, r8)
 8002a40:	46bd      	mov	sp, r7
 8002a42:	b006      	add	sp, #24
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	46c0      	nop			; (mov r8, r8)
 8002a48:	ffffefff 	.word	0xffffefff
 8002a4c:	ffff8fff 	.word	0xffff8fff
 8002a50:	fffffcff 	.word	0xfffffcff
 8002a54:	ffffdfff 	.word	0xffffdfff
 8002a58:	40012c00 	.word	0x40012c00
 8002a5c:	40014000 	.word	0x40014000
 8002a60:	40014400 	.word	0x40014400
 8002a64:	40014800 	.word	0x40014800
 8002a68:	ffffbfff 	.word	0xffffbfff

08002a6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b086      	sub	sp, #24
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6a1b      	ldr	r3, [r3, #32]
 8002a7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6a1b      	ldr	r3, [r3, #32]
 8002a82:	2201      	movs	r2, #1
 8002a84:	4393      	bics	r3, r2
 8002a86:	001a      	movs	r2, r3
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	699b      	ldr	r3, [r3, #24]
 8002a90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	22f0      	movs	r2, #240	; 0xf0
 8002a96:	4393      	bics	r3, r2
 8002a98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	011b      	lsls	r3, r3, #4
 8002a9e:	693a      	ldr	r2, [r7, #16]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	220a      	movs	r2, #10
 8002aa8:	4393      	bics	r3, r2
 8002aaa:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002aac:	697a      	ldr	r2, [r7, #20]
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	693a      	ldr	r2, [r7, #16]
 8002ab8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	697a      	ldr	r2, [r7, #20]
 8002abe:	621a      	str	r2, [r3, #32]
}
 8002ac0:	46c0      	nop			; (mov r8, r8)
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	b006      	add	sp, #24
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b086      	sub	sp, #24
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	60f8      	str	r0, [r7, #12]
 8002ad0:	60b9      	str	r1, [r7, #8]
 8002ad2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6a1b      	ldr	r3, [r3, #32]
 8002ad8:	2210      	movs	r2, #16
 8002ada:	4393      	bics	r3, r2
 8002adc:	001a      	movs	r2, r3
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6a1b      	ldr	r3, [r3, #32]
 8002aec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	4a0d      	ldr	r2, [pc, #52]	; (8002b28 <TIM_TI2_ConfigInputStage+0x60>)
 8002af2:	4013      	ands	r3, r2
 8002af4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	031b      	lsls	r3, r3, #12
 8002afa:	697a      	ldr	r2, [r7, #20]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	22a0      	movs	r2, #160	; 0xa0
 8002b04:	4393      	bics	r3, r2
 8002b06:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	011b      	lsls	r3, r3, #4
 8002b0c:	693a      	ldr	r2, [r7, #16]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	697a      	ldr	r2, [r7, #20]
 8002b16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	693a      	ldr	r2, [r7, #16]
 8002b1c:	621a      	str	r2, [r3, #32]
}
 8002b1e:	46c0      	nop			; (mov r8, r8)
 8002b20:	46bd      	mov	sp, r7
 8002b22:	b006      	add	sp, #24
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	46c0      	nop			; (mov r8, r8)
 8002b28:	ffff0fff 	.word	0xffff0fff

08002b2c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2270      	movs	r2, #112	; 0x70
 8002b40:	4393      	bics	r3, r2
 8002b42:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b44:	683a      	ldr	r2, [r7, #0]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	2207      	movs	r2, #7
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	609a      	str	r2, [r3, #8]
}
 8002b56:	46c0      	nop			; (mov r8, r8)
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	b004      	add	sp, #16
 8002b5c:	bd80      	pop	{r7, pc}
	...

08002b60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b086      	sub	sp, #24
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	607a      	str	r2, [r7, #4]
 8002b6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	4a09      	ldr	r2, [pc, #36]	; (8002b9c <TIM_ETR_SetConfig+0x3c>)
 8002b78:	4013      	ands	r3, r2
 8002b7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	021a      	lsls	r2, r3, #8
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	431a      	orrs	r2, r3
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	697a      	ldr	r2, [r7, #20]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	697a      	ldr	r2, [r7, #20]
 8002b92:	609a      	str	r2, [r3, #8]
}
 8002b94:	46c0      	nop			; (mov r8, r8)
 8002b96:	46bd      	mov	sp, r7
 8002b98:	b006      	add	sp, #24
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	ffff00ff 	.word	0xffff00ff

08002ba0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b086      	sub	sp, #24
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	221f      	movs	r2, #31
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	409a      	lsls	r2, r3
 8002bb6:	0013      	movs	r3, r2
 8002bb8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	6a1b      	ldr	r3, [r3, #32]
 8002bbe:	697a      	ldr	r2, [r7, #20]
 8002bc0:	43d2      	mvns	r2, r2
 8002bc2:	401a      	ands	r2, r3
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6a1a      	ldr	r2, [r3, #32]
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	211f      	movs	r1, #31
 8002bd0:	400b      	ands	r3, r1
 8002bd2:	6879      	ldr	r1, [r7, #4]
 8002bd4:	4099      	lsls	r1, r3
 8002bd6:	000b      	movs	r3, r1
 8002bd8:	431a      	orrs	r2, r3
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	621a      	str	r2, [r3, #32]
}
 8002bde:	46c0      	nop			; (mov r8, r8)
 8002be0:	46bd      	mov	sp, r7
 8002be2:	b006      	add	sp, #24
 8002be4:	bd80      	pop	{r7, pc}
	...

08002be8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	223c      	movs	r2, #60	; 0x3c
 8002bf6:	5c9b      	ldrb	r3, [r3, r2]
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d101      	bne.n	8002c00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	e047      	b.n	8002c90 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	223c      	movs	r2, #60	; 0x3c
 8002c04:	2101      	movs	r1, #1
 8002c06:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	223d      	movs	r2, #61	; 0x3d
 8002c0c:	2102      	movs	r1, #2
 8002c0e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2270      	movs	r2, #112	; 0x70
 8002c24:	4393      	bics	r3, r2
 8002c26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	68fa      	ldr	r2, [r7, #12]
 8002c38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a16      	ldr	r2, [pc, #88]	; (8002c98 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d00f      	beq.n	8002c64 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	2380      	movs	r3, #128	; 0x80
 8002c4a:	05db      	lsls	r3, r3, #23
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d009      	beq.n	8002c64 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a11      	ldr	r2, [pc, #68]	; (8002c9c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d004      	beq.n	8002c64 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a10      	ldr	r2, [pc, #64]	; (8002ca0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d10c      	bne.n	8002c7e <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	2280      	movs	r2, #128	; 0x80
 8002c68:	4393      	bics	r3, r2
 8002c6a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	68ba      	ldr	r2, [r7, #8]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	68ba      	ldr	r2, [r7, #8]
 8002c7c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	223d      	movs	r2, #61	; 0x3d
 8002c82:	2101      	movs	r1, #1
 8002c84:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	223c      	movs	r2, #60	; 0x3c
 8002c8a:	2100      	movs	r1, #0
 8002c8c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c8e:	2300      	movs	r3, #0
}
 8002c90:	0018      	movs	r0, r3
 8002c92:	46bd      	mov	sp, r7
 8002c94:	b004      	add	sp, #16
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	40012c00 	.word	0x40012c00
 8002c9c:	40000400 	.word	0x40000400
 8002ca0:	40014000 	.word	0x40014000

08002ca4 <__libc_init_array>:
 8002ca4:	b570      	push	{r4, r5, r6, lr}
 8002ca6:	2600      	movs	r6, #0
 8002ca8:	4d0c      	ldr	r5, [pc, #48]	; (8002cdc <__libc_init_array+0x38>)
 8002caa:	4c0d      	ldr	r4, [pc, #52]	; (8002ce0 <__libc_init_array+0x3c>)
 8002cac:	1b64      	subs	r4, r4, r5
 8002cae:	10a4      	asrs	r4, r4, #2
 8002cb0:	42a6      	cmp	r6, r4
 8002cb2:	d109      	bne.n	8002cc8 <__libc_init_array+0x24>
 8002cb4:	2600      	movs	r6, #0
 8002cb6:	f000 f82b 	bl	8002d10 <_init>
 8002cba:	4d0a      	ldr	r5, [pc, #40]	; (8002ce4 <__libc_init_array+0x40>)
 8002cbc:	4c0a      	ldr	r4, [pc, #40]	; (8002ce8 <__libc_init_array+0x44>)
 8002cbe:	1b64      	subs	r4, r4, r5
 8002cc0:	10a4      	asrs	r4, r4, #2
 8002cc2:	42a6      	cmp	r6, r4
 8002cc4:	d105      	bne.n	8002cd2 <__libc_init_array+0x2e>
 8002cc6:	bd70      	pop	{r4, r5, r6, pc}
 8002cc8:	00b3      	lsls	r3, r6, #2
 8002cca:	58eb      	ldr	r3, [r5, r3]
 8002ccc:	4798      	blx	r3
 8002cce:	3601      	adds	r6, #1
 8002cd0:	e7ee      	b.n	8002cb0 <__libc_init_array+0xc>
 8002cd2:	00b3      	lsls	r3, r6, #2
 8002cd4:	58eb      	ldr	r3, [r5, r3]
 8002cd6:	4798      	blx	r3
 8002cd8:	3601      	adds	r6, #1
 8002cda:	e7f2      	b.n	8002cc2 <__libc_init_array+0x1e>
 8002cdc:	08002db8 	.word	0x08002db8
 8002ce0:	08002db8 	.word	0x08002db8
 8002ce4:	08002db8 	.word	0x08002db8
 8002ce8:	08002dbc 	.word	0x08002dbc

08002cec <memcpy>:
 8002cec:	2300      	movs	r3, #0
 8002cee:	b510      	push	{r4, lr}
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d100      	bne.n	8002cf6 <memcpy+0xa>
 8002cf4:	bd10      	pop	{r4, pc}
 8002cf6:	5ccc      	ldrb	r4, [r1, r3]
 8002cf8:	54c4      	strb	r4, [r0, r3]
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	e7f8      	b.n	8002cf0 <memcpy+0x4>

08002cfe <memset>:
 8002cfe:	0003      	movs	r3, r0
 8002d00:	1812      	adds	r2, r2, r0
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d100      	bne.n	8002d08 <memset+0xa>
 8002d06:	4770      	bx	lr
 8002d08:	7019      	strb	r1, [r3, #0]
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	e7f9      	b.n	8002d02 <memset+0x4>
	...

08002d10 <_init>:
 8002d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d12:	46c0      	nop			; (mov r8, r8)
 8002d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d16:	bc08      	pop	{r3}
 8002d18:	469e      	mov	lr, r3
 8002d1a:	4770      	bx	lr

08002d1c <_fini>:
 8002d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d1e:	46c0      	nop			; (mov r8, r8)
 8002d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d22:	bc08      	pop	{r3}
 8002d24:	469e      	mov	lr, r3
 8002d26:	4770      	bx	lr
